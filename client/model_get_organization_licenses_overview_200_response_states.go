/*
Meraki Dashboard API

A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 03 July, 2024 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.48.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the GetOrganizationLicensesOverview200ResponseStates type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetOrganizationLicensesOverview200ResponseStates{}

// GetOrganizationLicensesOverview200ResponseStates Aggregated data for licenses by state (Per-device licensing only)
type GetOrganizationLicensesOverview200ResponseStates struct {
	Active *GetOrganizationLicensesOverview200ResponseStatesActive `json:"active,omitempty"`
	Expired *GetOrganizationLicensesOverview200ResponseStatesExpired `json:"expired,omitempty"`
	Expiring *GetOrganizationLicensesOverview200ResponseStatesExpiring `json:"expiring,omitempty"`
	RecentlyQueued *GetOrganizationLicensesOverview200ResponseStatesRecentlyQueued `json:"recentlyQueued,omitempty"`
	Unused *GetOrganizationLicensesOverview200ResponseStatesUnused `json:"unused,omitempty"`
	UnusedActive *GetOrganizationLicensesOverview200ResponseStatesUnusedActive `json:"unusedActive,omitempty"`
}

// NewGetOrganizationLicensesOverview200ResponseStates instantiates a new GetOrganizationLicensesOverview200ResponseStates object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetOrganizationLicensesOverview200ResponseStates() *GetOrganizationLicensesOverview200ResponseStates {
	this := GetOrganizationLicensesOverview200ResponseStates{}
	return &this
}

// NewGetOrganizationLicensesOverview200ResponseStatesWithDefaults instantiates a new GetOrganizationLicensesOverview200ResponseStates object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetOrganizationLicensesOverview200ResponseStatesWithDefaults() *GetOrganizationLicensesOverview200ResponseStates {
	this := GetOrganizationLicensesOverview200ResponseStates{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *GetOrganizationLicensesOverview200ResponseStates) GetActive() GetOrganizationLicensesOverview200ResponseStatesActive {
	if o == nil || IsNil(o.Active) {
		var ret GetOrganizationLicensesOverview200ResponseStatesActive
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetOrganizationLicensesOverview200ResponseStates) GetActiveOk() (*GetOrganizationLicensesOverview200ResponseStatesActive, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *GetOrganizationLicensesOverview200ResponseStates) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given GetOrganizationLicensesOverview200ResponseStatesActive and assigns it to the Active field.
func (o *GetOrganizationLicensesOverview200ResponseStates) SetActive(v GetOrganizationLicensesOverview200ResponseStatesActive) {
	o.Active = &v
}

// GetExpired returns the Expired field value if set, zero value otherwise.
func (o *GetOrganizationLicensesOverview200ResponseStates) GetExpired() GetOrganizationLicensesOverview200ResponseStatesExpired {
	if o == nil || IsNil(o.Expired) {
		var ret GetOrganizationLicensesOverview200ResponseStatesExpired
		return ret
	}
	return *o.Expired
}

// GetExpiredOk returns a tuple with the Expired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetOrganizationLicensesOverview200ResponseStates) GetExpiredOk() (*GetOrganizationLicensesOverview200ResponseStatesExpired, bool) {
	if o == nil || IsNil(o.Expired) {
		return nil, false
	}
	return o.Expired, true
}

// HasExpired returns a boolean if a field has been set.
func (o *GetOrganizationLicensesOverview200ResponseStates) HasExpired() bool {
	if o != nil && !IsNil(o.Expired) {
		return true
	}

	return false
}

// SetExpired gets a reference to the given GetOrganizationLicensesOverview200ResponseStatesExpired and assigns it to the Expired field.
func (o *GetOrganizationLicensesOverview200ResponseStates) SetExpired(v GetOrganizationLicensesOverview200ResponseStatesExpired) {
	o.Expired = &v
}

// GetExpiring returns the Expiring field value if set, zero value otherwise.
func (o *GetOrganizationLicensesOverview200ResponseStates) GetExpiring() GetOrganizationLicensesOverview200ResponseStatesExpiring {
	if o == nil || IsNil(o.Expiring) {
		var ret GetOrganizationLicensesOverview200ResponseStatesExpiring
		return ret
	}
	return *o.Expiring
}

// GetExpiringOk returns a tuple with the Expiring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetOrganizationLicensesOverview200ResponseStates) GetExpiringOk() (*GetOrganizationLicensesOverview200ResponseStatesExpiring, bool) {
	if o == nil || IsNil(o.Expiring) {
		return nil, false
	}
	return o.Expiring, true
}

// HasExpiring returns a boolean if a field has been set.
func (o *GetOrganizationLicensesOverview200ResponseStates) HasExpiring() bool {
	if o != nil && !IsNil(o.Expiring) {
		return true
	}

	return false
}

// SetExpiring gets a reference to the given GetOrganizationLicensesOverview200ResponseStatesExpiring and assigns it to the Expiring field.
func (o *GetOrganizationLicensesOverview200ResponseStates) SetExpiring(v GetOrganizationLicensesOverview200ResponseStatesExpiring) {
	o.Expiring = &v
}

// GetRecentlyQueued returns the RecentlyQueued field value if set, zero value otherwise.
func (o *GetOrganizationLicensesOverview200ResponseStates) GetRecentlyQueued() GetOrganizationLicensesOverview200ResponseStatesRecentlyQueued {
	if o == nil || IsNil(o.RecentlyQueued) {
		var ret GetOrganizationLicensesOverview200ResponseStatesRecentlyQueued
		return ret
	}
	return *o.RecentlyQueued
}

// GetRecentlyQueuedOk returns a tuple with the RecentlyQueued field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetOrganizationLicensesOverview200ResponseStates) GetRecentlyQueuedOk() (*GetOrganizationLicensesOverview200ResponseStatesRecentlyQueued, bool) {
	if o == nil || IsNil(o.RecentlyQueued) {
		return nil, false
	}
	return o.RecentlyQueued, true
}

// HasRecentlyQueued returns a boolean if a field has been set.
func (o *GetOrganizationLicensesOverview200ResponseStates) HasRecentlyQueued() bool {
	if o != nil && !IsNil(o.RecentlyQueued) {
		return true
	}

	return false
}

// SetRecentlyQueued gets a reference to the given GetOrganizationLicensesOverview200ResponseStatesRecentlyQueued and assigns it to the RecentlyQueued field.
func (o *GetOrganizationLicensesOverview200ResponseStates) SetRecentlyQueued(v GetOrganizationLicensesOverview200ResponseStatesRecentlyQueued) {
	o.RecentlyQueued = &v
}

// GetUnused returns the Unused field value if set, zero value otherwise.
func (o *GetOrganizationLicensesOverview200ResponseStates) GetUnused() GetOrganizationLicensesOverview200ResponseStatesUnused {
	if o == nil || IsNil(o.Unused) {
		var ret GetOrganizationLicensesOverview200ResponseStatesUnused
		return ret
	}
	return *o.Unused
}

// GetUnusedOk returns a tuple with the Unused field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetOrganizationLicensesOverview200ResponseStates) GetUnusedOk() (*GetOrganizationLicensesOverview200ResponseStatesUnused, bool) {
	if o == nil || IsNil(o.Unused) {
		return nil, false
	}
	return o.Unused, true
}

// HasUnused returns a boolean if a field has been set.
func (o *GetOrganizationLicensesOverview200ResponseStates) HasUnused() bool {
	if o != nil && !IsNil(o.Unused) {
		return true
	}

	return false
}

// SetUnused gets a reference to the given GetOrganizationLicensesOverview200ResponseStatesUnused and assigns it to the Unused field.
func (o *GetOrganizationLicensesOverview200ResponseStates) SetUnused(v GetOrganizationLicensesOverview200ResponseStatesUnused) {
	o.Unused = &v
}

// GetUnusedActive returns the UnusedActive field value if set, zero value otherwise.
func (o *GetOrganizationLicensesOverview200ResponseStates) GetUnusedActive() GetOrganizationLicensesOverview200ResponseStatesUnusedActive {
	if o == nil || IsNil(o.UnusedActive) {
		var ret GetOrganizationLicensesOverview200ResponseStatesUnusedActive
		return ret
	}
	return *o.UnusedActive
}

// GetUnusedActiveOk returns a tuple with the UnusedActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetOrganizationLicensesOverview200ResponseStates) GetUnusedActiveOk() (*GetOrganizationLicensesOverview200ResponseStatesUnusedActive, bool) {
	if o == nil || IsNil(o.UnusedActive) {
		return nil, false
	}
	return o.UnusedActive, true
}

// HasUnusedActive returns a boolean if a field has been set.
func (o *GetOrganizationLicensesOverview200ResponseStates) HasUnusedActive() bool {
	if o != nil && !IsNil(o.UnusedActive) {
		return true
	}

	return false
}

// SetUnusedActive gets a reference to the given GetOrganizationLicensesOverview200ResponseStatesUnusedActive and assigns it to the UnusedActive field.
func (o *GetOrganizationLicensesOverview200ResponseStates) SetUnusedActive(v GetOrganizationLicensesOverview200ResponseStatesUnusedActive) {
	o.UnusedActive = &v
}

func (o GetOrganizationLicensesOverview200ResponseStates) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetOrganizationLicensesOverview200ResponseStates) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Expired) {
		toSerialize["expired"] = o.Expired
	}
	if !IsNil(o.Expiring) {
		toSerialize["expiring"] = o.Expiring
	}
	if !IsNil(o.RecentlyQueued) {
		toSerialize["recentlyQueued"] = o.RecentlyQueued
	}
	if !IsNil(o.Unused) {
		toSerialize["unused"] = o.Unused
	}
	if !IsNil(o.UnusedActive) {
		toSerialize["unusedActive"] = o.UnusedActive
	}
	return toSerialize, nil
}

type NullableGetOrganizationLicensesOverview200ResponseStates struct {
	value *GetOrganizationLicensesOverview200ResponseStates
	isSet bool
}

func (v NullableGetOrganizationLicensesOverview200ResponseStates) Get() *GetOrganizationLicensesOverview200ResponseStates {
	return v.value
}

func (v *NullableGetOrganizationLicensesOverview200ResponseStates) Set(val *GetOrganizationLicensesOverview200ResponseStates) {
	v.value = val
	v.isSet = true
}

func (v NullableGetOrganizationLicensesOverview200ResponseStates) IsSet() bool {
	return v.isSet
}

func (v *NullableGetOrganizationLicensesOverview200ResponseStates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetOrganizationLicensesOverview200ResponseStates(val *GetOrganizationLicensesOverview200ResponseStates) *NullableGetOrganizationLicensesOverview200ResponseStates {
	return &NullableGetOrganizationLicensesOverview200ResponseStates{value: val, isSet: true}
}

func (v NullableGetOrganizationLicensesOverview200ResponseStates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetOrganizationLicensesOverview200ResponseStates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


