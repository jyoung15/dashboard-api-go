/*
Meraki Dashboard API

A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 03 July, 2024 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.48.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest{}

// UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest struct for UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest
type UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest struct {
	// The updated mac address of the trusted server
	Mac *string `json:"mac,omitempty"`
	// The updated VLAN of the trusted server. It must be between 1 and 4094
	Vlan *int32 `json:"vlan,omitempty"`
	Ipv4 *UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequestIpv4 `json:"ipv4,omitempty"`
}

// NewUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest instantiates a new UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest() *UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest {
	this := UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest{}
	return &this
}

// NewUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequestWithDefaults instantiates a new UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequestWithDefaults() *UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest {
	this := UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest{}
	return &this
}

// GetMac returns the Mac field value if set, zero value otherwise.
func (o *UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) GetMac() string {
	if o == nil || IsNil(o.Mac) {
		var ret string
		return ret
	}
	return *o.Mac
}

// GetMacOk returns a tuple with the Mac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) GetMacOk() (*string, bool) {
	if o == nil || IsNil(o.Mac) {
		return nil, false
	}
	return o.Mac, true
}

// HasMac returns a boolean if a field has been set.
func (o *UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) HasMac() bool {
	if o != nil && !IsNil(o.Mac) {
		return true
	}

	return false
}

// SetMac gets a reference to the given string and assigns it to the Mac field.
func (o *UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) SetMac(v string) {
	o.Mac = &v
}

// GetVlan returns the Vlan field value if set, zero value otherwise.
func (o *UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) GetVlan() int32 {
	if o == nil || IsNil(o.Vlan) {
		var ret int32
		return ret
	}
	return *o.Vlan
}

// GetVlanOk returns a tuple with the Vlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) GetVlanOk() (*int32, bool) {
	if o == nil || IsNil(o.Vlan) {
		return nil, false
	}
	return o.Vlan, true
}

// HasVlan returns a boolean if a field has been set.
func (o *UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) HasVlan() bool {
	if o != nil && !IsNil(o.Vlan) {
		return true
	}

	return false
}

// SetVlan gets a reference to the given int32 and assigns it to the Vlan field.
func (o *UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) SetVlan(v int32) {
	o.Vlan = &v
}

// GetIpv4 returns the Ipv4 field value if set, zero value otherwise.
func (o *UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) GetIpv4() UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequestIpv4 {
	if o == nil || IsNil(o.Ipv4) {
		var ret UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequestIpv4
		return ret
	}
	return *o.Ipv4
}

// GetIpv4Ok returns a tuple with the Ipv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) GetIpv4Ok() (*UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequestIpv4, bool) {
	if o == nil || IsNil(o.Ipv4) {
		return nil, false
	}
	return o.Ipv4, true
}

// HasIpv4 returns a boolean if a field has been set.
func (o *UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) HasIpv4() bool {
	if o != nil && !IsNil(o.Ipv4) {
		return true
	}

	return false
}

// SetIpv4 gets a reference to the given UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequestIpv4 and assigns it to the Ipv4 field.
func (o *UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) SetIpv4(v UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequestIpv4) {
	o.Ipv4 = &v
}

func (o UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Mac) {
		toSerialize["mac"] = o.Mac
	}
	if !IsNil(o.Vlan) {
		toSerialize["vlan"] = o.Vlan
	}
	if !IsNil(o.Ipv4) {
		toSerialize["ipv4"] = o.Ipv4
	}
	return toSerialize, nil
}

type NullableUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest struct {
	value *UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest
	isSet bool
}

func (v NullableUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) Get() *UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest {
	return v.value
}

func (v *NullableUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) Set(val *UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest(val *UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) *NullableUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest {
	return &NullableUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest{value: val, isSet: true}
}

func (v NullableUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


