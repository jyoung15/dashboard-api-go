/*
Meraki Dashboard API

A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 03 July, 2024 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.48.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateNetworkSwitchAccessControlListsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateNetworkSwitchAccessControlListsRequest{}

// UpdateNetworkSwitchAccessControlListsRequest struct for UpdateNetworkSwitchAccessControlListsRequest
type UpdateNetworkSwitchAccessControlListsRequest struct {
	// An ordered array of the access control list rules (not including the default rule). An empty array will clear the rules.
	Rules []UpdateNetworkSwitchAccessControlListsRequestRulesInner `json:"rules"`
}

type _UpdateNetworkSwitchAccessControlListsRequest UpdateNetworkSwitchAccessControlListsRequest

// NewUpdateNetworkSwitchAccessControlListsRequest instantiates a new UpdateNetworkSwitchAccessControlListsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateNetworkSwitchAccessControlListsRequest(rules []UpdateNetworkSwitchAccessControlListsRequestRulesInner) *UpdateNetworkSwitchAccessControlListsRequest {
	this := UpdateNetworkSwitchAccessControlListsRequest{}
	this.Rules = rules
	return &this
}

// NewUpdateNetworkSwitchAccessControlListsRequestWithDefaults instantiates a new UpdateNetworkSwitchAccessControlListsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateNetworkSwitchAccessControlListsRequestWithDefaults() *UpdateNetworkSwitchAccessControlListsRequest {
	this := UpdateNetworkSwitchAccessControlListsRequest{}
	return &this
}

// GetRules returns the Rules field value
func (o *UpdateNetworkSwitchAccessControlListsRequest) GetRules() []UpdateNetworkSwitchAccessControlListsRequestRulesInner {
	if o == nil {
		var ret []UpdateNetworkSwitchAccessControlListsRequestRulesInner
		return ret
	}

	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value
// and a boolean to check if the value has been set.
func (o *UpdateNetworkSwitchAccessControlListsRequest) GetRulesOk() ([]UpdateNetworkSwitchAccessControlListsRequestRulesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rules, true
}

// SetRules sets field value
func (o *UpdateNetworkSwitchAccessControlListsRequest) SetRules(v []UpdateNetworkSwitchAccessControlListsRequestRulesInner) {
	o.Rules = v
}

func (o UpdateNetworkSwitchAccessControlListsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateNetworkSwitchAccessControlListsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rules"] = o.Rules
	return toSerialize, nil
}

func (o *UpdateNetworkSwitchAccessControlListsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rules",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateNetworkSwitchAccessControlListsRequest := _UpdateNetworkSwitchAccessControlListsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateNetworkSwitchAccessControlListsRequest)

	if err != nil {
		return err
	}

	*o = UpdateNetworkSwitchAccessControlListsRequest(varUpdateNetworkSwitchAccessControlListsRequest)

	return err
}

type NullableUpdateNetworkSwitchAccessControlListsRequest struct {
	value *UpdateNetworkSwitchAccessControlListsRequest
	isSet bool
}

func (v NullableUpdateNetworkSwitchAccessControlListsRequest) Get() *UpdateNetworkSwitchAccessControlListsRequest {
	return v.value
}

func (v *NullableUpdateNetworkSwitchAccessControlListsRequest) Set(val *UpdateNetworkSwitchAccessControlListsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateNetworkSwitchAccessControlListsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateNetworkSwitchAccessControlListsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateNetworkSwitchAccessControlListsRequest(val *UpdateNetworkSwitchAccessControlListsRequest) *NullableUpdateNetworkSwitchAccessControlListsRequest {
	return &NullableUpdateNetworkSwitchAccessControlListsRequest{value: val, isSet: true}
}

func (v NullableUpdateNetworkSwitchAccessControlListsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateNetworkSwitchAccessControlListsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


