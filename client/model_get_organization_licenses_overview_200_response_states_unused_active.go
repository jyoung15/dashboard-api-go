/*
Meraki Dashboard API

A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 03 July, 2024 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.48.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the GetOrganizationLicensesOverview200ResponseStatesUnusedActive type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetOrganizationLicensesOverview200ResponseStatesUnusedActive{}

// GetOrganizationLicensesOverview200ResponseStatesUnusedActive Data for unused, active licenses
type GetOrganizationLicensesOverview200ResponseStatesUnusedActive struct {
	// The number of unused, active licenses
	Count *int32 `json:"count,omitempty"`
	OldestActivation *GetOrganizationLicensesOverview200ResponseStatesUnusedActiveOldestActivation `json:"oldestActivation,omitempty"`
}

// NewGetOrganizationLicensesOverview200ResponseStatesUnusedActive instantiates a new GetOrganizationLicensesOverview200ResponseStatesUnusedActive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetOrganizationLicensesOverview200ResponseStatesUnusedActive() *GetOrganizationLicensesOverview200ResponseStatesUnusedActive {
	this := GetOrganizationLicensesOverview200ResponseStatesUnusedActive{}
	return &this
}

// NewGetOrganizationLicensesOverview200ResponseStatesUnusedActiveWithDefaults instantiates a new GetOrganizationLicensesOverview200ResponseStatesUnusedActive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetOrganizationLicensesOverview200ResponseStatesUnusedActiveWithDefaults() *GetOrganizationLicensesOverview200ResponseStatesUnusedActive {
	this := GetOrganizationLicensesOverview200ResponseStatesUnusedActive{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *GetOrganizationLicensesOverview200ResponseStatesUnusedActive) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetOrganizationLicensesOverview200ResponseStatesUnusedActive) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *GetOrganizationLicensesOverview200ResponseStatesUnusedActive) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *GetOrganizationLicensesOverview200ResponseStatesUnusedActive) SetCount(v int32) {
	o.Count = &v
}

// GetOldestActivation returns the OldestActivation field value if set, zero value otherwise.
func (o *GetOrganizationLicensesOverview200ResponseStatesUnusedActive) GetOldestActivation() GetOrganizationLicensesOverview200ResponseStatesUnusedActiveOldestActivation {
	if o == nil || IsNil(o.OldestActivation) {
		var ret GetOrganizationLicensesOverview200ResponseStatesUnusedActiveOldestActivation
		return ret
	}
	return *o.OldestActivation
}

// GetOldestActivationOk returns a tuple with the OldestActivation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetOrganizationLicensesOverview200ResponseStatesUnusedActive) GetOldestActivationOk() (*GetOrganizationLicensesOverview200ResponseStatesUnusedActiveOldestActivation, bool) {
	if o == nil || IsNil(o.OldestActivation) {
		return nil, false
	}
	return o.OldestActivation, true
}

// HasOldestActivation returns a boolean if a field has been set.
func (o *GetOrganizationLicensesOverview200ResponseStatesUnusedActive) HasOldestActivation() bool {
	if o != nil && !IsNil(o.OldestActivation) {
		return true
	}

	return false
}

// SetOldestActivation gets a reference to the given GetOrganizationLicensesOverview200ResponseStatesUnusedActiveOldestActivation and assigns it to the OldestActivation field.
func (o *GetOrganizationLicensesOverview200ResponseStatesUnusedActive) SetOldestActivation(v GetOrganizationLicensesOverview200ResponseStatesUnusedActiveOldestActivation) {
	o.OldestActivation = &v
}

func (o GetOrganizationLicensesOverview200ResponseStatesUnusedActive) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetOrganizationLicensesOverview200ResponseStatesUnusedActive) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.OldestActivation) {
		toSerialize["oldestActivation"] = o.OldestActivation
	}
	return toSerialize, nil
}

type NullableGetOrganizationLicensesOverview200ResponseStatesUnusedActive struct {
	value *GetOrganizationLicensesOverview200ResponseStatesUnusedActive
	isSet bool
}

func (v NullableGetOrganizationLicensesOverview200ResponseStatesUnusedActive) Get() *GetOrganizationLicensesOverview200ResponseStatesUnusedActive {
	return v.value
}

func (v *NullableGetOrganizationLicensesOverview200ResponseStatesUnusedActive) Set(val *GetOrganizationLicensesOverview200ResponseStatesUnusedActive) {
	v.value = val
	v.isSet = true
}

func (v NullableGetOrganizationLicensesOverview200ResponseStatesUnusedActive) IsSet() bool {
	return v.isSet
}

func (v *NullableGetOrganizationLicensesOverview200ResponseStatesUnusedActive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetOrganizationLicensesOverview200ResponseStatesUnusedActive(val *GetOrganizationLicensesOverview200ResponseStatesUnusedActive) *NullableGetOrganizationLicensesOverview200ResponseStatesUnusedActive {
	return &NullableGetOrganizationLicensesOverview200ResponseStatesUnusedActive{value: val, isSet: true}
}

func (v NullableGetOrganizationLicensesOverview200ResponseStatesUnusedActive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetOrganizationLicensesOverview200ResponseStatesUnusedActive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


