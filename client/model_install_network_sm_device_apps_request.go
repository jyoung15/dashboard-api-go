/*
Meraki Dashboard API

A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 03 July, 2024 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.48.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InstallNetworkSmDeviceAppsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstallNetworkSmDeviceAppsRequest{}

// InstallNetworkSmDeviceAppsRequest struct for InstallNetworkSmDeviceAppsRequest
type InstallNetworkSmDeviceAppsRequest struct {
	// ids of applications to be installed
	AppIds []string `json:"appIds"`
	// By default, installation of an app which is believed to already be present on the device will be skipped. If you'd like to force the installation of the app, set this parameter to true.
	Force *bool `json:"force,omitempty"`
}

type _InstallNetworkSmDeviceAppsRequest InstallNetworkSmDeviceAppsRequest

// NewInstallNetworkSmDeviceAppsRequest instantiates a new InstallNetworkSmDeviceAppsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstallNetworkSmDeviceAppsRequest(appIds []string) *InstallNetworkSmDeviceAppsRequest {
	this := InstallNetworkSmDeviceAppsRequest{}
	this.AppIds = appIds
	return &this
}

// NewInstallNetworkSmDeviceAppsRequestWithDefaults instantiates a new InstallNetworkSmDeviceAppsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstallNetworkSmDeviceAppsRequestWithDefaults() *InstallNetworkSmDeviceAppsRequest {
	this := InstallNetworkSmDeviceAppsRequest{}
	return &this
}

// GetAppIds returns the AppIds field value
func (o *InstallNetworkSmDeviceAppsRequest) GetAppIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AppIds
}

// GetAppIdsOk returns a tuple with the AppIds field value
// and a boolean to check if the value has been set.
func (o *InstallNetworkSmDeviceAppsRequest) GetAppIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AppIds, true
}

// SetAppIds sets field value
func (o *InstallNetworkSmDeviceAppsRequest) SetAppIds(v []string) {
	o.AppIds = v
}

// GetForce returns the Force field value if set, zero value otherwise.
func (o *InstallNetworkSmDeviceAppsRequest) GetForce() bool {
	if o == nil || IsNil(o.Force) {
		var ret bool
		return ret
	}
	return *o.Force
}

// GetForceOk returns a tuple with the Force field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallNetworkSmDeviceAppsRequest) GetForceOk() (*bool, bool) {
	if o == nil || IsNil(o.Force) {
		return nil, false
	}
	return o.Force, true
}

// HasForce returns a boolean if a field has been set.
func (o *InstallNetworkSmDeviceAppsRequest) HasForce() bool {
	if o != nil && !IsNil(o.Force) {
		return true
	}

	return false
}

// SetForce gets a reference to the given bool and assigns it to the Force field.
func (o *InstallNetworkSmDeviceAppsRequest) SetForce(v bool) {
	o.Force = &v
}

func (o InstallNetworkSmDeviceAppsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstallNetworkSmDeviceAppsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["appIds"] = o.AppIds
	if !IsNil(o.Force) {
		toSerialize["force"] = o.Force
	}
	return toSerialize, nil
}

func (o *InstallNetworkSmDeviceAppsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"appIds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstallNetworkSmDeviceAppsRequest := _InstallNetworkSmDeviceAppsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInstallNetworkSmDeviceAppsRequest)

	if err != nil {
		return err
	}

	*o = InstallNetworkSmDeviceAppsRequest(varInstallNetworkSmDeviceAppsRequest)

	return err
}

type NullableInstallNetworkSmDeviceAppsRequest struct {
	value *InstallNetworkSmDeviceAppsRequest
	isSet bool
}

func (v NullableInstallNetworkSmDeviceAppsRequest) Get() *InstallNetworkSmDeviceAppsRequest {
	return v.value
}

func (v *NullableInstallNetworkSmDeviceAppsRequest) Set(val *InstallNetworkSmDeviceAppsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableInstallNetworkSmDeviceAppsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableInstallNetworkSmDeviceAppsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstallNetworkSmDeviceAppsRequest(val *InstallNetworkSmDeviceAppsRequest) *NullableInstallNetworkSmDeviceAppsRequest {
	return &NullableInstallNetworkSmDeviceAppsRequest{value: val, isSet: true}
}

func (v NullableInstallNetworkSmDeviceAppsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstallNetworkSmDeviceAppsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


