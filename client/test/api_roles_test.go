/*
Meraki Dashboard API

Testing RolesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package client

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/meraki/dashboard-api-go/client"
)

func Test_client_RolesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RolesAPIService CreateOrganizationCameraRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.RolesAPI.CreateOrganizationCameraRole(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService CreateOrganizationSmAdminsRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.RolesAPI.CreateOrganizationSmAdminsRole(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService DeleteOrganizationCameraRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var roleId string

		httpRes, err := apiClient.RolesAPI.DeleteOrganizationCameraRole(context.Background(), organizationId, roleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService DeleteOrganizationSmAdminsRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var roleId string

		httpRes, err := apiClient.RolesAPI.DeleteOrganizationSmAdminsRole(context.Background(), organizationId, roleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService GetOrganizationCameraRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var roleId string

		resp, httpRes, err := apiClient.RolesAPI.GetOrganizationCameraRole(context.Background(), organizationId, roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService GetOrganizationCameraRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.RolesAPI.GetOrganizationCameraRoles(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService GetOrganizationSmAdminsRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var roleId string

		resp, httpRes, err := apiClient.RolesAPI.GetOrganizationSmAdminsRole(context.Background(), organizationId, roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService GetOrganizationSmAdminsRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.RolesAPI.GetOrganizationSmAdminsRoles(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService UpdateOrganizationCameraRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var roleId string

		resp, httpRes, err := apiClient.RolesAPI.UpdateOrganizationCameraRole(context.Background(), organizationId, roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService UpdateOrganizationSmAdminsRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var roleId string

		resp, httpRes, err := apiClient.RolesAPI.UpdateOrganizationSmAdminsRole(context.Background(), organizationId, roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
