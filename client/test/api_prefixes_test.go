/*
Meraki Dashboard API

Testing PrefixesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package client

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/meraki/dashboard-api-go/client"
)

func Test_client_PrefixesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PrefixesAPIService CreateNetworkAppliancePrefixesDelegatedStatic", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.PrefixesAPI.CreateNetworkAppliancePrefixesDelegatedStatic(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PrefixesAPIService DeleteNetworkAppliancePrefixesDelegatedStatic", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var staticDelegatedPrefixId string

		httpRes, err := apiClient.PrefixesAPI.DeleteNetworkAppliancePrefixesDelegatedStatic(context.Background(), networkId, staticDelegatedPrefixId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PrefixesAPIService GetDeviceAppliancePrefixesDelegated", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.PrefixesAPI.GetDeviceAppliancePrefixesDelegated(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PrefixesAPIService GetDeviceAppliancePrefixesDelegatedVlanAssignments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.PrefixesAPI.GetDeviceAppliancePrefixesDelegatedVlanAssignments(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PrefixesAPIService GetNetworkAppliancePrefixesDelegatedStatic", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var staticDelegatedPrefixId string

		resp, httpRes, err := apiClient.PrefixesAPI.GetNetworkAppliancePrefixesDelegatedStatic(context.Background(), networkId, staticDelegatedPrefixId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PrefixesAPIService GetNetworkAppliancePrefixesDelegatedStatics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.PrefixesAPI.GetNetworkAppliancePrefixesDelegatedStatics(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PrefixesAPIService UpdateNetworkAppliancePrefixesDelegatedStatic", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var staticDelegatedPrefixId string

		resp, httpRes, err := apiClient.PrefixesAPI.UpdateNetworkAppliancePrefixesDelegatedStatic(context.Background(), networkId, staticDelegatedPrefixId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
