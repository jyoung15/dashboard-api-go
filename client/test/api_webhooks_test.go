/*
Meraki Dashboard API

Testing WebhooksAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package client

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/meraki/dashboard-api-go/client"
)

func Test_client_WebhooksAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test WebhooksAPIService CreateNetworkWebhooksHttpServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.WebhooksAPI.CreateNetworkWebhooksHttpServer(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksAPIService CreateNetworkWebhooksPayloadTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.WebhooksAPI.CreateNetworkWebhooksPayloadTemplate(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksAPIService CreateNetworkWebhooksWebhookTest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.WebhooksAPI.CreateNetworkWebhooksWebhookTest(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksAPIService DeleteNetworkWebhooksHttpServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var httpServerId string

		httpRes, err := apiClient.WebhooksAPI.DeleteNetworkWebhooksHttpServer(context.Background(), networkId, httpServerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksAPIService DeleteNetworkWebhooksPayloadTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var payloadTemplateId string

		httpRes, err := apiClient.WebhooksAPI.DeleteNetworkWebhooksPayloadTemplate(context.Background(), networkId, payloadTemplateId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksAPIService GetNetworkWebhooksHttpServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var httpServerId string

		resp, httpRes, err := apiClient.WebhooksAPI.GetNetworkWebhooksHttpServer(context.Background(), networkId, httpServerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksAPIService GetNetworkWebhooksHttpServers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.WebhooksAPI.GetNetworkWebhooksHttpServers(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksAPIService GetNetworkWebhooksPayloadTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var payloadTemplateId string

		resp, httpRes, err := apiClient.WebhooksAPI.GetNetworkWebhooksPayloadTemplate(context.Background(), networkId, payloadTemplateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksAPIService GetNetworkWebhooksPayloadTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.WebhooksAPI.GetNetworkWebhooksPayloadTemplates(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksAPIService GetNetworkWebhooksWebhookTest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var webhookTestId string

		resp, httpRes, err := apiClient.WebhooksAPI.GetNetworkWebhooksWebhookTest(context.Background(), networkId, webhookTestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksAPIService GetOrganizationWebhooksAlertTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.WebhooksAPI.GetOrganizationWebhooksAlertTypes(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksAPIService GetOrganizationWebhooksLogs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.WebhooksAPI.GetOrganizationWebhooksLogs(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksAPIService UpdateNetworkWebhooksHttpServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var httpServerId string

		resp, httpRes, err := apiClient.WebhooksAPI.UpdateNetworkWebhooksHttpServer(context.Background(), networkId, httpServerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksAPIService UpdateNetworkWebhooksPayloadTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var payloadTemplateId string

		resp, httpRes, err := apiClient.WebhooksAPI.UpdateNetworkWebhooksPayloadTemplate(context.Background(), networkId, payloadTemplateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
