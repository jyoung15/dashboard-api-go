/*
Meraki Dashboard API

Testing VlansAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package client

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/meraki/dashboard-api-go/client"
)

func Test_client_VlansAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test VlansAPIService CreateNetworkApplianceVlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.VlansAPI.CreateNetworkApplianceVlan(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VlansAPIService DeleteNetworkApplianceVlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var vlanId string

		httpRes, err := apiClient.VlansAPI.DeleteNetworkApplianceVlan(context.Background(), networkId, vlanId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VlansAPIService GetNetworkApplianceVlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var vlanId string

		resp, httpRes, err := apiClient.VlansAPI.GetNetworkApplianceVlan(context.Background(), networkId, vlanId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VlansAPIService GetNetworkApplianceVlans", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.VlansAPI.GetNetworkApplianceVlans(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VlansAPIService GetNetworkApplianceVlansSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.VlansAPI.GetNetworkApplianceVlansSettings(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VlansAPIService UpdateNetworkApplianceVlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var vlanId string

		resp, httpRes, err := apiClient.VlansAPI.UpdateNetworkApplianceVlan(context.Background(), networkId, vlanId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VlansAPIService UpdateNetworkApplianceVlansSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.VlansAPI.UpdateNetworkApplianceVlansSettings(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
