/*
Meraki Dashboard API

Testing ConfigureAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package client

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/meraki/dashboard-api-go/client"
)

func Test_client_ConfigureAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ConfigureAPIService AddNetworkSwitchStack", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var switchStackId string

		resp, httpRes, err := apiClient.ConfigureAPI.AddNetworkSwitchStack(context.Background(), networkId, switchStackId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService AssignOrganizationLicensesSeats", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.AssignOrganizationLicensesSeats(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService BindNetwork", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.BindNetwork(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CheckinNetworkSmDevices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.CheckinNetworkSmDevices(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService ClaimIntoOrganization", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.ClaimIntoOrganization(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService ClaimIntoOrganizationInventory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.ClaimIntoOrganizationInventory(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService ClaimNetworkDevices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		httpRes, err := apiClient.ConfigureAPI.ClaimNetworkDevices(context.Background(), networkId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CloneOrganization", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.CloneOrganization(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CloneOrganizationSwitchDevices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.CloneOrganizationSwitchDevices(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CombineOrganizationNetworks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.CombineOrganizationNetworks(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateDeviceApplianceVmxAuthenticationToken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateDeviceApplianceVmxAuthenticationToken(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateDeviceSwitchRoutingInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateDeviceSwitchRoutingInterface(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateDeviceSwitchRoutingStaticRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateDeviceSwitchRoutingStaticRoute(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateNetworkAppliancePrefixesDelegatedStatic", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateNetworkAppliancePrefixesDelegatedStatic(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateNetworkApplianceRfProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateNetworkApplianceRfProfile(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateNetworkApplianceStaticRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateNetworkApplianceStaticRoute(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateNetworkApplianceTrafficShapingCustomPerformanceClass", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateNetworkApplianceTrafficShapingCustomPerformanceClass(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateNetworkApplianceVlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateNetworkApplianceVlan(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateNetworkCameraQualityRetentionProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateNetworkCameraQualityRetentionProfile(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateNetworkCameraWirelessProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateNetworkCameraWirelessProfile(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateNetworkFirmwareUpgradesRollback", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateNetworkFirmwareUpgradesRollback(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateNetworkFirmwareUpgradesStagedEvent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateNetworkFirmwareUpgradesStagedEvent(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateNetworkFirmwareUpgradesStagedGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateNetworkFirmwareUpgradesStagedGroup(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateNetworkFloorPlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateNetworkFloorPlan(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateNetworkGroupPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateNetworkGroupPolicy(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateNetworkMerakiAuthUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateNetworkMerakiAuthUser(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateNetworkMqttBroker", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateNetworkMqttBroker(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateNetworkPiiRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateNetworkPiiRequest(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateNetworkSensorAlertsProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateNetworkSensorAlertsProfile(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateNetworkSmBypassActivationLockAttempt", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateNetworkSmBypassActivationLockAttempt(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateNetworkSmTargetGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateNetworkSmTargetGroup(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateNetworkSwitchAccessPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateNetworkSwitchAccessPolicy(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateNetworkSwitchLinkAggregation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateNetworkSwitchLinkAggregation(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateNetworkSwitchPortSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateNetworkSwitchPortSchedule(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateNetworkSwitchQosRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateNetworkSwitchQosRule(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateNetworkSwitchRoutingMulticastRendezvousPoint", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateNetworkSwitchRoutingMulticastRendezvousPoint(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateNetworkSwitchStack", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateNetworkSwitchStack(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateNetworkSwitchStackRoutingInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var switchStackId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateNetworkSwitchStackRoutingInterface(context.Background(), networkId, switchStackId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateNetworkSwitchStackRoutingStaticRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var switchStackId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateNetworkSwitchStackRoutingStaticRoute(context.Background(), networkId, switchStackId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateNetworkWebhooksHttpServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateNetworkWebhooksHttpServer(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateNetworkWebhooksPayloadTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateNetworkWebhooksPayloadTemplate(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateNetworkWebhooksWebhookTest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateNetworkWebhooksWebhookTest(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateNetworkWirelessRfProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateNetworkWirelessRfProfile(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateNetworkWirelessSsidIdentityPsk", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var number string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateNetworkWirelessSsidIdentityPsk(context.Background(), networkId, number).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateOrganization", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ConfigureAPI.CreateOrganization(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateOrganizationActionBatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateOrganizationActionBatch(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateOrganizationAdaptivePolicyAcl", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateOrganizationAdaptivePolicyAcl(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateOrganizationAdaptivePolicyGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateOrganizationAdaptivePolicyGroup(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateOrganizationAdaptivePolicyPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateOrganizationAdaptivePolicyPolicy(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateOrganizationAdmin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateOrganizationAdmin(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateOrganizationAlertsProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateOrganizationAlertsProfile(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateOrganizationBrandingPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateOrganizationBrandingPolicy(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateOrganizationCameraCustomAnalyticsArtifact", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateOrganizationCameraCustomAnalyticsArtifact(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateOrganizationConfigTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateOrganizationConfigTemplate(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateOrganizationEarlyAccessFeaturesOptIn", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateOrganizationEarlyAccessFeaturesOptIn(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateOrganizationInsightMonitoredMediaServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateOrganizationInsightMonitoredMediaServer(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateOrganizationInventoryOnboardingCloudMonitoringExportEvent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateOrganizationInventoryOnboardingCloudMonitoringExportEvent(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateOrganizationInventoryOnboardingCloudMonitoringImport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateOrganizationInventoryOnboardingCloudMonitoringImport(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateOrganizationInventoryOnboardingCloudMonitoringPrepare", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateOrganizationInventoryOnboardingCloudMonitoringPrepare(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateOrganizationNetwork", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateOrganizationNetwork(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateOrganizationPolicyObject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateOrganizationPolicyObject(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateOrganizationPolicyObjectsGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateOrganizationPolicyObjectsGroup(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateOrganizationSamlIdp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateOrganizationSamlIdp(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService CreateOrganizationSamlRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.CreateOrganizationSamlRole(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeferNetworkFirmwareUpgradesStagedEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.DeferNetworkFirmwareUpgradesStagedEvents(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteDeviceSwitchRoutingInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string
		var interfaceId string

		httpRes, err := apiClient.ConfigureAPI.DeleteDeviceSwitchRoutingInterface(context.Background(), serial, interfaceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteDeviceSwitchRoutingStaticRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string
		var staticRouteId string

		httpRes, err := apiClient.ConfigureAPI.DeleteDeviceSwitchRoutingStaticRoute(context.Background(), serial, staticRouteId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteNetwork", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		httpRes, err := apiClient.ConfigureAPI.DeleteNetwork(context.Background(), networkId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteNetworkAppliancePrefixesDelegatedStatic", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var staticDelegatedPrefixId string

		httpRes, err := apiClient.ConfigureAPI.DeleteNetworkAppliancePrefixesDelegatedStatic(context.Background(), networkId, staticDelegatedPrefixId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteNetworkApplianceRfProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var rfProfileId string

		httpRes, err := apiClient.ConfigureAPI.DeleteNetworkApplianceRfProfile(context.Background(), networkId, rfProfileId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteNetworkApplianceStaticRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var staticRouteId string

		httpRes, err := apiClient.ConfigureAPI.DeleteNetworkApplianceStaticRoute(context.Background(), networkId, staticRouteId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteNetworkApplianceTrafficShapingCustomPerformanceClass", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var customPerformanceClassId string

		httpRes, err := apiClient.ConfigureAPI.DeleteNetworkApplianceTrafficShapingCustomPerformanceClass(context.Background(), networkId, customPerformanceClassId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteNetworkApplianceVlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var vlanId string

		httpRes, err := apiClient.ConfigureAPI.DeleteNetworkApplianceVlan(context.Background(), networkId, vlanId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteNetworkCameraQualityRetentionProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var qualityRetentionProfileId string

		httpRes, err := apiClient.ConfigureAPI.DeleteNetworkCameraQualityRetentionProfile(context.Background(), networkId, qualityRetentionProfileId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteNetworkCameraWirelessProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var wirelessProfileId string

		httpRes, err := apiClient.ConfigureAPI.DeleteNetworkCameraWirelessProfile(context.Background(), networkId, wirelessProfileId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteNetworkFirmwareUpgradesStagedGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var groupId string

		httpRes, err := apiClient.ConfigureAPI.DeleteNetworkFirmwareUpgradesStagedGroup(context.Background(), networkId, groupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteNetworkFloorPlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var floorPlanId string

		resp, httpRes, err := apiClient.ConfigureAPI.DeleteNetworkFloorPlan(context.Background(), networkId, floorPlanId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteNetworkGroupPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var groupPolicyId string

		httpRes, err := apiClient.ConfigureAPI.DeleteNetworkGroupPolicy(context.Background(), networkId, groupPolicyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteNetworkMerakiAuthUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var merakiAuthUserId string

		httpRes, err := apiClient.ConfigureAPI.DeleteNetworkMerakiAuthUser(context.Background(), networkId, merakiAuthUserId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteNetworkMqttBroker", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var mqttBrokerId string

		httpRes, err := apiClient.ConfigureAPI.DeleteNetworkMqttBroker(context.Background(), networkId, mqttBrokerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteNetworkPiiRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var requestId string

		httpRes, err := apiClient.ConfigureAPI.DeleteNetworkPiiRequest(context.Background(), networkId, requestId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteNetworkSensorAlertsProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var id string

		httpRes, err := apiClient.ConfigureAPI.DeleteNetworkSensorAlertsProfile(context.Background(), networkId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteNetworkSmTargetGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var targetGroupId string

		httpRes, err := apiClient.ConfigureAPI.DeleteNetworkSmTargetGroup(context.Background(), networkId, targetGroupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteNetworkSmUserAccessDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var userAccessDeviceId string

		httpRes, err := apiClient.ConfigureAPI.DeleteNetworkSmUserAccessDevice(context.Background(), networkId, userAccessDeviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteNetworkSwitchAccessPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var accessPolicyNumber string

		httpRes, err := apiClient.ConfigureAPI.DeleteNetworkSwitchAccessPolicy(context.Background(), networkId, accessPolicyNumber).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var trustedServerId string

		httpRes, err := apiClient.ConfigureAPI.DeleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer(context.Background(), networkId, trustedServerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteNetworkSwitchLinkAggregation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var linkAggregationId string

		httpRes, err := apiClient.ConfigureAPI.DeleteNetworkSwitchLinkAggregation(context.Background(), networkId, linkAggregationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteNetworkSwitchPortSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var portScheduleId string

		httpRes, err := apiClient.ConfigureAPI.DeleteNetworkSwitchPortSchedule(context.Background(), networkId, portScheduleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteNetworkSwitchQosRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var qosRuleId string

		httpRes, err := apiClient.ConfigureAPI.DeleteNetworkSwitchQosRule(context.Background(), networkId, qosRuleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteNetworkSwitchRoutingMulticastRendezvousPoint", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var rendezvousPointId string

		httpRes, err := apiClient.ConfigureAPI.DeleteNetworkSwitchRoutingMulticastRendezvousPoint(context.Background(), networkId, rendezvousPointId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteNetworkSwitchStack", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var switchStackId string

		httpRes, err := apiClient.ConfigureAPI.DeleteNetworkSwitchStack(context.Background(), networkId, switchStackId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteNetworkSwitchStackRoutingInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var switchStackId string
		var interfaceId string

		httpRes, err := apiClient.ConfigureAPI.DeleteNetworkSwitchStackRoutingInterface(context.Background(), networkId, switchStackId, interfaceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteNetworkSwitchStackRoutingStaticRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var switchStackId string
		var staticRouteId string

		httpRes, err := apiClient.ConfigureAPI.DeleteNetworkSwitchStackRoutingStaticRoute(context.Background(), networkId, switchStackId, staticRouteId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteNetworkWebhooksHttpServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var httpServerId string

		httpRes, err := apiClient.ConfigureAPI.DeleteNetworkWebhooksHttpServer(context.Background(), networkId, httpServerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteNetworkWebhooksPayloadTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var payloadTemplateId string

		httpRes, err := apiClient.ConfigureAPI.DeleteNetworkWebhooksPayloadTemplate(context.Background(), networkId, payloadTemplateId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteNetworkWirelessRfProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var rfProfileId string

		httpRes, err := apiClient.ConfigureAPI.DeleteNetworkWirelessRfProfile(context.Background(), networkId, rfProfileId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteNetworkWirelessSsidIdentityPsk", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var number string
		var identityPskId string

		httpRes, err := apiClient.ConfigureAPI.DeleteNetworkWirelessSsidIdentityPsk(context.Background(), networkId, number, identityPskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteOrganization", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		httpRes, err := apiClient.ConfigureAPI.DeleteOrganization(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteOrganizationActionBatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var actionBatchId string

		httpRes, err := apiClient.ConfigureAPI.DeleteOrganizationActionBatch(context.Background(), organizationId, actionBatchId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteOrganizationAdaptivePolicyAcl", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var aclId string

		httpRes, err := apiClient.ConfigureAPI.DeleteOrganizationAdaptivePolicyAcl(context.Background(), organizationId, aclId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteOrganizationAdaptivePolicyGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var id string

		httpRes, err := apiClient.ConfigureAPI.DeleteOrganizationAdaptivePolicyGroup(context.Background(), organizationId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteOrganizationAdaptivePolicyPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var id string

		httpRes, err := apiClient.ConfigureAPI.DeleteOrganizationAdaptivePolicyPolicy(context.Background(), organizationId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteOrganizationAdmin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var adminId string

		httpRes, err := apiClient.ConfigureAPI.DeleteOrganizationAdmin(context.Background(), organizationId, adminId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteOrganizationAlertsProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var alertConfigId string

		httpRes, err := apiClient.ConfigureAPI.DeleteOrganizationAlertsProfile(context.Background(), organizationId, alertConfigId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteOrganizationBrandingPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var brandingPolicyId string

		httpRes, err := apiClient.ConfigureAPI.DeleteOrganizationBrandingPolicy(context.Background(), organizationId, brandingPolicyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteOrganizationCameraCustomAnalyticsArtifact", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var artifactId string

		httpRes, err := apiClient.ConfigureAPI.DeleteOrganizationCameraCustomAnalyticsArtifact(context.Background(), organizationId, artifactId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteOrganizationConfigTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var configTemplateId string

		httpRes, err := apiClient.ConfigureAPI.DeleteOrganizationConfigTemplate(context.Background(), organizationId, configTemplateId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteOrganizationEarlyAccessFeaturesOptIn", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var optInId string

		httpRes, err := apiClient.ConfigureAPI.DeleteOrganizationEarlyAccessFeaturesOptIn(context.Background(), organizationId, optInId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteOrganizationInsightMonitoredMediaServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var monitoredMediaServerId string

		httpRes, err := apiClient.ConfigureAPI.DeleteOrganizationInsightMonitoredMediaServer(context.Background(), organizationId, monitoredMediaServerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteOrganizationPolicyObject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var policyObjectId string

		httpRes, err := apiClient.ConfigureAPI.DeleteOrganizationPolicyObject(context.Background(), organizationId, policyObjectId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteOrganizationPolicyObjectsGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var policyObjectGroupId string

		httpRes, err := apiClient.ConfigureAPI.DeleteOrganizationPolicyObjectsGroup(context.Background(), organizationId, policyObjectGroupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteOrganizationSamlIdp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var idpId string

		httpRes, err := apiClient.ConfigureAPI.DeleteOrganizationSamlIdp(context.Background(), organizationId, idpId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService DeleteOrganizationSamlRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var samlRoleId string

		httpRes, err := apiClient.ConfigureAPI.DeleteOrganizationSamlRole(context.Background(), organizationId, samlRoleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.GetDevice(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetDeviceApplianceRadioSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.GetDeviceApplianceRadioSettings(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetDeviceApplianceUplinksSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.GetDeviceApplianceUplinksSettings(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetDeviceCameraCustomAnalytics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.GetDeviceCameraCustomAnalytics(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetDeviceCameraQualityAndRetention", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.GetDeviceCameraQualityAndRetention(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetDeviceCameraSense", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.GetDeviceCameraSense(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetDeviceCameraSenseObjectDetectionModels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.GetDeviceCameraSenseObjectDetectionModels(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetDeviceCameraVideoLink", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.GetDeviceCameraVideoLink(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetDeviceCameraVideoSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.GetDeviceCameraVideoSettings(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetDeviceCameraWirelessProfiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.GetDeviceCameraWirelessProfiles(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetDeviceCellularGatewayLan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.GetDeviceCellularGatewayLan(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetDeviceCellularGatewayPortForwardingRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.GetDeviceCellularGatewayPortForwardingRules(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetDeviceCellularSims", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.GetDeviceCellularSims(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetDeviceManagementInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.GetDeviceManagementInterface(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetDeviceSensorRelationships", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.GetDeviceSensorRelationships(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetDeviceSwitchPort", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string
		var portId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetDeviceSwitchPort(context.Background(), serial, portId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetDeviceSwitchPorts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.GetDeviceSwitchPorts(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetDeviceSwitchRoutingInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string
		var interfaceId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetDeviceSwitchRoutingInterface(context.Background(), serial, interfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetDeviceSwitchRoutingInterfaceDhcp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string
		var interfaceId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetDeviceSwitchRoutingInterfaceDhcp(context.Background(), serial, interfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetDeviceSwitchRoutingInterfaces", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.GetDeviceSwitchRoutingInterfaces(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetDeviceSwitchRoutingStaticRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string
		var staticRouteId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetDeviceSwitchRoutingStaticRoute(context.Background(), serial, staticRouteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetDeviceSwitchRoutingStaticRoutes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.GetDeviceSwitchRoutingStaticRoutes(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetDeviceSwitchWarmSpare", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.GetDeviceSwitchWarmSpare(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetDeviceWirelessBluetoothSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.GetDeviceWirelessBluetoothSettings(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetDeviceWirelessRadioSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.GetDeviceWirelessRadioSettings(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetwork", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetwork(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkAlertsSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkAlertsSettings(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkApplianceConnectivityMonitoringDestinations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkApplianceConnectivityMonitoringDestinations(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkApplianceContentFiltering", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkApplianceContentFiltering(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkApplianceContentFilteringCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkApplianceContentFilteringCategories(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkApplianceFirewallCellularFirewallRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkApplianceFirewallCellularFirewallRules(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkApplianceFirewallFirewalledService", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var service string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkApplianceFirewallFirewalledService(context.Background(), networkId, service).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkApplianceFirewallFirewalledServices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkApplianceFirewallFirewalledServices(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkApplianceFirewallInboundCellularFirewallRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkApplianceFirewallInboundCellularFirewallRules(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkApplianceFirewallInboundFirewallRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkApplianceFirewallInboundFirewallRules(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkApplianceFirewallL3FirewallRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkApplianceFirewallL3FirewallRules(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkApplianceFirewallL7FirewallRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkApplianceFirewallL7FirewallRules(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkApplianceFirewallL7FirewallRulesApplicationCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkApplianceFirewallL7FirewallRulesApplicationCategories(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkApplianceFirewallOneToManyNatRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkApplianceFirewallOneToManyNatRules(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkApplianceFirewallOneToOneNatRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkApplianceFirewallOneToOneNatRules(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkApplianceFirewallPortForwardingRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkApplianceFirewallPortForwardingRules(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkApplianceFirewallSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkApplianceFirewallSettings(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkAppliancePort", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var portId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkAppliancePort(context.Background(), networkId, portId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkAppliancePorts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkAppliancePorts(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkAppliancePrefixesDelegatedStatic", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var staticDelegatedPrefixId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkAppliancePrefixesDelegatedStatic(context.Background(), networkId, staticDelegatedPrefixId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkAppliancePrefixesDelegatedStatics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkAppliancePrefixesDelegatedStatics(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkApplianceRfProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var rfProfileId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkApplianceRfProfile(context.Background(), networkId, rfProfileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkApplianceRfProfiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkApplianceRfProfiles(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkApplianceSecurityIntrusion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkApplianceSecurityIntrusion(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkApplianceSecurityMalware", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkApplianceSecurityMalware(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkApplianceSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkApplianceSettings(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkApplianceSingleLan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkApplianceSingleLan(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkApplianceSsid", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var number string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkApplianceSsid(context.Background(), networkId, number).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkApplianceSsids", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkApplianceSsids(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkApplianceStaticRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var staticRouteId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkApplianceStaticRoute(context.Background(), networkId, staticRouteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkApplianceStaticRoutes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkApplianceStaticRoutes(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkApplianceTrafficShaping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkApplianceTrafficShaping(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkApplianceTrafficShapingCustomPerformanceClass", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var customPerformanceClassId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkApplianceTrafficShapingCustomPerformanceClass(context.Background(), networkId, customPerformanceClassId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkApplianceTrafficShapingCustomPerformanceClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkApplianceTrafficShapingCustomPerformanceClasses(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkApplianceTrafficShapingRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkApplianceTrafficShapingRules(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkApplianceTrafficShapingUplinkBandwidth", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkApplianceTrafficShapingUplinkBandwidth(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkApplianceTrafficShapingUplinkSelection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkApplianceTrafficShapingUplinkSelection(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkApplianceVlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var vlanId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkApplianceVlan(context.Background(), networkId, vlanId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkApplianceVlans", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkApplianceVlans(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkApplianceVlansSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkApplianceVlansSettings(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkApplianceVpnBgp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkApplianceVpnBgp(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkApplianceVpnSiteToSiteVpn", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkApplianceVpnSiteToSiteVpn(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkApplianceWarmSpare", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkApplianceWarmSpare(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkCameraQualityRetentionProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var qualityRetentionProfileId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkCameraQualityRetentionProfile(context.Background(), networkId, qualityRetentionProfileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkCameraQualityRetentionProfiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkCameraQualityRetentionProfiles(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkCameraSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkCameraSchedules(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkCameraWirelessProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var wirelessProfileId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkCameraWirelessProfile(context.Background(), networkId, wirelessProfileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkCameraWirelessProfiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkCameraWirelessProfiles(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkCellularGatewayConnectivityMonitoringDestinations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkCellularGatewayConnectivityMonitoringDestinations(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkCellularGatewayDhcp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkCellularGatewayDhcp(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkCellularGatewaySubnetPool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkCellularGatewaySubnetPool(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkCellularGatewayUplink", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkCellularGatewayUplink(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkClientPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var clientId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkClientPolicy(context.Background(), networkId, clientId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkClientSplashAuthorizationStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var clientId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkClientSplashAuthorizationStatus(context.Background(), networkId, clientId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkDevices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkDevices(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkFirmwareUpgrades", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkFirmwareUpgrades(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkFirmwareUpgradesStagedEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkFirmwareUpgradesStagedEvents(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkFirmwareUpgradesStagedGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var groupId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkFirmwareUpgradesStagedGroup(context.Background(), networkId, groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkFirmwareUpgradesStagedGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkFirmwareUpgradesStagedGroups(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkFirmwareUpgradesStagedStages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkFirmwareUpgradesStagedStages(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkFloorPlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var floorPlanId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkFloorPlan(context.Background(), networkId, floorPlanId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkFloorPlans", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkFloorPlans(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkGroupPolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkGroupPolicies(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkGroupPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var groupPolicyId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkGroupPolicy(context.Background(), networkId, groupPolicyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkHealthAlerts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkHealthAlerts(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkMerakiAuthUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var merakiAuthUserId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkMerakiAuthUser(context.Background(), networkId, merakiAuthUserId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkMerakiAuthUsers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkMerakiAuthUsers(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkMqttBroker", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var mqttBrokerId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkMqttBroker(context.Background(), networkId, mqttBrokerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkMqttBrokers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkMqttBrokers(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkNetflow", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkNetflow(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkPiiPiiKeys", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkPiiPiiKeys(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkPiiRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var requestId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkPiiRequest(context.Background(), networkId, requestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkPiiRequests", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkPiiRequests(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkPiiSmDevicesForKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkPiiSmDevicesForKey(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkPiiSmOwnersForKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkPiiSmOwnersForKey(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkPoliciesByClient", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkPoliciesByClient(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSensorAlertsProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var id string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSensorAlertsProfile(context.Background(), networkId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSensorAlertsProfiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSensorAlertsProfiles(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSensorMqttBroker", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var mqttBrokerId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSensorMqttBroker(context.Background(), networkId, mqttBrokerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSensorMqttBrokers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSensorMqttBrokers(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSensorRelationships", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSensorRelationships(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSettings(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSmBypassActivationLockAttempt", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var attemptId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSmBypassActivationLockAttempt(context.Background(), networkId, attemptId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSmDeviceCerts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var deviceId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSmDeviceCerts(context.Background(), networkId, deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSmDeviceDeviceProfiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var deviceId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSmDeviceDeviceProfiles(context.Background(), networkId, deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSmDeviceNetworkAdapters", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var deviceId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSmDeviceNetworkAdapters(context.Background(), networkId, deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSmDeviceRestrictions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var deviceId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSmDeviceRestrictions(context.Background(), networkId, deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSmDeviceSecurityCenters", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var deviceId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSmDeviceSecurityCenters(context.Background(), networkId, deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSmDeviceSoftwares", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var deviceId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSmDeviceSoftwares(context.Background(), networkId, deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSmDeviceWlanLists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var deviceId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSmDeviceWlanLists(context.Background(), networkId, deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSmDevices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSmDevices(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSmProfiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSmProfiles(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSmTargetGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var targetGroupId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSmTargetGroup(context.Background(), networkId, targetGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSmTargetGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSmTargetGroups(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSmTrustedAccessConfigs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSmTrustedAccessConfigs(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSmUserAccessDevices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSmUserAccessDevices(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSmUserDeviceProfiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var userId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSmUserDeviceProfiles(context.Background(), networkId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSmUserSoftwares", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var userId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSmUserSoftwares(context.Background(), networkId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSmUsers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSmUsers(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSnmp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSnmp(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSwitchAccessControlLists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSwitchAccessControlLists(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSwitchAccessPolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSwitchAccessPolicies(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSwitchAccessPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var accessPolicyNumber string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSwitchAccessPolicy(context.Background(), networkId, accessPolicyNumber).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSwitchAlternateManagementInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSwitchAlternateManagementInterface(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSwitchDhcpServerPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSwitchDhcpServerPolicy(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSwitchDhcpV4ServersSeen", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSwitchDhcpV4ServersSeen(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSwitchDscpToCosMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSwitchDscpToCosMappings(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSwitchLinkAggregations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSwitchLinkAggregations(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSwitchMtu", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSwitchMtu(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSwitchPortSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSwitchPortSchedules(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSwitchQosRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var qosRuleId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSwitchQosRule(context.Background(), networkId, qosRuleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSwitchQosRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSwitchQosRules(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSwitchQosRulesOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSwitchQosRulesOrder(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSwitchRoutingMulticast", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSwitchRoutingMulticast(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSwitchRoutingMulticastRendezvousPoint", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var rendezvousPointId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSwitchRoutingMulticastRendezvousPoint(context.Background(), networkId, rendezvousPointId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSwitchRoutingMulticastRendezvousPoints", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSwitchRoutingMulticastRendezvousPoints(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSwitchRoutingOspf", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSwitchRoutingOspf(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSwitchSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSwitchSettings(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSwitchStack", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var switchStackId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSwitchStack(context.Background(), networkId, switchStackId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSwitchStackRoutingInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var switchStackId string
		var interfaceId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSwitchStackRoutingInterface(context.Background(), networkId, switchStackId, interfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSwitchStackRoutingInterfaceDhcp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var switchStackId string
		var interfaceId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSwitchStackRoutingInterfaceDhcp(context.Background(), networkId, switchStackId, interfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSwitchStackRoutingInterfaces", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var switchStackId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSwitchStackRoutingInterfaces(context.Background(), networkId, switchStackId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSwitchStackRoutingStaticRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var switchStackId string
		var staticRouteId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSwitchStackRoutingStaticRoute(context.Background(), networkId, switchStackId, staticRouteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSwitchStackRoutingStaticRoutes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var switchStackId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSwitchStackRoutingStaticRoutes(context.Background(), networkId, switchStackId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSwitchStacks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSwitchStacks(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSwitchStormControl", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSwitchStormControl(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSwitchStp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSwitchStp(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkSyslogServers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkSyslogServers(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkTrafficAnalysis", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkTrafficAnalysis(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkTrafficShapingApplicationCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkTrafficShapingApplicationCategories(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkTrafficShapingDscpTaggingOptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkTrafficShapingDscpTaggingOptions(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkWebhooksHttpServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var httpServerId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkWebhooksHttpServer(context.Background(), networkId, httpServerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkWebhooksHttpServers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkWebhooksHttpServers(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkWebhooksPayloadTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var payloadTemplateId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkWebhooksPayloadTemplate(context.Background(), networkId, payloadTemplateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkWebhooksPayloadTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkWebhooksPayloadTemplates(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkWebhooksWebhookTest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var webhookTestId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkWebhooksWebhookTest(context.Background(), networkId, webhookTestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkWirelessAlternateManagementInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkWirelessAlternateManagementInterface(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkWirelessBilling", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkWirelessBilling(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkWirelessBluetoothSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkWirelessBluetoothSettings(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkWirelessRfProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var rfProfileId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkWirelessRfProfile(context.Background(), networkId, rfProfileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkWirelessRfProfiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkWirelessRfProfiles(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkWirelessSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkWirelessSettings(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkWirelessSsid", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var number string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkWirelessSsid(context.Background(), networkId, number).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkWirelessSsidBonjourForwarding", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var number string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkWirelessSsidBonjourForwarding(context.Background(), networkId, number).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkWirelessSsidDeviceTypeGroupPolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var number string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkWirelessSsidDeviceTypeGroupPolicies(context.Background(), networkId, number).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkWirelessSsidEapOverride", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var number string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkWirelessSsidEapOverride(context.Background(), networkId, number).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkWirelessSsidFirewallL3FirewallRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var number string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkWirelessSsidFirewallL3FirewallRules(context.Background(), networkId, number).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkWirelessSsidFirewallL7FirewallRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var number string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkWirelessSsidFirewallL7FirewallRules(context.Background(), networkId, number).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkWirelessSsidHotspot20", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var number string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkWirelessSsidHotspot20(context.Background(), networkId, number).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkWirelessSsidIdentityPsk", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var number string
		var identityPskId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkWirelessSsidIdentityPsk(context.Background(), networkId, number, identityPskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkWirelessSsidIdentityPsks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var number string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkWirelessSsidIdentityPsks(context.Background(), networkId, number).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkWirelessSsidSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var number string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkWirelessSsidSchedules(context.Background(), networkId, number).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkWirelessSsidSplashSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var number string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkWirelessSsidSplashSettings(context.Background(), networkId, number).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkWirelessSsidTrafficShapingRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var number string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkWirelessSsidTrafficShapingRules(context.Background(), networkId, number).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkWirelessSsidVpn", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var number string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkWirelessSsidVpn(context.Background(), networkId, number).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetNetworkWirelessSsids", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetNetworkWirelessSsids(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganization", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganization(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationActionBatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var actionBatchId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationActionBatch(context.Background(), organizationId, actionBatchId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationActionBatches", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationActionBatches(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationAdaptivePolicyAcl", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var aclId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationAdaptivePolicyAcl(context.Background(), organizationId, aclId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationAdaptivePolicyAcls", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationAdaptivePolicyAcls(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationAdaptivePolicyGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var id string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationAdaptivePolicyGroup(context.Background(), organizationId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationAdaptivePolicyGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationAdaptivePolicyGroups(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationAdaptivePolicyPolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationAdaptivePolicyPolicies(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationAdaptivePolicyPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var id string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationAdaptivePolicyPolicy(context.Background(), organizationId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationAdaptivePolicySettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationAdaptivePolicySettings(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationAdmins", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationAdmins(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationAlertsProfiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationAlertsProfiles(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationApplianceSecurityIntrusion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationApplianceSecurityIntrusion(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationApplianceVpnThirdPartyVPNPeers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationApplianceVpnThirdPartyVPNPeers(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationApplianceVpnVpnFirewallRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationApplianceVpnVpnFirewallRules(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationBrandingPolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationBrandingPolicies(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationBrandingPoliciesPriorities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationBrandingPoliciesPriorities(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationBrandingPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var brandingPolicyId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationBrandingPolicy(context.Background(), organizationId, brandingPolicyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationCameraCustomAnalyticsArtifact", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var artifactId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationCameraCustomAnalyticsArtifact(context.Background(), organizationId, artifactId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationCameraCustomAnalyticsArtifacts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationCameraCustomAnalyticsArtifacts(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationCameraOnboardingStatuses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationCameraOnboardingStatuses(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationClientsSearch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationClientsSearch(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationConfigTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var configTemplateId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationConfigTemplate(context.Background(), organizationId, configTemplateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationConfigTemplateSwitchProfilePort", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var configTemplateId string
		var profileId string
		var portId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationConfigTemplateSwitchProfilePort(context.Background(), organizationId, configTemplateId, profileId, portId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationConfigTemplateSwitchProfilePorts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var configTemplateId string
		var profileId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationConfigTemplateSwitchProfilePorts(context.Background(), organizationId, configTemplateId, profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationConfigTemplateSwitchProfiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var configTemplateId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationConfigTemplateSwitchProfiles(context.Background(), organizationId, configTemplateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationConfigTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationConfigTemplates(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationDevices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationDevices(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationEarlyAccessFeatures", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationEarlyAccessFeatures(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationEarlyAccessFeaturesOptIn", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var optInId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationEarlyAccessFeaturesOptIn(context.Background(), organizationId, optInId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationEarlyAccessFeaturesOptIns", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationEarlyAccessFeaturesOptIns(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationFirmwareUpgrades", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationFirmwareUpgrades(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationFirmwareUpgradesByDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationFirmwareUpgradesByDevice(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationInsightApplications", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationInsightApplications(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationInsightMonitoredMediaServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var monitoredMediaServerId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationInsightMonitoredMediaServer(context.Background(), organizationId, monitoredMediaServerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationInsightMonitoredMediaServers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationInsightMonitoredMediaServers(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationInventoryDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationInventoryDevice(context.Background(), organizationId, serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationInventoryDevices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationInventoryDevices(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationInventoryOnboardingCloudMonitoringImports", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationInventoryOnboardingCloudMonitoringImports(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationInventoryOnboardingCloudMonitoringNetworks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationInventoryOnboardingCloudMonitoringNetworks(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationLicense", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var licenseId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationLicense(context.Background(), organizationId, licenseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationLicenses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationLicenses(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationLicensingCotermLicenses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationLicensingCotermLicenses(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationLoginSecurity", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationLoginSecurity(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationNetworks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationNetworks(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationPolicyObject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var policyObjectId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationPolicyObject(context.Background(), organizationId, policyObjectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationPolicyObjects", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationPolicyObjects(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationPolicyObjectsGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var policyObjectGroupId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationPolicyObjectsGroup(context.Background(), organizationId, policyObjectGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationPolicyObjectsGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationPolicyObjectsGroups(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationSaml", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationSaml(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationSamlIdp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var idpId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationSamlIdp(context.Background(), organizationId, idpId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationSamlIdps", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationSamlIdps(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationSamlRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var samlRoleId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationSamlRole(context.Background(), organizationId, samlRoleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationSamlRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationSamlRoles(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationSmApnsCert", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationSmApnsCert(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationSmVppAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var vppAccountId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationSmVppAccount(context.Background(), organizationId, vppAccountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationSmVppAccounts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationSmVppAccounts(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationSnmp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationSnmp(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizationSwitchPortsBySwitch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizationSwitchPortsBySwitch(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService GetOrganizations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ConfigureAPI.GetOrganizations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService LockNetworkSmDevices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.LockNetworkSmDevices(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService ModifyNetworkSmDevicesTags", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.ModifyNetworkSmDevicesTags(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService MoveNetworkSmDevices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.MoveNetworkSmDevices(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService MoveOrganizationLicenses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.MoveOrganizationLicenses(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService MoveOrganizationLicensesSeats", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.MoveOrganizationLicensesSeats(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService MoveOrganizationLicensingCotermLicenses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.MoveOrganizationLicensingCotermLicenses(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService ProvisionNetworkClients", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.ProvisionNetworkClients(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService RefreshNetworkSmDeviceDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var deviceId string

		httpRes, err := apiClient.ConfigureAPI.RefreshNetworkSmDeviceDetails(context.Background(), networkId, deviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService ReleaseFromOrganizationInventory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.ReleaseFromOrganizationInventory(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService RemoveNetworkDevices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		httpRes, err := apiClient.ConfigureAPI.RemoveNetworkDevices(context.Background(), networkId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService RemoveNetworkSwitchStack", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var switchStackId string

		resp, httpRes, err := apiClient.ConfigureAPI.RemoveNetworkSwitchStack(context.Background(), networkId, switchStackId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService RenewOrganizationLicensesSeats", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.RenewOrganizationLicensesSeats(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService RollbacksNetworkFirmwareUpgradesStagedEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.RollbacksNetworkFirmwareUpgradesStagedEvents(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService SplitNetwork", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.SplitNetwork(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService SwapNetworkApplianceWarmSpare", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.SwapNetworkApplianceWarmSpare(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UnbindNetwork", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UnbindNetwork(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UnenrollNetworkSmDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var deviceId string

		resp, httpRes, err := apiClient.ConfigureAPI.UnenrollNetworkSmDevice(context.Background(), networkId, deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateDevice(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateDeviceApplianceRadioSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateDeviceApplianceRadioSettings(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateDeviceApplianceUplinksSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateDeviceApplianceUplinksSettings(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateDeviceCameraCustomAnalytics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateDeviceCameraCustomAnalytics(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateDeviceCameraQualityAndRetention", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateDeviceCameraQualityAndRetention(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateDeviceCameraSense", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateDeviceCameraSense(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateDeviceCameraVideoSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateDeviceCameraVideoSettings(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateDeviceCameraWirelessProfiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateDeviceCameraWirelessProfiles(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateDeviceCellularGatewayLan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateDeviceCellularGatewayLan(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateDeviceCellularGatewayPortForwardingRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateDeviceCellularGatewayPortForwardingRules(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateDeviceCellularSims", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateDeviceCellularSims(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateDeviceManagementInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateDeviceManagementInterface(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateDeviceSensorRelationships", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateDeviceSensorRelationships(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateDeviceSwitchPort", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string
		var portId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateDeviceSwitchPort(context.Background(), serial, portId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateDeviceSwitchRoutingInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string
		var interfaceId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateDeviceSwitchRoutingInterface(context.Background(), serial, interfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateDeviceSwitchRoutingInterfaceDhcp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string
		var interfaceId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateDeviceSwitchRoutingInterfaceDhcp(context.Background(), serial, interfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateDeviceSwitchRoutingStaticRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string
		var staticRouteId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateDeviceSwitchRoutingStaticRoute(context.Background(), serial, staticRouteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateDeviceSwitchWarmSpare", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateDeviceSwitchWarmSpare(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateDeviceWirelessBluetoothSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateDeviceWirelessBluetoothSettings(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateDeviceWirelessRadioSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateDeviceWirelessRadioSettings(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetwork", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetwork(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkAlertsSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkAlertsSettings(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkApplianceConnectivityMonitoringDestinations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkApplianceConnectivityMonitoringDestinations(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkApplianceContentFiltering", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkApplianceContentFiltering(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkApplianceFirewallCellularFirewallRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkApplianceFirewallCellularFirewallRules(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkApplianceFirewallFirewalledService", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var service string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkApplianceFirewallFirewalledService(context.Background(), networkId, service).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkApplianceFirewallInboundCellularFirewallRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkApplianceFirewallInboundCellularFirewallRules(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkApplianceFirewallInboundFirewallRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkApplianceFirewallInboundFirewallRules(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkApplianceFirewallL3FirewallRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkApplianceFirewallL3FirewallRules(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkApplianceFirewallL7FirewallRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkApplianceFirewallL7FirewallRules(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkApplianceFirewallOneToManyNatRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkApplianceFirewallOneToManyNatRules(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkApplianceFirewallOneToOneNatRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkApplianceFirewallOneToOneNatRules(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkApplianceFirewallPortForwardingRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkApplianceFirewallPortForwardingRules(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkApplianceFirewallSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkApplianceFirewallSettings(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkAppliancePort", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var portId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkAppliancePort(context.Background(), networkId, portId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkAppliancePrefixesDelegatedStatic", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var staticDelegatedPrefixId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkAppliancePrefixesDelegatedStatic(context.Background(), networkId, staticDelegatedPrefixId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkApplianceRfProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var rfProfileId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkApplianceRfProfile(context.Background(), networkId, rfProfileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkApplianceSecurityIntrusion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkApplianceSecurityIntrusion(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkApplianceSecurityMalware", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkApplianceSecurityMalware(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkApplianceSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkApplianceSettings(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkApplianceSingleLan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkApplianceSingleLan(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkApplianceSsid", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var number string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkApplianceSsid(context.Background(), networkId, number).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkApplianceStaticRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var staticRouteId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkApplianceStaticRoute(context.Background(), networkId, staticRouteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkApplianceTrafficShaping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkApplianceTrafficShaping(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkApplianceTrafficShapingCustomPerformanceClass", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var customPerformanceClassId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkApplianceTrafficShapingCustomPerformanceClass(context.Background(), networkId, customPerformanceClassId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkApplianceTrafficShapingRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkApplianceTrafficShapingRules(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkApplianceTrafficShapingUplinkBandwidth", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkApplianceTrafficShapingUplinkBandwidth(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkApplianceTrafficShapingUplinkSelection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkApplianceTrafficShapingUplinkSelection(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkApplianceVlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var vlanId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkApplianceVlan(context.Background(), networkId, vlanId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkApplianceVlansSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkApplianceVlansSettings(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkApplianceVpnBgp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkApplianceVpnBgp(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkApplianceVpnSiteToSiteVpn", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkApplianceVpnSiteToSiteVpn(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkApplianceWarmSpare", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkApplianceWarmSpare(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkCameraQualityRetentionProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var qualityRetentionProfileId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkCameraQualityRetentionProfile(context.Background(), networkId, qualityRetentionProfileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkCameraWirelessProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var wirelessProfileId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkCameraWirelessProfile(context.Background(), networkId, wirelessProfileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkCellularGatewayConnectivityMonitoringDestinations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkCellularGatewayConnectivityMonitoringDestinations(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkCellularGatewayDhcp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkCellularGatewayDhcp(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkCellularGatewaySubnetPool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkCellularGatewaySubnetPool(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkCellularGatewayUplink", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkCellularGatewayUplink(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkClientPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var clientId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkClientPolicy(context.Background(), networkId, clientId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkClientSplashAuthorizationStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var clientId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkClientSplashAuthorizationStatus(context.Background(), networkId, clientId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkFirmwareUpgrades", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkFirmwareUpgrades(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkFirmwareUpgradesStagedEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkFirmwareUpgradesStagedEvents(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkFirmwareUpgradesStagedGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var groupId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkFirmwareUpgradesStagedGroup(context.Background(), networkId, groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkFirmwareUpgradesStagedStages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkFirmwareUpgradesStagedStages(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkFloorPlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var floorPlanId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkFloorPlan(context.Background(), networkId, floorPlanId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkGroupPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var groupPolicyId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkGroupPolicy(context.Background(), networkId, groupPolicyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkMerakiAuthUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var merakiAuthUserId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkMerakiAuthUser(context.Background(), networkId, merakiAuthUserId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkMqttBroker", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var mqttBrokerId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkMqttBroker(context.Background(), networkId, mqttBrokerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkNetflow", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkNetflow(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkSensorAlertsProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var id string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkSensorAlertsProfile(context.Background(), networkId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkSensorMqttBroker", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var mqttBrokerId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkSensorMqttBroker(context.Background(), networkId, mqttBrokerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkSettings(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkSmDevicesFields", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkSmDevicesFields(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkSmTargetGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var targetGroupId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkSmTargetGroup(context.Background(), networkId, targetGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkSnmp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkSnmp(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkSwitchAccessControlLists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkSwitchAccessControlLists(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkSwitchAccessPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var accessPolicyNumber string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkSwitchAccessPolicy(context.Background(), networkId, accessPolicyNumber).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkSwitchAlternateManagementInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkSwitchAlternateManagementInterface(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkSwitchDhcpServerPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkSwitchDhcpServerPolicy(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var trustedServerId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer(context.Background(), networkId, trustedServerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkSwitchDscpToCosMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkSwitchDscpToCosMappings(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkSwitchLinkAggregation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var linkAggregationId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkSwitchLinkAggregation(context.Background(), networkId, linkAggregationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkSwitchMtu", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkSwitchMtu(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkSwitchPortSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var portScheduleId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkSwitchPortSchedule(context.Background(), networkId, portScheduleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkSwitchQosRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var qosRuleId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkSwitchQosRule(context.Background(), networkId, qosRuleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkSwitchQosRulesOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkSwitchQosRulesOrder(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkSwitchRoutingMulticast", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkSwitchRoutingMulticast(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkSwitchRoutingMulticastRendezvousPoint", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var rendezvousPointId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkSwitchRoutingMulticastRendezvousPoint(context.Background(), networkId, rendezvousPointId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkSwitchRoutingOspf", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkSwitchRoutingOspf(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkSwitchSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkSwitchSettings(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkSwitchStackRoutingInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var switchStackId string
		var interfaceId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkSwitchStackRoutingInterface(context.Background(), networkId, switchStackId, interfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkSwitchStackRoutingInterfaceDhcp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var switchStackId string
		var interfaceId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkSwitchStackRoutingInterfaceDhcp(context.Background(), networkId, switchStackId, interfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkSwitchStackRoutingStaticRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var switchStackId string
		var staticRouteId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkSwitchStackRoutingStaticRoute(context.Background(), networkId, switchStackId, staticRouteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkSwitchStormControl", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkSwitchStormControl(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkSwitchStp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkSwitchStp(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkSyslogServers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkSyslogServers(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkTrafficAnalysis", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkTrafficAnalysis(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkWebhooksHttpServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var httpServerId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkWebhooksHttpServer(context.Background(), networkId, httpServerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkWebhooksPayloadTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var payloadTemplateId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkWebhooksPayloadTemplate(context.Background(), networkId, payloadTemplateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkWirelessAlternateManagementInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkWirelessAlternateManagementInterface(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkWirelessBilling", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkWirelessBilling(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkWirelessBluetoothSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkWirelessBluetoothSettings(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkWirelessRfProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var rfProfileId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkWirelessRfProfile(context.Background(), networkId, rfProfileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkWirelessSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkWirelessSettings(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkWirelessSsid", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var number string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkWirelessSsid(context.Background(), networkId, number).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkWirelessSsidBonjourForwarding", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var number string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkWirelessSsidBonjourForwarding(context.Background(), networkId, number).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkWirelessSsidDeviceTypeGroupPolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var number string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkWirelessSsidDeviceTypeGroupPolicies(context.Background(), networkId, number).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkWirelessSsidEapOverride", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var number string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkWirelessSsidEapOverride(context.Background(), networkId, number).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkWirelessSsidFirewallL3FirewallRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var number string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkWirelessSsidFirewallL3FirewallRules(context.Background(), networkId, number).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkWirelessSsidFirewallL7FirewallRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var number string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkWirelessSsidFirewallL7FirewallRules(context.Background(), networkId, number).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkWirelessSsidHotspot20", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var number string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkWirelessSsidHotspot20(context.Background(), networkId, number).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkWirelessSsidIdentityPsk", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var number string
		var identityPskId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkWirelessSsidIdentityPsk(context.Background(), networkId, number, identityPskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkWirelessSsidSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var number string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkWirelessSsidSchedules(context.Background(), networkId, number).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkWirelessSsidSplashSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var number string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkWirelessSsidSplashSettings(context.Background(), networkId, number).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkWirelessSsidTrafficShapingRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var number string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkWirelessSsidTrafficShapingRules(context.Background(), networkId, number).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateNetworkWirelessSsidVpn", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var number string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateNetworkWirelessSsidVpn(context.Background(), networkId, number).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateOrganization", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateOrganization(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateOrganizationActionBatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var actionBatchId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateOrganizationActionBatch(context.Background(), organizationId, actionBatchId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateOrganizationAdaptivePolicyAcl", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var aclId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateOrganizationAdaptivePolicyAcl(context.Background(), organizationId, aclId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateOrganizationAdaptivePolicyGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var id string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateOrganizationAdaptivePolicyGroup(context.Background(), organizationId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateOrganizationAdaptivePolicyPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var id string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateOrganizationAdaptivePolicyPolicy(context.Background(), organizationId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateOrganizationAdaptivePolicySettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateOrganizationAdaptivePolicySettings(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateOrganizationAdmin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var adminId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateOrganizationAdmin(context.Background(), organizationId, adminId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateOrganizationAlertsProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var alertConfigId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateOrganizationAlertsProfile(context.Background(), organizationId, alertConfigId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateOrganizationApplianceSecurityIntrusion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateOrganizationApplianceSecurityIntrusion(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateOrganizationApplianceVpnThirdPartyVPNPeers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateOrganizationApplianceVpnThirdPartyVPNPeers(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateOrganizationApplianceVpnVpnFirewallRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateOrganizationApplianceVpnVpnFirewallRules(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateOrganizationBrandingPoliciesPriorities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateOrganizationBrandingPoliciesPriorities(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateOrganizationBrandingPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var brandingPolicyId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateOrganizationBrandingPolicy(context.Background(), organizationId, brandingPolicyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateOrganizationCameraOnboardingStatuses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateOrganizationCameraOnboardingStatuses(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateOrganizationConfigTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var configTemplateId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateOrganizationConfigTemplate(context.Background(), organizationId, configTemplateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateOrganizationConfigTemplateSwitchProfilePort", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var configTemplateId string
		var profileId string
		var portId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateOrganizationConfigTemplateSwitchProfilePort(context.Background(), organizationId, configTemplateId, profileId, portId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateOrganizationEarlyAccessFeaturesOptIn", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var optInId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateOrganizationEarlyAccessFeaturesOptIn(context.Background(), organizationId, optInId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateOrganizationInsightMonitoredMediaServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var monitoredMediaServerId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateOrganizationInsightMonitoredMediaServer(context.Background(), organizationId, monitoredMediaServerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateOrganizationLicense", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var licenseId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateOrganizationLicense(context.Background(), organizationId, licenseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateOrganizationLoginSecurity", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateOrganizationLoginSecurity(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateOrganizationPolicyObject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var policyObjectId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateOrganizationPolicyObject(context.Background(), organizationId, policyObjectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateOrganizationPolicyObjectsGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var policyObjectGroupId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateOrganizationPolicyObjectsGroup(context.Background(), organizationId, policyObjectGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateOrganizationSaml", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateOrganizationSaml(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateOrganizationSamlIdp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var idpId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateOrganizationSamlIdp(context.Background(), organizationId, idpId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateOrganizationSamlRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var samlRoleId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateOrganizationSamlRole(context.Background(), organizationId, samlRoleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService UpdateOrganizationSnmp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.ConfigureAPI.UpdateOrganizationSnmp(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService VmxNetworkDevicesClaim", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.VmxNetworkDevicesClaim(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigureAPIService WipeNetworkSmDevices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.ConfigureAPI.WipeNetworkSmDevices(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
