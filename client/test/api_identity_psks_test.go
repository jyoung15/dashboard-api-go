/*
Meraki Dashboard API

Testing IdentityPsksAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package client

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/meraki/dashboard-api-go/client"
)

func Test_client_IdentityPsksAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test IdentityPsksAPIService CreateNetworkWirelessSsidIdentityPsk", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var number string

		resp, httpRes, err := apiClient.IdentityPsksAPI.CreateNetworkWirelessSsidIdentityPsk(context.Background(), networkId, number).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityPsksAPIService DeleteNetworkWirelessSsidIdentityPsk", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var number string
		var identityPskId string

		httpRes, err := apiClient.IdentityPsksAPI.DeleteNetworkWirelessSsidIdentityPsk(context.Background(), networkId, number, identityPskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityPsksAPIService GetNetworkWirelessSsidIdentityPsk", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var number string
		var identityPskId string

		resp, httpRes, err := apiClient.IdentityPsksAPI.GetNetworkWirelessSsidIdentityPsk(context.Background(), networkId, number, identityPskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityPsksAPIService GetNetworkWirelessSsidIdentityPsks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var number string

		resp, httpRes, err := apiClient.IdentityPsksAPI.GetNetworkWirelessSsidIdentityPsks(context.Background(), networkId, number).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityPsksAPIService UpdateNetworkWirelessSsidIdentityPsk", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var number string
		var identityPskId string

		resp, httpRes, err := apiClient.IdentityPsksAPI.UpdateNetworkWirelessSsidIdentityPsk(context.Background(), networkId, number, identityPskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
