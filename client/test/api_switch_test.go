/*
Meraki Dashboard API

Testing SwitchAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package client

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/meraki/dashboard-api-go/client"
)

func Test_client_SwitchAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SwitchAPIService AddNetworkSwitchStack", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var switchStackId string

		resp, httpRes, err := apiClient.SwitchAPI.AddNetworkSwitchStack(context.Background(), networkId, switchStackId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService CloneOrganizationSwitchDevices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.SwitchAPI.CloneOrganizationSwitchDevices(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService CreateDeviceSwitchRoutingInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.SwitchAPI.CreateDeviceSwitchRoutingInterface(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService CreateDeviceSwitchRoutingStaticRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.SwitchAPI.CreateDeviceSwitchRoutingStaticRoute(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService CreateNetworkSwitchAccessPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.CreateNetworkSwitchAccessPolicy(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService CreateNetworkSwitchLinkAggregation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.CreateNetworkSwitchLinkAggregation(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService CreateNetworkSwitchPortSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.CreateNetworkSwitchPortSchedule(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService CreateNetworkSwitchQosRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.CreateNetworkSwitchQosRule(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService CreateNetworkSwitchRoutingMulticastRendezvousPoint", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.CreateNetworkSwitchRoutingMulticastRendezvousPoint(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService CreateNetworkSwitchStack", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.CreateNetworkSwitchStack(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService CreateNetworkSwitchStackRoutingInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var switchStackId string

		resp, httpRes, err := apiClient.SwitchAPI.CreateNetworkSwitchStackRoutingInterface(context.Background(), networkId, switchStackId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService CreateNetworkSwitchStackRoutingStaticRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var switchStackId string

		resp, httpRes, err := apiClient.SwitchAPI.CreateNetworkSwitchStackRoutingStaticRoute(context.Background(), networkId, switchStackId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService CycleDeviceSwitchPorts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.SwitchAPI.CycleDeviceSwitchPorts(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService DeleteDeviceSwitchRoutingInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string
		var interfaceId string

		httpRes, err := apiClient.SwitchAPI.DeleteDeviceSwitchRoutingInterface(context.Background(), serial, interfaceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService DeleteDeviceSwitchRoutingStaticRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string
		var staticRouteId string

		httpRes, err := apiClient.SwitchAPI.DeleteDeviceSwitchRoutingStaticRoute(context.Background(), serial, staticRouteId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService DeleteNetworkSwitchAccessPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var accessPolicyNumber string

		httpRes, err := apiClient.SwitchAPI.DeleteNetworkSwitchAccessPolicy(context.Background(), networkId, accessPolicyNumber).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService DeleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var trustedServerId string

		httpRes, err := apiClient.SwitchAPI.DeleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer(context.Background(), networkId, trustedServerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService DeleteNetworkSwitchLinkAggregation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var linkAggregationId string

		httpRes, err := apiClient.SwitchAPI.DeleteNetworkSwitchLinkAggregation(context.Background(), networkId, linkAggregationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService DeleteNetworkSwitchPortSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var portScheduleId string

		httpRes, err := apiClient.SwitchAPI.DeleteNetworkSwitchPortSchedule(context.Background(), networkId, portScheduleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService DeleteNetworkSwitchQosRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var qosRuleId string

		httpRes, err := apiClient.SwitchAPI.DeleteNetworkSwitchQosRule(context.Background(), networkId, qosRuleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService DeleteNetworkSwitchRoutingMulticastRendezvousPoint", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var rendezvousPointId string

		httpRes, err := apiClient.SwitchAPI.DeleteNetworkSwitchRoutingMulticastRendezvousPoint(context.Background(), networkId, rendezvousPointId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService DeleteNetworkSwitchStack", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var switchStackId string

		httpRes, err := apiClient.SwitchAPI.DeleteNetworkSwitchStack(context.Background(), networkId, switchStackId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService DeleteNetworkSwitchStackRoutingInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var switchStackId string
		var interfaceId string

		httpRes, err := apiClient.SwitchAPI.DeleteNetworkSwitchStackRoutingInterface(context.Background(), networkId, switchStackId, interfaceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService DeleteNetworkSwitchStackRoutingStaticRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var switchStackId string
		var staticRouteId string

		httpRes, err := apiClient.SwitchAPI.DeleteNetworkSwitchStackRoutingStaticRoute(context.Background(), networkId, switchStackId, staticRouteId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetDeviceSwitchPort", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string
		var portId string

		resp, httpRes, err := apiClient.SwitchAPI.GetDeviceSwitchPort(context.Background(), serial, portId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetDeviceSwitchPorts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.SwitchAPI.GetDeviceSwitchPorts(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetDeviceSwitchPortsStatuses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.SwitchAPI.GetDeviceSwitchPortsStatuses(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetDeviceSwitchPortsStatusesPackets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.SwitchAPI.GetDeviceSwitchPortsStatusesPackets(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetDeviceSwitchRoutingInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string
		var interfaceId string

		resp, httpRes, err := apiClient.SwitchAPI.GetDeviceSwitchRoutingInterface(context.Background(), serial, interfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetDeviceSwitchRoutingInterfaceDhcp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string
		var interfaceId string

		resp, httpRes, err := apiClient.SwitchAPI.GetDeviceSwitchRoutingInterfaceDhcp(context.Background(), serial, interfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetDeviceSwitchRoutingInterfaces", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.SwitchAPI.GetDeviceSwitchRoutingInterfaces(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetDeviceSwitchRoutingStaticRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string
		var staticRouteId string

		resp, httpRes, err := apiClient.SwitchAPI.GetDeviceSwitchRoutingStaticRoute(context.Background(), serial, staticRouteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetDeviceSwitchRoutingStaticRoutes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.SwitchAPI.GetDeviceSwitchRoutingStaticRoutes(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetDeviceSwitchWarmSpare", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.SwitchAPI.GetDeviceSwitchWarmSpare(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetNetworkSwitchAccessControlLists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.GetNetworkSwitchAccessControlLists(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetNetworkSwitchAccessPolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.GetNetworkSwitchAccessPolicies(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetNetworkSwitchAccessPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var accessPolicyNumber string

		resp, httpRes, err := apiClient.SwitchAPI.GetNetworkSwitchAccessPolicy(context.Background(), networkId, accessPolicyNumber).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetNetworkSwitchAlternateManagementInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.GetNetworkSwitchAlternateManagementInterface(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetNetworkSwitchDhcpServerPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.GetNetworkSwitchDhcpServerPolicy(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetNetworkSwitchDhcpV4ServersSeen", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.GetNetworkSwitchDhcpV4ServersSeen(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetNetworkSwitchDscpToCosMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.GetNetworkSwitchDscpToCosMappings(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetNetworkSwitchLinkAggregations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.GetNetworkSwitchLinkAggregations(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetNetworkSwitchMtu", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.GetNetworkSwitchMtu(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetNetworkSwitchPortSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.GetNetworkSwitchPortSchedules(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetNetworkSwitchQosRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var qosRuleId string

		resp, httpRes, err := apiClient.SwitchAPI.GetNetworkSwitchQosRule(context.Background(), networkId, qosRuleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetNetworkSwitchQosRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.GetNetworkSwitchQosRules(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetNetworkSwitchQosRulesOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.GetNetworkSwitchQosRulesOrder(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetNetworkSwitchRoutingMulticast", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.GetNetworkSwitchRoutingMulticast(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetNetworkSwitchRoutingMulticastRendezvousPoint", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var rendezvousPointId string

		resp, httpRes, err := apiClient.SwitchAPI.GetNetworkSwitchRoutingMulticastRendezvousPoint(context.Background(), networkId, rendezvousPointId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetNetworkSwitchRoutingMulticastRendezvousPoints", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.GetNetworkSwitchRoutingMulticastRendezvousPoints(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetNetworkSwitchRoutingOspf", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.GetNetworkSwitchRoutingOspf(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetNetworkSwitchSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.GetNetworkSwitchSettings(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetNetworkSwitchStack", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var switchStackId string

		resp, httpRes, err := apiClient.SwitchAPI.GetNetworkSwitchStack(context.Background(), networkId, switchStackId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetNetworkSwitchStackRoutingInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var switchStackId string
		var interfaceId string

		resp, httpRes, err := apiClient.SwitchAPI.GetNetworkSwitchStackRoutingInterface(context.Background(), networkId, switchStackId, interfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetNetworkSwitchStackRoutingInterfaceDhcp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var switchStackId string
		var interfaceId string

		resp, httpRes, err := apiClient.SwitchAPI.GetNetworkSwitchStackRoutingInterfaceDhcp(context.Background(), networkId, switchStackId, interfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetNetworkSwitchStackRoutingInterfaces", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var switchStackId string

		resp, httpRes, err := apiClient.SwitchAPI.GetNetworkSwitchStackRoutingInterfaces(context.Background(), networkId, switchStackId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetNetworkSwitchStackRoutingStaticRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var switchStackId string
		var staticRouteId string

		resp, httpRes, err := apiClient.SwitchAPI.GetNetworkSwitchStackRoutingStaticRoute(context.Background(), networkId, switchStackId, staticRouteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetNetworkSwitchStackRoutingStaticRoutes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var switchStackId string

		resp, httpRes, err := apiClient.SwitchAPI.GetNetworkSwitchStackRoutingStaticRoutes(context.Background(), networkId, switchStackId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetNetworkSwitchStacks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.GetNetworkSwitchStacks(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetNetworkSwitchStormControl", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.GetNetworkSwitchStormControl(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetNetworkSwitchStp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.GetNetworkSwitchStp(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetOrganizationConfigTemplateSwitchProfilePort", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var configTemplateId string
		var profileId string
		var portId string

		resp, httpRes, err := apiClient.SwitchAPI.GetOrganizationConfigTemplateSwitchProfilePort(context.Background(), organizationId, configTemplateId, profileId, portId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetOrganizationConfigTemplateSwitchProfilePorts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var configTemplateId string
		var profileId string

		resp, httpRes, err := apiClient.SwitchAPI.GetOrganizationConfigTemplateSwitchProfilePorts(context.Background(), organizationId, configTemplateId, profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetOrganizationConfigTemplateSwitchProfiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var configTemplateId string

		resp, httpRes, err := apiClient.SwitchAPI.GetOrganizationConfigTemplateSwitchProfiles(context.Background(), organizationId, configTemplateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService GetOrganizationSwitchPortsBySwitch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.SwitchAPI.GetOrganizationSwitchPortsBySwitch(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService RemoveNetworkSwitchStack", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var switchStackId string

		resp, httpRes, err := apiClient.SwitchAPI.RemoveNetworkSwitchStack(context.Background(), networkId, switchStackId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService UpdateDeviceSwitchPort", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string
		var portId string

		resp, httpRes, err := apiClient.SwitchAPI.UpdateDeviceSwitchPort(context.Background(), serial, portId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService UpdateDeviceSwitchRoutingInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string
		var interfaceId string

		resp, httpRes, err := apiClient.SwitchAPI.UpdateDeviceSwitchRoutingInterface(context.Background(), serial, interfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService UpdateDeviceSwitchRoutingInterfaceDhcp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string
		var interfaceId string

		resp, httpRes, err := apiClient.SwitchAPI.UpdateDeviceSwitchRoutingInterfaceDhcp(context.Background(), serial, interfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService UpdateDeviceSwitchRoutingStaticRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string
		var staticRouteId string

		resp, httpRes, err := apiClient.SwitchAPI.UpdateDeviceSwitchRoutingStaticRoute(context.Background(), serial, staticRouteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService UpdateDeviceSwitchWarmSpare", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serial string

		resp, httpRes, err := apiClient.SwitchAPI.UpdateDeviceSwitchWarmSpare(context.Background(), serial).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService UpdateNetworkSwitchAccessControlLists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.UpdateNetworkSwitchAccessControlLists(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService UpdateNetworkSwitchAccessPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var accessPolicyNumber string

		resp, httpRes, err := apiClient.SwitchAPI.UpdateNetworkSwitchAccessPolicy(context.Background(), networkId, accessPolicyNumber).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService UpdateNetworkSwitchAlternateManagementInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.UpdateNetworkSwitchAlternateManagementInterface(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService UpdateNetworkSwitchDhcpServerPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.UpdateNetworkSwitchDhcpServerPolicy(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var trustedServerId string

		resp, httpRes, err := apiClient.SwitchAPI.UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer(context.Background(), networkId, trustedServerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService UpdateNetworkSwitchDscpToCosMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.UpdateNetworkSwitchDscpToCosMappings(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService UpdateNetworkSwitchLinkAggregation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var linkAggregationId string

		resp, httpRes, err := apiClient.SwitchAPI.UpdateNetworkSwitchLinkAggregation(context.Background(), networkId, linkAggregationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService UpdateNetworkSwitchMtu", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.UpdateNetworkSwitchMtu(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService UpdateNetworkSwitchPortSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var portScheduleId string

		resp, httpRes, err := apiClient.SwitchAPI.UpdateNetworkSwitchPortSchedule(context.Background(), networkId, portScheduleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService UpdateNetworkSwitchQosRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var qosRuleId string

		resp, httpRes, err := apiClient.SwitchAPI.UpdateNetworkSwitchQosRule(context.Background(), networkId, qosRuleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService UpdateNetworkSwitchQosRulesOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.UpdateNetworkSwitchQosRulesOrder(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService UpdateNetworkSwitchRoutingMulticast", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.UpdateNetworkSwitchRoutingMulticast(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService UpdateNetworkSwitchRoutingMulticastRendezvousPoint", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var rendezvousPointId string

		resp, httpRes, err := apiClient.SwitchAPI.UpdateNetworkSwitchRoutingMulticastRendezvousPoint(context.Background(), networkId, rendezvousPointId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService UpdateNetworkSwitchRoutingOspf", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.UpdateNetworkSwitchRoutingOspf(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService UpdateNetworkSwitchSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.UpdateNetworkSwitchSettings(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService UpdateNetworkSwitchStackRoutingInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var switchStackId string
		var interfaceId string

		resp, httpRes, err := apiClient.SwitchAPI.UpdateNetworkSwitchStackRoutingInterface(context.Background(), networkId, switchStackId, interfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService UpdateNetworkSwitchStackRoutingInterfaceDhcp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var switchStackId string
		var interfaceId string

		resp, httpRes, err := apiClient.SwitchAPI.UpdateNetworkSwitchStackRoutingInterfaceDhcp(context.Background(), networkId, switchStackId, interfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService UpdateNetworkSwitchStackRoutingStaticRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var switchStackId string
		var staticRouteId string

		resp, httpRes, err := apiClient.SwitchAPI.UpdateNetworkSwitchStackRoutingStaticRoute(context.Background(), networkId, switchStackId, staticRouteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService UpdateNetworkSwitchStormControl", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.UpdateNetworkSwitchStormControl(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService UpdateNetworkSwitchStp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.SwitchAPI.UpdateNetworkSwitchStp(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchAPIService UpdateOrganizationConfigTemplateSwitchProfilePort", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var configTemplateId string
		var profileId string
		var portId string

		resp, httpRes, err := apiClient.SwitchAPI.UpdateOrganizationConfigTemplateSwitchProfilePort(context.Background(), organizationId, configTemplateId, profileId, portId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
