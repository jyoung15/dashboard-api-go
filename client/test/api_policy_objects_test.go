/*
Meraki Dashboard API

Testing PolicyObjectsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package client

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/meraki/dashboard-api-go/client"
)

func Test_client_PolicyObjectsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PolicyObjectsAPIService CreateOrganizationPolicyObject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.PolicyObjectsAPI.CreateOrganizationPolicyObject(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyObjectsAPIService CreateOrganizationPolicyObjectsGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.PolicyObjectsAPI.CreateOrganizationPolicyObjectsGroup(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyObjectsAPIService DeleteOrganizationPolicyObject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var policyObjectId string

		httpRes, err := apiClient.PolicyObjectsAPI.DeleteOrganizationPolicyObject(context.Background(), organizationId, policyObjectId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyObjectsAPIService DeleteOrganizationPolicyObjectsGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var policyObjectGroupId string

		httpRes, err := apiClient.PolicyObjectsAPI.DeleteOrganizationPolicyObjectsGroup(context.Background(), organizationId, policyObjectGroupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyObjectsAPIService GetOrganizationPolicyObject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var policyObjectId string

		resp, httpRes, err := apiClient.PolicyObjectsAPI.GetOrganizationPolicyObject(context.Background(), organizationId, policyObjectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyObjectsAPIService GetOrganizationPolicyObjects", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.PolicyObjectsAPI.GetOrganizationPolicyObjects(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyObjectsAPIService GetOrganizationPolicyObjectsGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var policyObjectGroupId string

		resp, httpRes, err := apiClient.PolicyObjectsAPI.GetOrganizationPolicyObjectsGroup(context.Background(), organizationId, policyObjectGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyObjectsAPIService GetOrganizationPolicyObjectsGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.PolicyObjectsAPI.GetOrganizationPolicyObjectsGroups(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyObjectsAPIService UpdateOrganizationPolicyObject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var policyObjectId string

		resp, httpRes, err := apiClient.PolicyObjectsAPI.UpdateOrganizationPolicyObject(context.Background(), organizationId, policyObjectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyObjectsAPIService UpdateOrganizationPolicyObjectsGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var policyObjectGroupId string

		resp, httpRes, err := apiClient.PolicyObjectsAPI.UpdateOrganizationPolicyObjectsGroup(context.Background(), organizationId, policyObjectGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
