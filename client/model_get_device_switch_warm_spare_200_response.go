/*
Meraki Dashboard API

A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 03 July, 2024 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.48.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the GetDeviceSwitchWarmSpare200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetDeviceSwitchWarmSpare200Response{}

// GetDeviceSwitchWarmSpare200Response struct for GetDeviceSwitchWarmSpare200Response
type GetDeviceSwitchWarmSpare200Response struct {
	// Enable or disable warm spare for a switch
	Enabled *bool `json:"enabled,omitempty"`
	// Serial number of the primary switch
	PrimarySerial *string `json:"primarySerial,omitempty"`
	// Serial number of the warm spare switch
	SpareSerial *string `json:"spareSerial,omitempty"`
}

// NewGetDeviceSwitchWarmSpare200Response instantiates a new GetDeviceSwitchWarmSpare200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetDeviceSwitchWarmSpare200Response() *GetDeviceSwitchWarmSpare200Response {
	this := GetDeviceSwitchWarmSpare200Response{}
	return &this
}

// NewGetDeviceSwitchWarmSpare200ResponseWithDefaults instantiates a new GetDeviceSwitchWarmSpare200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetDeviceSwitchWarmSpare200ResponseWithDefaults() *GetDeviceSwitchWarmSpare200Response {
	this := GetDeviceSwitchWarmSpare200Response{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *GetDeviceSwitchWarmSpare200Response) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetDeviceSwitchWarmSpare200Response) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *GetDeviceSwitchWarmSpare200Response) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *GetDeviceSwitchWarmSpare200Response) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetPrimarySerial returns the PrimarySerial field value if set, zero value otherwise.
func (o *GetDeviceSwitchWarmSpare200Response) GetPrimarySerial() string {
	if o == nil || IsNil(o.PrimarySerial) {
		var ret string
		return ret
	}
	return *o.PrimarySerial
}

// GetPrimarySerialOk returns a tuple with the PrimarySerial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetDeviceSwitchWarmSpare200Response) GetPrimarySerialOk() (*string, bool) {
	if o == nil || IsNil(o.PrimarySerial) {
		return nil, false
	}
	return o.PrimarySerial, true
}

// HasPrimarySerial returns a boolean if a field has been set.
func (o *GetDeviceSwitchWarmSpare200Response) HasPrimarySerial() bool {
	if o != nil && !IsNil(o.PrimarySerial) {
		return true
	}

	return false
}

// SetPrimarySerial gets a reference to the given string and assigns it to the PrimarySerial field.
func (o *GetDeviceSwitchWarmSpare200Response) SetPrimarySerial(v string) {
	o.PrimarySerial = &v
}

// GetSpareSerial returns the SpareSerial field value if set, zero value otherwise.
func (o *GetDeviceSwitchWarmSpare200Response) GetSpareSerial() string {
	if o == nil || IsNil(o.SpareSerial) {
		var ret string
		return ret
	}
	return *o.SpareSerial
}

// GetSpareSerialOk returns a tuple with the SpareSerial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetDeviceSwitchWarmSpare200Response) GetSpareSerialOk() (*string, bool) {
	if o == nil || IsNil(o.SpareSerial) {
		return nil, false
	}
	return o.SpareSerial, true
}

// HasSpareSerial returns a boolean if a field has been set.
func (o *GetDeviceSwitchWarmSpare200Response) HasSpareSerial() bool {
	if o != nil && !IsNil(o.SpareSerial) {
		return true
	}

	return false
}

// SetSpareSerial gets a reference to the given string and assigns it to the SpareSerial field.
func (o *GetDeviceSwitchWarmSpare200Response) SetSpareSerial(v string) {
	o.SpareSerial = &v
}

func (o GetDeviceSwitchWarmSpare200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetDeviceSwitchWarmSpare200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.PrimarySerial) {
		toSerialize["primarySerial"] = o.PrimarySerial
	}
	if !IsNil(o.SpareSerial) {
		toSerialize["spareSerial"] = o.SpareSerial
	}
	return toSerialize, nil
}

type NullableGetDeviceSwitchWarmSpare200Response struct {
	value *GetDeviceSwitchWarmSpare200Response
	isSet bool
}

func (v NullableGetDeviceSwitchWarmSpare200Response) Get() *GetDeviceSwitchWarmSpare200Response {
	return v.value
}

func (v *NullableGetDeviceSwitchWarmSpare200Response) Set(val *GetDeviceSwitchWarmSpare200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDeviceSwitchWarmSpare200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDeviceSwitchWarmSpare200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDeviceSwitchWarmSpare200Response(val *GetDeviceSwitchWarmSpare200Response) *NullableGetDeviceSwitchWarmSpare200Response {
	return &NullableGetDeviceSwitchWarmSpare200Response{value: val, isSet: true}
}

func (v NullableGetDeviceSwitchWarmSpare200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDeviceSwitchWarmSpare200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


