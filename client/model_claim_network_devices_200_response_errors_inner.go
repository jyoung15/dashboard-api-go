/*
Meraki Dashboard API

A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 03 July, 2024 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.48.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ClaimNetworkDevices200ResponseErrorsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClaimNetworkDevices200ResponseErrorsInner{}

// ClaimNetworkDevices200ResponseErrorsInner struct for ClaimNetworkDevices200ResponseErrorsInner
type ClaimNetworkDevices200ResponseErrorsInner struct {
	// The serial of the device
	Serial string `json:"serial"`
	// The errors for the device
	Errors []string `json:"errors"`
}

type _ClaimNetworkDevices200ResponseErrorsInner ClaimNetworkDevices200ResponseErrorsInner

// NewClaimNetworkDevices200ResponseErrorsInner instantiates a new ClaimNetworkDevices200ResponseErrorsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClaimNetworkDevices200ResponseErrorsInner(serial string, errors []string) *ClaimNetworkDevices200ResponseErrorsInner {
	this := ClaimNetworkDevices200ResponseErrorsInner{}
	this.Serial = serial
	this.Errors = errors
	return &this
}

// NewClaimNetworkDevices200ResponseErrorsInnerWithDefaults instantiates a new ClaimNetworkDevices200ResponseErrorsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClaimNetworkDevices200ResponseErrorsInnerWithDefaults() *ClaimNetworkDevices200ResponseErrorsInner {
	this := ClaimNetworkDevices200ResponseErrorsInner{}
	return &this
}

// GetSerial returns the Serial field value
func (o *ClaimNetworkDevices200ResponseErrorsInner) GetSerial() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Serial
}

// GetSerialOk returns a tuple with the Serial field value
// and a boolean to check if the value has been set.
func (o *ClaimNetworkDevices200ResponseErrorsInner) GetSerialOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Serial, true
}

// SetSerial sets field value
func (o *ClaimNetworkDevices200ResponseErrorsInner) SetSerial(v string) {
	o.Serial = v
}

// GetErrors returns the Errors field value
func (o *ClaimNetworkDevices200ResponseErrorsInner) GetErrors() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value
// and a boolean to check if the value has been set.
func (o *ClaimNetworkDevices200ResponseErrorsInner) GetErrorsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Errors, true
}

// SetErrors sets field value
func (o *ClaimNetworkDevices200ResponseErrorsInner) SetErrors(v []string) {
	o.Errors = v
}

func (o ClaimNetworkDevices200ResponseErrorsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClaimNetworkDevices200ResponseErrorsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["serial"] = o.Serial
	toSerialize["errors"] = o.Errors
	return toSerialize, nil
}

func (o *ClaimNetworkDevices200ResponseErrorsInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"serial",
		"errors",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClaimNetworkDevices200ResponseErrorsInner := _ClaimNetworkDevices200ResponseErrorsInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClaimNetworkDevices200ResponseErrorsInner)

	if err != nil {
		return err
	}

	*o = ClaimNetworkDevices200ResponseErrorsInner(varClaimNetworkDevices200ResponseErrorsInner)

	return err
}

type NullableClaimNetworkDevices200ResponseErrorsInner struct {
	value *ClaimNetworkDevices200ResponseErrorsInner
	isSet bool
}

func (v NullableClaimNetworkDevices200ResponseErrorsInner) Get() *ClaimNetworkDevices200ResponseErrorsInner {
	return v.value
}

func (v *NullableClaimNetworkDevices200ResponseErrorsInner) Set(val *ClaimNetworkDevices200ResponseErrorsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableClaimNetworkDevices200ResponseErrorsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableClaimNetworkDevices200ResponseErrorsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClaimNetworkDevices200ResponseErrorsInner(val *ClaimNetworkDevices200ResponseErrorsInner) *NullableClaimNetworkDevices200ResponseErrorsInner {
	return &NullableClaimNetworkDevices200ResponseErrorsInner{value: val, isSet: true}
}

func (v NullableClaimNetworkDevices200ResponseErrorsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClaimNetworkDevices200ResponseErrorsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


