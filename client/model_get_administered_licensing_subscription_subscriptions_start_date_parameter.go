/*
Meraki Dashboard API

A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 03 July, 2024 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.48.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
	"gopkg.in/validator.v2"
	"fmt"
)

// GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter - struct for GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter
type GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter struct {
	GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameterOneOf *GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameterOneOf
	TimeTime *time.Time
}

// GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameterOneOfAsGetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter is a convenience function that returns GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameterOneOf wrapped in GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter
func GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameterOneOfAsGetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter(v *GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameterOneOf) GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter {
	return GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter{
		GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameterOneOf: v,
	}
}

// time.TimeAsGetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter is a convenience function that returns time.Time wrapped in GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter
func TimeTimeAsGetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter(v *time.Time) GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter {
	return GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter{
		TimeTime: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameterOneOf
	err = newStrictDecoder(data).Decode(&dst.GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameterOneOf)
	if err == nil {
		jsonGetAdministeredLicensingSubscriptionSubscriptionsStartDateParameterOneOf, _ := json.Marshal(dst.GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameterOneOf)
		if string(jsonGetAdministeredLicensingSubscriptionSubscriptionsStartDateParameterOneOf) == "{}" { // empty struct
			dst.GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameterOneOf = nil
		} else {
			if err = validator.Validate(dst.GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameterOneOf); err != nil {
				dst.GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameterOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameterOneOf = nil
	}

	// try to unmarshal data into TimeTime
	err = newStrictDecoder(data).Decode(&dst.TimeTime)
	if err == nil {
		jsonTimeTime, _ := json.Marshal(dst.TimeTime)
		if string(jsonTimeTime) == "{}" { // empty struct
			dst.TimeTime = nil
		} else {
			if err = validator.Validate(dst.TimeTime); err != nil {
				dst.TimeTime = nil
			} else {
				match++
			}
		}
	} else {
		dst.TimeTime = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameterOneOf = nil
		dst.TimeTime = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter) MarshalJSON() ([]byte, error) {
	if src.GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameterOneOf != nil {
		return json.Marshal(&src.GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameterOneOf)
	}

	if src.TimeTime != nil {
		return json.Marshal(&src.TimeTime)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameterOneOf != nil {
		return obj.GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameterOneOf
	}

	if obj.TimeTime != nil {
		return obj.TimeTime
	}

	// all schemas are nil
	return nil
}

type NullableGetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter struct {
	value *GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter
	isSet bool
}

func (v NullableGetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter) Get() *GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter {
	return v.value
}

func (v *NullableGetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter) Set(val *GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableGetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableGetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter(val *GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter) *NullableGetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter {
	return &NullableGetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter{value: val, isSet: true}
}

func (v NullableGetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


