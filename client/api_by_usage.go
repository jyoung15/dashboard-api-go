/*
Meraki Dashboard API

A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 03 July, 2024 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.48.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ByUsageAPIService ByUsageAPI service
type ByUsageAPIService service

type ByUsageAPIGetOrganizationSummaryTopApplicationsByUsageRequest struct {
	ctx context.Context
	ApiService *ByUsageAPIService
	organizationId string
	networkTag *string
	device *string
	networkId *string
	quantity *int32
	ssidName *string
	usageUplink *string
	t0 *string
	t1 *string
	timespan *float32
}

// Match result to an exact network tag
func (r ByUsageAPIGetOrganizationSummaryTopApplicationsByUsageRequest) NetworkTag(networkTag string) ByUsageAPIGetOrganizationSummaryTopApplicationsByUsageRequest {
	r.networkTag = &networkTag
	return r
}

// Match result to an exact device tag
func (r ByUsageAPIGetOrganizationSummaryTopApplicationsByUsageRequest) Device(device string) ByUsageAPIGetOrganizationSummaryTopApplicationsByUsageRequest {
	r.device = &device
	return r
}

// Match result to an exact network id
func (r ByUsageAPIGetOrganizationSummaryTopApplicationsByUsageRequest) NetworkId(networkId string) ByUsageAPIGetOrganizationSummaryTopApplicationsByUsageRequest {
	r.networkId = &networkId
	return r
}

// Set number of desired results to return. Default is 10.
func (r ByUsageAPIGetOrganizationSummaryTopApplicationsByUsageRequest) Quantity(quantity int32) ByUsageAPIGetOrganizationSummaryTopApplicationsByUsageRequest {
	r.quantity = &quantity
	return r
}

// Filter results by ssid name
func (r ByUsageAPIGetOrganizationSummaryTopApplicationsByUsageRequest) SsidName(ssidName string) ByUsageAPIGetOrganizationSummaryTopApplicationsByUsageRequest {
	r.ssidName = &ssidName
	return r
}

// Filter results by usage uplink
func (r ByUsageAPIGetOrganizationSummaryTopApplicationsByUsageRequest) UsageUplink(usageUplink string) ByUsageAPIGetOrganizationSummaryTopApplicationsByUsageRequest {
	r.usageUplink = &usageUplink
	return r
}

// The beginning of the timespan for the data.
func (r ByUsageAPIGetOrganizationSummaryTopApplicationsByUsageRequest) T0(t0 string) ByUsageAPIGetOrganizationSummaryTopApplicationsByUsageRequest {
	r.t0 = &t0
	return r
}

// The end of the timespan for the data. t1 can be a maximum of 186 days after t0.
func (r ByUsageAPIGetOrganizationSummaryTopApplicationsByUsageRequest) T1(t1 string) ByUsageAPIGetOrganizationSummaryTopApplicationsByUsageRequest {
	r.t1 = &t1
	return r
}

// The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be greater than or equal to 25 minutes and be less than or equal to 186 days. The default is 1 day.
func (r ByUsageAPIGetOrganizationSummaryTopApplicationsByUsageRequest) Timespan(timespan float32) ByUsageAPIGetOrganizationSummaryTopApplicationsByUsageRequest {
	r.timespan = &timespan
	return r
}

func (r ByUsageAPIGetOrganizationSummaryTopApplicationsByUsageRequest) Execute() ([]GetOrganizationSummaryTopApplicationsByUsage200ResponseInner, *http.Response, error) {
	return r.ApiService.GetOrganizationSummaryTopApplicationsByUsageExecute(r)
}

/*
GetOrganizationSummaryTopApplicationsByUsage Return the top applications sorted by data usage over given time range

Return the top applications sorted by data usage over given time range. Default unit is megabytes.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return ByUsageAPIGetOrganizationSummaryTopApplicationsByUsageRequest
*/
func (a *ByUsageAPIService) GetOrganizationSummaryTopApplicationsByUsage(ctx context.Context, organizationId string) ByUsageAPIGetOrganizationSummaryTopApplicationsByUsageRequest {
	return ByUsageAPIGetOrganizationSummaryTopApplicationsByUsageRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return []GetOrganizationSummaryTopApplicationsByUsage200ResponseInner
func (a *ByUsageAPIService) GetOrganizationSummaryTopApplicationsByUsageExecute(r ByUsageAPIGetOrganizationSummaryTopApplicationsByUsageRequest) ([]GetOrganizationSummaryTopApplicationsByUsage200ResponseInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []GetOrganizationSummaryTopApplicationsByUsage200ResponseInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ByUsageAPIService.GetOrganizationSummaryTopApplicationsByUsage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/summary/top/applications/byUsage"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.networkTag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "networkTag", r.networkTag, "")
	}
	if r.device != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "device", r.device, "")
	}
	if r.networkId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "networkId", r.networkId, "")
	}
	if r.quantity != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "quantity", r.quantity, "")
	}
	if r.ssidName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssidName", r.ssidName, "")
	}
	if r.usageUplink != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "usageUplink", r.usageUplink, "")
	}
	if r.t0 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "t0", r.t0, "")
	}
	if r.t1 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "t1", r.t1, "")
	}
	if r.timespan != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timespan", r.timespan, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ByUsageAPIGetOrganizationSummaryTopApplicationsCategoriesByUsageRequest struct {
	ctx context.Context
	ApiService *ByUsageAPIService
	organizationId string
	networkTag *string
	deviceTag *string
	networkId *string
	quantity *int32
	ssidName *string
	usageUplink *string
	t0 *string
	t1 *string
	timespan *float32
}

// Match result to an exact network tag
func (r ByUsageAPIGetOrganizationSummaryTopApplicationsCategoriesByUsageRequest) NetworkTag(networkTag string) ByUsageAPIGetOrganizationSummaryTopApplicationsCategoriesByUsageRequest {
	r.networkTag = &networkTag
	return r
}

// Match result to an exact device tag
func (r ByUsageAPIGetOrganizationSummaryTopApplicationsCategoriesByUsageRequest) DeviceTag(deviceTag string) ByUsageAPIGetOrganizationSummaryTopApplicationsCategoriesByUsageRequest {
	r.deviceTag = &deviceTag
	return r
}

// Match result to an exact network id
func (r ByUsageAPIGetOrganizationSummaryTopApplicationsCategoriesByUsageRequest) NetworkId(networkId string) ByUsageAPIGetOrganizationSummaryTopApplicationsCategoriesByUsageRequest {
	r.networkId = &networkId
	return r
}

// Set number of desired results to return. Default is 10.
func (r ByUsageAPIGetOrganizationSummaryTopApplicationsCategoriesByUsageRequest) Quantity(quantity int32) ByUsageAPIGetOrganizationSummaryTopApplicationsCategoriesByUsageRequest {
	r.quantity = &quantity
	return r
}

// Filter results by ssid name
func (r ByUsageAPIGetOrganizationSummaryTopApplicationsCategoriesByUsageRequest) SsidName(ssidName string) ByUsageAPIGetOrganizationSummaryTopApplicationsCategoriesByUsageRequest {
	r.ssidName = &ssidName
	return r
}

// Filter results by usage uplink
func (r ByUsageAPIGetOrganizationSummaryTopApplicationsCategoriesByUsageRequest) UsageUplink(usageUplink string) ByUsageAPIGetOrganizationSummaryTopApplicationsCategoriesByUsageRequest {
	r.usageUplink = &usageUplink
	return r
}

// The beginning of the timespan for the data.
func (r ByUsageAPIGetOrganizationSummaryTopApplicationsCategoriesByUsageRequest) T0(t0 string) ByUsageAPIGetOrganizationSummaryTopApplicationsCategoriesByUsageRequest {
	r.t0 = &t0
	return r
}

// The end of the timespan for the data. t1 can be a maximum of 186 days after t0.
func (r ByUsageAPIGetOrganizationSummaryTopApplicationsCategoriesByUsageRequest) T1(t1 string) ByUsageAPIGetOrganizationSummaryTopApplicationsCategoriesByUsageRequest {
	r.t1 = &t1
	return r
}

// The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be greater than or equal to 25 minutes and be less than or equal to 186 days. The default is 1 day.
func (r ByUsageAPIGetOrganizationSummaryTopApplicationsCategoriesByUsageRequest) Timespan(timespan float32) ByUsageAPIGetOrganizationSummaryTopApplicationsCategoriesByUsageRequest {
	r.timespan = &timespan
	return r
}

func (r ByUsageAPIGetOrganizationSummaryTopApplicationsCategoriesByUsageRequest) Execute() ([]GetOrganizationSummaryTopApplicationsCategoriesByUsage200ResponseInner, *http.Response, error) {
	return r.ApiService.GetOrganizationSummaryTopApplicationsCategoriesByUsageExecute(r)
}

/*
GetOrganizationSummaryTopApplicationsCategoriesByUsage Return the top application categories sorted by data usage over given time range

Return the top application categories sorted by data usage over given time range. Default unit is megabytes.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return ByUsageAPIGetOrganizationSummaryTopApplicationsCategoriesByUsageRequest
*/
func (a *ByUsageAPIService) GetOrganizationSummaryTopApplicationsCategoriesByUsage(ctx context.Context, organizationId string) ByUsageAPIGetOrganizationSummaryTopApplicationsCategoriesByUsageRequest {
	return ByUsageAPIGetOrganizationSummaryTopApplicationsCategoriesByUsageRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return []GetOrganizationSummaryTopApplicationsCategoriesByUsage200ResponseInner
func (a *ByUsageAPIService) GetOrganizationSummaryTopApplicationsCategoriesByUsageExecute(r ByUsageAPIGetOrganizationSummaryTopApplicationsCategoriesByUsageRequest) ([]GetOrganizationSummaryTopApplicationsCategoriesByUsage200ResponseInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []GetOrganizationSummaryTopApplicationsCategoriesByUsage200ResponseInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ByUsageAPIService.GetOrganizationSummaryTopApplicationsCategoriesByUsage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/summary/top/applications/categories/byUsage"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.networkTag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "networkTag", r.networkTag, "")
	}
	if r.deviceTag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceTag", r.deviceTag, "")
	}
	if r.networkId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "networkId", r.networkId, "")
	}
	if r.quantity != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "quantity", r.quantity, "")
	}
	if r.ssidName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssidName", r.ssidName, "")
	}
	if r.usageUplink != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "usageUplink", r.usageUplink, "")
	}
	if r.t0 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "t0", r.t0, "")
	}
	if r.t1 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "t1", r.t1, "")
	}
	if r.timespan != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timespan", r.timespan, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ByUsageAPIGetOrganizationSummaryTopClientsByUsageRequest struct {
	ctx context.Context
	ApiService *ByUsageAPIService
	organizationId string
	networkTag *string
	deviceTag *string
	networkId *string
	quantity *int32
	ssidName *string
	usageUplink *string
	t0 *string
	t1 *string
	timespan *float32
}

// Match result to an exact network tag
func (r ByUsageAPIGetOrganizationSummaryTopClientsByUsageRequest) NetworkTag(networkTag string) ByUsageAPIGetOrganizationSummaryTopClientsByUsageRequest {
	r.networkTag = &networkTag
	return r
}

// Match result to an exact device tag
func (r ByUsageAPIGetOrganizationSummaryTopClientsByUsageRequest) DeviceTag(deviceTag string) ByUsageAPIGetOrganizationSummaryTopClientsByUsageRequest {
	r.deviceTag = &deviceTag
	return r
}

// Match result to an exact network id
func (r ByUsageAPIGetOrganizationSummaryTopClientsByUsageRequest) NetworkId(networkId string) ByUsageAPIGetOrganizationSummaryTopClientsByUsageRequest {
	r.networkId = &networkId
	return r
}

// Set number of desired results to return. Default is 10.
func (r ByUsageAPIGetOrganizationSummaryTopClientsByUsageRequest) Quantity(quantity int32) ByUsageAPIGetOrganizationSummaryTopClientsByUsageRequest {
	r.quantity = &quantity
	return r
}

// Filter results by ssid name
func (r ByUsageAPIGetOrganizationSummaryTopClientsByUsageRequest) SsidName(ssidName string) ByUsageAPIGetOrganizationSummaryTopClientsByUsageRequest {
	r.ssidName = &ssidName
	return r
}

// Filter results by usage uplink
func (r ByUsageAPIGetOrganizationSummaryTopClientsByUsageRequest) UsageUplink(usageUplink string) ByUsageAPIGetOrganizationSummaryTopClientsByUsageRequest {
	r.usageUplink = &usageUplink
	return r
}

// The beginning of the timespan for the data.
func (r ByUsageAPIGetOrganizationSummaryTopClientsByUsageRequest) T0(t0 string) ByUsageAPIGetOrganizationSummaryTopClientsByUsageRequest {
	r.t0 = &t0
	return r
}

// The end of the timespan for the data. t1 can be a maximum of 186 days after t0.
func (r ByUsageAPIGetOrganizationSummaryTopClientsByUsageRequest) T1(t1 string) ByUsageAPIGetOrganizationSummaryTopClientsByUsageRequest {
	r.t1 = &t1
	return r
}

// The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be greater than or equal to 8 hours and be less than or equal to 186 days. The default is 1 day.
func (r ByUsageAPIGetOrganizationSummaryTopClientsByUsageRequest) Timespan(timespan float32) ByUsageAPIGetOrganizationSummaryTopClientsByUsageRequest {
	r.timespan = &timespan
	return r
}

func (r ByUsageAPIGetOrganizationSummaryTopClientsByUsageRequest) Execute() ([]GetOrganizationSummaryTopClientsByUsage200ResponseInner, *http.Response, error) {
	return r.ApiService.GetOrganizationSummaryTopClientsByUsageExecute(r)
}

/*
GetOrganizationSummaryTopClientsByUsage Return metrics for organization's top 10 clients by data usage (in mb) over given time range.

Return metrics for organization's top 10 clients by data usage (in mb) over given time range.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return ByUsageAPIGetOrganizationSummaryTopClientsByUsageRequest
*/
func (a *ByUsageAPIService) GetOrganizationSummaryTopClientsByUsage(ctx context.Context, organizationId string) ByUsageAPIGetOrganizationSummaryTopClientsByUsageRequest {
	return ByUsageAPIGetOrganizationSummaryTopClientsByUsageRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return []GetOrganizationSummaryTopClientsByUsage200ResponseInner
func (a *ByUsageAPIService) GetOrganizationSummaryTopClientsByUsageExecute(r ByUsageAPIGetOrganizationSummaryTopClientsByUsageRequest) ([]GetOrganizationSummaryTopClientsByUsage200ResponseInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []GetOrganizationSummaryTopClientsByUsage200ResponseInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ByUsageAPIService.GetOrganizationSummaryTopClientsByUsage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/summary/top/clients/byUsage"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.networkTag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "networkTag", r.networkTag, "")
	}
	if r.deviceTag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceTag", r.deviceTag, "")
	}
	if r.networkId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "networkId", r.networkId, "")
	}
	if r.quantity != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "quantity", r.quantity, "")
	}
	if r.ssidName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssidName", r.ssidName, "")
	}
	if r.usageUplink != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "usageUplink", r.usageUplink, "")
	}
	if r.t0 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "t0", r.t0, "")
	}
	if r.t1 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "t1", r.t1, "")
	}
	if r.timespan != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timespan", r.timespan, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ByUsageAPIGetOrganizationSummaryTopClientsManufacturersByUsageRequest struct {
	ctx context.Context
	ApiService *ByUsageAPIService
	organizationId string
	networkTag *string
	deviceTag *string
	networkId *string
	quantity *int32
	ssidName *string
	usageUplink *string
	t0 *string
	t1 *string
	timespan *float32
}

// Match result to an exact network tag
func (r ByUsageAPIGetOrganizationSummaryTopClientsManufacturersByUsageRequest) NetworkTag(networkTag string) ByUsageAPIGetOrganizationSummaryTopClientsManufacturersByUsageRequest {
	r.networkTag = &networkTag
	return r
}

// Match result to an exact device tag
func (r ByUsageAPIGetOrganizationSummaryTopClientsManufacturersByUsageRequest) DeviceTag(deviceTag string) ByUsageAPIGetOrganizationSummaryTopClientsManufacturersByUsageRequest {
	r.deviceTag = &deviceTag
	return r
}

// Match result to an exact network id
func (r ByUsageAPIGetOrganizationSummaryTopClientsManufacturersByUsageRequest) NetworkId(networkId string) ByUsageAPIGetOrganizationSummaryTopClientsManufacturersByUsageRequest {
	r.networkId = &networkId
	return r
}

// Set number of desired results to return. Default is 10.
func (r ByUsageAPIGetOrganizationSummaryTopClientsManufacturersByUsageRequest) Quantity(quantity int32) ByUsageAPIGetOrganizationSummaryTopClientsManufacturersByUsageRequest {
	r.quantity = &quantity
	return r
}

// Filter results by ssid name
func (r ByUsageAPIGetOrganizationSummaryTopClientsManufacturersByUsageRequest) SsidName(ssidName string) ByUsageAPIGetOrganizationSummaryTopClientsManufacturersByUsageRequest {
	r.ssidName = &ssidName
	return r
}

// Filter results by usage uplink
func (r ByUsageAPIGetOrganizationSummaryTopClientsManufacturersByUsageRequest) UsageUplink(usageUplink string) ByUsageAPIGetOrganizationSummaryTopClientsManufacturersByUsageRequest {
	r.usageUplink = &usageUplink
	return r
}

// The beginning of the timespan for the data.
func (r ByUsageAPIGetOrganizationSummaryTopClientsManufacturersByUsageRequest) T0(t0 string) ByUsageAPIGetOrganizationSummaryTopClientsManufacturersByUsageRequest {
	r.t0 = &t0
	return r
}

// The end of the timespan for the data. t1 can be a maximum of 186 days after t0.
func (r ByUsageAPIGetOrganizationSummaryTopClientsManufacturersByUsageRequest) T1(t1 string) ByUsageAPIGetOrganizationSummaryTopClientsManufacturersByUsageRequest {
	r.t1 = &t1
	return r
}

// The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 186 days. The default is 1 day.
func (r ByUsageAPIGetOrganizationSummaryTopClientsManufacturersByUsageRequest) Timespan(timespan float32) ByUsageAPIGetOrganizationSummaryTopClientsManufacturersByUsageRequest {
	r.timespan = &timespan
	return r
}

func (r ByUsageAPIGetOrganizationSummaryTopClientsManufacturersByUsageRequest) Execute() ([]GetOrganizationSummaryTopClientsManufacturersByUsage200ResponseInner, *http.Response, error) {
	return r.ApiService.GetOrganizationSummaryTopClientsManufacturersByUsageExecute(r)
}

/*
GetOrganizationSummaryTopClientsManufacturersByUsage Return metrics for organization's top clients by data usage (in mb) over given time range, grouped by manufacturer.

Return metrics for organization's top clients by data usage (in mb) over given time range, grouped by manufacturer.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return ByUsageAPIGetOrganizationSummaryTopClientsManufacturersByUsageRequest
*/
func (a *ByUsageAPIService) GetOrganizationSummaryTopClientsManufacturersByUsage(ctx context.Context, organizationId string) ByUsageAPIGetOrganizationSummaryTopClientsManufacturersByUsageRequest {
	return ByUsageAPIGetOrganizationSummaryTopClientsManufacturersByUsageRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return []GetOrganizationSummaryTopClientsManufacturersByUsage200ResponseInner
func (a *ByUsageAPIService) GetOrganizationSummaryTopClientsManufacturersByUsageExecute(r ByUsageAPIGetOrganizationSummaryTopClientsManufacturersByUsageRequest) ([]GetOrganizationSummaryTopClientsManufacturersByUsage200ResponseInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []GetOrganizationSummaryTopClientsManufacturersByUsage200ResponseInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ByUsageAPIService.GetOrganizationSummaryTopClientsManufacturersByUsage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/summary/top/clients/manufacturers/byUsage"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.networkTag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "networkTag", r.networkTag, "")
	}
	if r.deviceTag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceTag", r.deviceTag, "")
	}
	if r.networkId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "networkId", r.networkId, "")
	}
	if r.quantity != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "quantity", r.quantity, "")
	}
	if r.ssidName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssidName", r.ssidName, "")
	}
	if r.usageUplink != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "usageUplink", r.usageUplink, "")
	}
	if r.t0 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "t0", r.t0, "")
	}
	if r.t1 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "t1", r.t1, "")
	}
	if r.timespan != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timespan", r.timespan, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ByUsageAPIGetOrganizationSummaryTopDevicesByUsageRequest struct {
	ctx context.Context
	ApiService *ByUsageAPIService
	organizationId string
	networkTag *string
	deviceTag *string
	networkId *string
	quantity *int32
	ssidName *string
	usageUplink *string
	t0 *string
	t1 *string
	timespan *float32
}

// Match result to an exact network tag
func (r ByUsageAPIGetOrganizationSummaryTopDevicesByUsageRequest) NetworkTag(networkTag string) ByUsageAPIGetOrganizationSummaryTopDevicesByUsageRequest {
	r.networkTag = &networkTag
	return r
}

// Match result to an exact device tag
func (r ByUsageAPIGetOrganizationSummaryTopDevicesByUsageRequest) DeviceTag(deviceTag string) ByUsageAPIGetOrganizationSummaryTopDevicesByUsageRequest {
	r.deviceTag = &deviceTag
	return r
}

// Match result to an exact network id
func (r ByUsageAPIGetOrganizationSummaryTopDevicesByUsageRequest) NetworkId(networkId string) ByUsageAPIGetOrganizationSummaryTopDevicesByUsageRequest {
	r.networkId = &networkId
	return r
}

// Set number of desired results to return. Default is 10.
func (r ByUsageAPIGetOrganizationSummaryTopDevicesByUsageRequest) Quantity(quantity int32) ByUsageAPIGetOrganizationSummaryTopDevicesByUsageRequest {
	r.quantity = &quantity
	return r
}

// Filter results by ssid name
func (r ByUsageAPIGetOrganizationSummaryTopDevicesByUsageRequest) SsidName(ssidName string) ByUsageAPIGetOrganizationSummaryTopDevicesByUsageRequest {
	r.ssidName = &ssidName
	return r
}

// Filter results by usage uplink
func (r ByUsageAPIGetOrganizationSummaryTopDevicesByUsageRequest) UsageUplink(usageUplink string) ByUsageAPIGetOrganizationSummaryTopDevicesByUsageRequest {
	r.usageUplink = &usageUplink
	return r
}

// The beginning of the timespan for the data.
func (r ByUsageAPIGetOrganizationSummaryTopDevicesByUsageRequest) T0(t0 string) ByUsageAPIGetOrganizationSummaryTopDevicesByUsageRequest {
	r.t0 = &t0
	return r
}

// The end of the timespan for the data. t1 can be a maximum of 186 days after t0.
func (r ByUsageAPIGetOrganizationSummaryTopDevicesByUsageRequest) T1(t1 string) ByUsageAPIGetOrganizationSummaryTopDevicesByUsageRequest {
	r.t1 = &t1
	return r
}

// The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be greater than or equal to 8 hours and be less than or equal to 186 days. The default is 1 day.
func (r ByUsageAPIGetOrganizationSummaryTopDevicesByUsageRequest) Timespan(timespan float32) ByUsageAPIGetOrganizationSummaryTopDevicesByUsageRequest {
	r.timespan = &timespan
	return r
}

func (r ByUsageAPIGetOrganizationSummaryTopDevicesByUsageRequest) Execute() ([]GetOrganizationSummaryTopDevicesByUsage200ResponseInner, *http.Response, error) {
	return r.ApiService.GetOrganizationSummaryTopDevicesByUsageExecute(r)
}

/*
GetOrganizationSummaryTopDevicesByUsage Return metrics for organization's top 10 devices sorted by data usage over given time range

Return metrics for organization's top 10 devices sorted by data usage over given time range. Default unit is megabytes.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return ByUsageAPIGetOrganizationSummaryTopDevicesByUsageRequest
*/
func (a *ByUsageAPIService) GetOrganizationSummaryTopDevicesByUsage(ctx context.Context, organizationId string) ByUsageAPIGetOrganizationSummaryTopDevicesByUsageRequest {
	return ByUsageAPIGetOrganizationSummaryTopDevicesByUsageRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return []GetOrganizationSummaryTopDevicesByUsage200ResponseInner
func (a *ByUsageAPIService) GetOrganizationSummaryTopDevicesByUsageExecute(r ByUsageAPIGetOrganizationSummaryTopDevicesByUsageRequest) ([]GetOrganizationSummaryTopDevicesByUsage200ResponseInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []GetOrganizationSummaryTopDevicesByUsage200ResponseInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ByUsageAPIService.GetOrganizationSummaryTopDevicesByUsage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/summary/top/devices/byUsage"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.networkTag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "networkTag", r.networkTag, "")
	}
	if r.deviceTag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceTag", r.deviceTag, "")
	}
	if r.networkId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "networkId", r.networkId, "")
	}
	if r.quantity != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "quantity", r.quantity, "")
	}
	if r.ssidName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssidName", r.ssidName, "")
	}
	if r.usageUplink != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "usageUplink", r.usageUplink, "")
	}
	if r.t0 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "t0", r.t0, "")
	}
	if r.t1 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "t1", r.t1, "")
	}
	if r.timespan != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timespan", r.timespan, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ByUsageAPIGetOrganizationSummaryTopDevicesModelsByUsageRequest struct {
	ctx context.Context
	ApiService *ByUsageAPIService
	organizationId string
	networkTag *string
	deviceTag *string
	networkId *string
	quantity *int32
	ssidName *string
	usageUplink *string
	t0 *string
	t1 *string
	timespan *float32
}

// Match result to an exact network tag
func (r ByUsageAPIGetOrganizationSummaryTopDevicesModelsByUsageRequest) NetworkTag(networkTag string) ByUsageAPIGetOrganizationSummaryTopDevicesModelsByUsageRequest {
	r.networkTag = &networkTag
	return r
}

// Match result to an exact device tag
func (r ByUsageAPIGetOrganizationSummaryTopDevicesModelsByUsageRequest) DeviceTag(deviceTag string) ByUsageAPIGetOrganizationSummaryTopDevicesModelsByUsageRequest {
	r.deviceTag = &deviceTag
	return r
}

// Match result to an exact network id
func (r ByUsageAPIGetOrganizationSummaryTopDevicesModelsByUsageRequest) NetworkId(networkId string) ByUsageAPIGetOrganizationSummaryTopDevicesModelsByUsageRequest {
	r.networkId = &networkId
	return r
}

// Set number of desired results to return. Default is 10.
func (r ByUsageAPIGetOrganizationSummaryTopDevicesModelsByUsageRequest) Quantity(quantity int32) ByUsageAPIGetOrganizationSummaryTopDevicesModelsByUsageRequest {
	r.quantity = &quantity
	return r
}

// Filter results by ssid name
func (r ByUsageAPIGetOrganizationSummaryTopDevicesModelsByUsageRequest) SsidName(ssidName string) ByUsageAPIGetOrganizationSummaryTopDevicesModelsByUsageRequest {
	r.ssidName = &ssidName
	return r
}

// Filter results by usage uplink
func (r ByUsageAPIGetOrganizationSummaryTopDevicesModelsByUsageRequest) UsageUplink(usageUplink string) ByUsageAPIGetOrganizationSummaryTopDevicesModelsByUsageRequest {
	r.usageUplink = &usageUplink
	return r
}

// The beginning of the timespan for the data.
func (r ByUsageAPIGetOrganizationSummaryTopDevicesModelsByUsageRequest) T0(t0 string) ByUsageAPIGetOrganizationSummaryTopDevicesModelsByUsageRequest {
	r.t0 = &t0
	return r
}

// The end of the timespan for the data. t1 can be a maximum of 186 days after t0.
func (r ByUsageAPIGetOrganizationSummaryTopDevicesModelsByUsageRequest) T1(t1 string) ByUsageAPIGetOrganizationSummaryTopDevicesModelsByUsageRequest {
	r.t1 = &t1
	return r
}

// The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be greater than or equal to 8 hours and be less than or equal to 186 days. The default is 1 day.
func (r ByUsageAPIGetOrganizationSummaryTopDevicesModelsByUsageRequest) Timespan(timespan float32) ByUsageAPIGetOrganizationSummaryTopDevicesModelsByUsageRequest {
	r.timespan = &timespan
	return r
}

func (r ByUsageAPIGetOrganizationSummaryTopDevicesModelsByUsageRequest) Execute() ([]GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner, *http.Response, error) {
	return r.ApiService.GetOrganizationSummaryTopDevicesModelsByUsageExecute(r)
}

/*
GetOrganizationSummaryTopDevicesModelsByUsage Return metrics for organization's top 10 device models sorted by data usage over given time range

Return metrics for organization's top 10 device models sorted by data usage over given time range. Default unit is megabytes.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return ByUsageAPIGetOrganizationSummaryTopDevicesModelsByUsageRequest
*/
func (a *ByUsageAPIService) GetOrganizationSummaryTopDevicesModelsByUsage(ctx context.Context, organizationId string) ByUsageAPIGetOrganizationSummaryTopDevicesModelsByUsageRequest {
	return ByUsageAPIGetOrganizationSummaryTopDevicesModelsByUsageRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return []GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner
func (a *ByUsageAPIService) GetOrganizationSummaryTopDevicesModelsByUsageExecute(r ByUsageAPIGetOrganizationSummaryTopDevicesModelsByUsageRequest) ([]GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ByUsageAPIService.GetOrganizationSummaryTopDevicesModelsByUsage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/summary/top/devices/models/byUsage"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.networkTag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "networkTag", r.networkTag, "")
	}
	if r.deviceTag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceTag", r.deviceTag, "")
	}
	if r.networkId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "networkId", r.networkId, "")
	}
	if r.quantity != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "quantity", r.quantity, "")
	}
	if r.ssidName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssidName", r.ssidName, "")
	}
	if r.usageUplink != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "usageUplink", r.usageUplink, "")
	}
	if r.t0 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "t0", r.t0, "")
	}
	if r.t1 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "t1", r.t1, "")
	}
	if r.timespan != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timespan", r.timespan, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ByUsageAPIGetOrganizationSummaryTopSsidsByUsageRequest struct {
	ctx context.Context
	ApiService *ByUsageAPIService
	organizationId string
	networkTag *string
	deviceTag *string
	networkId *string
	quantity *int32
	ssidName *string
	usageUplink *string
	t0 *string
	t1 *string
	timespan *float32
}

// Match result to an exact network tag
func (r ByUsageAPIGetOrganizationSummaryTopSsidsByUsageRequest) NetworkTag(networkTag string) ByUsageAPIGetOrganizationSummaryTopSsidsByUsageRequest {
	r.networkTag = &networkTag
	return r
}

// Match result to an exact device tag
func (r ByUsageAPIGetOrganizationSummaryTopSsidsByUsageRequest) DeviceTag(deviceTag string) ByUsageAPIGetOrganizationSummaryTopSsidsByUsageRequest {
	r.deviceTag = &deviceTag
	return r
}

// Match result to an exact network id
func (r ByUsageAPIGetOrganizationSummaryTopSsidsByUsageRequest) NetworkId(networkId string) ByUsageAPIGetOrganizationSummaryTopSsidsByUsageRequest {
	r.networkId = &networkId
	return r
}

// Set number of desired results to return. Default is 10.
func (r ByUsageAPIGetOrganizationSummaryTopSsidsByUsageRequest) Quantity(quantity int32) ByUsageAPIGetOrganizationSummaryTopSsidsByUsageRequest {
	r.quantity = &quantity
	return r
}

// Filter results by ssid name
func (r ByUsageAPIGetOrganizationSummaryTopSsidsByUsageRequest) SsidName(ssidName string) ByUsageAPIGetOrganizationSummaryTopSsidsByUsageRequest {
	r.ssidName = &ssidName
	return r
}

// Filter results by usage uplink
func (r ByUsageAPIGetOrganizationSummaryTopSsidsByUsageRequest) UsageUplink(usageUplink string) ByUsageAPIGetOrganizationSummaryTopSsidsByUsageRequest {
	r.usageUplink = &usageUplink
	return r
}

// The beginning of the timespan for the data.
func (r ByUsageAPIGetOrganizationSummaryTopSsidsByUsageRequest) T0(t0 string) ByUsageAPIGetOrganizationSummaryTopSsidsByUsageRequest {
	r.t0 = &t0
	return r
}

// The end of the timespan for the data. t1 can be a maximum of 186 days after t0.
func (r ByUsageAPIGetOrganizationSummaryTopSsidsByUsageRequest) T1(t1 string) ByUsageAPIGetOrganizationSummaryTopSsidsByUsageRequest {
	r.t1 = &t1
	return r
}

// The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be greater than or equal to 8 hours and be less than or equal to 186 days. The default is 1 day.
func (r ByUsageAPIGetOrganizationSummaryTopSsidsByUsageRequest) Timespan(timespan float32) ByUsageAPIGetOrganizationSummaryTopSsidsByUsageRequest {
	r.timespan = &timespan
	return r
}

func (r ByUsageAPIGetOrganizationSummaryTopSsidsByUsageRequest) Execute() ([]GetOrganizationSummaryTopSsidsByUsage200ResponseInner, *http.Response, error) {
	return r.ApiService.GetOrganizationSummaryTopSsidsByUsageExecute(r)
}

/*
GetOrganizationSummaryTopSsidsByUsage Return metrics for organization's top 10 ssids by data usage over given time range

Return metrics for organization's top 10 ssids by data usage over given time range. Default unit is megabytes.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return ByUsageAPIGetOrganizationSummaryTopSsidsByUsageRequest
*/
func (a *ByUsageAPIService) GetOrganizationSummaryTopSsidsByUsage(ctx context.Context, organizationId string) ByUsageAPIGetOrganizationSummaryTopSsidsByUsageRequest {
	return ByUsageAPIGetOrganizationSummaryTopSsidsByUsageRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return []GetOrganizationSummaryTopSsidsByUsage200ResponseInner
func (a *ByUsageAPIService) GetOrganizationSummaryTopSsidsByUsageExecute(r ByUsageAPIGetOrganizationSummaryTopSsidsByUsageRequest) ([]GetOrganizationSummaryTopSsidsByUsage200ResponseInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []GetOrganizationSummaryTopSsidsByUsage200ResponseInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ByUsageAPIService.GetOrganizationSummaryTopSsidsByUsage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/summary/top/ssids/byUsage"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.networkTag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "networkTag", r.networkTag, "")
	}
	if r.deviceTag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceTag", r.deviceTag, "")
	}
	if r.networkId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "networkId", r.networkId, "")
	}
	if r.quantity != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "quantity", r.quantity, "")
	}
	if r.ssidName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssidName", r.ssidName, "")
	}
	if r.usageUplink != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "usageUplink", r.usageUplink, "")
	}
	if r.t0 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "t0", r.t0, "")
	}
	if r.t1 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "t1", r.t1, "")
	}
	if r.timespan != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timespan", r.timespan, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
