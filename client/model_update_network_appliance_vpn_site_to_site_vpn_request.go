/*
Meraki Dashboard API

A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 03 July, 2024 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.48.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateNetworkApplianceVpnSiteToSiteVpnRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateNetworkApplianceVpnSiteToSiteVpnRequest{}

// UpdateNetworkApplianceVpnSiteToSiteVpnRequest struct for UpdateNetworkApplianceVpnSiteToSiteVpnRequest
type UpdateNetworkApplianceVpnSiteToSiteVpnRequest struct {
	// The site-to-site VPN mode. Can be one of 'none', 'spoke' or 'hub'
	Mode string `json:"mode"`
	// The list of VPN hubs, in order of preference. In spoke mode, at least 1 hub is required.
	Hubs []UpdateNetworkApplianceVpnSiteToSiteVpnRequestHubsInner `json:"hubs,omitempty"`
	// The list of subnets and their VPN presence.
	Subnets []UpdateNetworkApplianceVpnSiteToSiteVpnRequestSubnetsInner `json:"subnets,omitempty"`
}

type _UpdateNetworkApplianceVpnSiteToSiteVpnRequest UpdateNetworkApplianceVpnSiteToSiteVpnRequest

// NewUpdateNetworkApplianceVpnSiteToSiteVpnRequest instantiates a new UpdateNetworkApplianceVpnSiteToSiteVpnRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateNetworkApplianceVpnSiteToSiteVpnRequest(mode string) *UpdateNetworkApplianceVpnSiteToSiteVpnRequest {
	this := UpdateNetworkApplianceVpnSiteToSiteVpnRequest{}
	this.Mode = mode
	return &this
}

// NewUpdateNetworkApplianceVpnSiteToSiteVpnRequestWithDefaults instantiates a new UpdateNetworkApplianceVpnSiteToSiteVpnRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateNetworkApplianceVpnSiteToSiteVpnRequestWithDefaults() *UpdateNetworkApplianceVpnSiteToSiteVpnRequest {
	this := UpdateNetworkApplianceVpnSiteToSiteVpnRequest{}
	return &this
}

// GetMode returns the Mode field value
func (o *UpdateNetworkApplianceVpnSiteToSiteVpnRequest) GetMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
func (o *UpdateNetworkApplianceVpnSiteToSiteVpnRequest) GetModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *UpdateNetworkApplianceVpnSiteToSiteVpnRequest) SetMode(v string) {
	o.Mode = v
}

// GetHubs returns the Hubs field value if set, zero value otherwise.
func (o *UpdateNetworkApplianceVpnSiteToSiteVpnRequest) GetHubs() []UpdateNetworkApplianceVpnSiteToSiteVpnRequestHubsInner {
	if o == nil || IsNil(o.Hubs) {
		var ret []UpdateNetworkApplianceVpnSiteToSiteVpnRequestHubsInner
		return ret
	}
	return o.Hubs
}

// GetHubsOk returns a tuple with the Hubs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkApplianceVpnSiteToSiteVpnRequest) GetHubsOk() ([]UpdateNetworkApplianceVpnSiteToSiteVpnRequestHubsInner, bool) {
	if o == nil || IsNil(o.Hubs) {
		return nil, false
	}
	return o.Hubs, true
}

// HasHubs returns a boolean if a field has been set.
func (o *UpdateNetworkApplianceVpnSiteToSiteVpnRequest) HasHubs() bool {
	if o != nil && !IsNil(o.Hubs) {
		return true
	}

	return false
}

// SetHubs gets a reference to the given []UpdateNetworkApplianceVpnSiteToSiteVpnRequestHubsInner and assigns it to the Hubs field.
func (o *UpdateNetworkApplianceVpnSiteToSiteVpnRequest) SetHubs(v []UpdateNetworkApplianceVpnSiteToSiteVpnRequestHubsInner) {
	o.Hubs = v
}

// GetSubnets returns the Subnets field value if set, zero value otherwise.
func (o *UpdateNetworkApplianceVpnSiteToSiteVpnRequest) GetSubnets() []UpdateNetworkApplianceVpnSiteToSiteVpnRequestSubnetsInner {
	if o == nil || IsNil(o.Subnets) {
		var ret []UpdateNetworkApplianceVpnSiteToSiteVpnRequestSubnetsInner
		return ret
	}
	return o.Subnets
}

// GetSubnetsOk returns a tuple with the Subnets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkApplianceVpnSiteToSiteVpnRequest) GetSubnetsOk() ([]UpdateNetworkApplianceVpnSiteToSiteVpnRequestSubnetsInner, bool) {
	if o == nil || IsNil(o.Subnets) {
		return nil, false
	}
	return o.Subnets, true
}

// HasSubnets returns a boolean if a field has been set.
func (o *UpdateNetworkApplianceVpnSiteToSiteVpnRequest) HasSubnets() bool {
	if o != nil && !IsNil(o.Subnets) {
		return true
	}

	return false
}

// SetSubnets gets a reference to the given []UpdateNetworkApplianceVpnSiteToSiteVpnRequestSubnetsInner and assigns it to the Subnets field.
func (o *UpdateNetworkApplianceVpnSiteToSiteVpnRequest) SetSubnets(v []UpdateNetworkApplianceVpnSiteToSiteVpnRequestSubnetsInner) {
	o.Subnets = v
}

func (o UpdateNetworkApplianceVpnSiteToSiteVpnRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateNetworkApplianceVpnSiteToSiteVpnRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mode"] = o.Mode
	if !IsNil(o.Hubs) {
		toSerialize["hubs"] = o.Hubs
	}
	if !IsNil(o.Subnets) {
		toSerialize["subnets"] = o.Subnets
	}
	return toSerialize, nil
}

func (o *UpdateNetworkApplianceVpnSiteToSiteVpnRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateNetworkApplianceVpnSiteToSiteVpnRequest := _UpdateNetworkApplianceVpnSiteToSiteVpnRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateNetworkApplianceVpnSiteToSiteVpnRequest)

	if err != nil {
		return err
	}

	*o = UpdateNetworkApplianceVpnSiteToSiteVpnRequest(varUpdateNetworkApplianceVpnSiteToSiteVpnRequest)

	return err
}

type NullableUpdateNetworkApplianceVpnSiteToSiteVpnRequest struct {
	value *UpdateNetworkApplianceVpnSiteToSiteVpnRequest
	isSet bool
}

func (v NullableUpdateNetworkApplianceVpnSiteToSiteVpnRequest) Get() *UpdateNetworkApplianceVpnSiteToSiteVpnRequest {
	return v.value
}

func (v *NullableUpdateNetworkApplianceVpnSiteToSiteVpnRequest) Set(val *UpdateNetworkApplianceVpnSiteToSiteVpnRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateNetworkApplianceVpnSiteToSiteVpnRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateNetworkApplianceVpnSiteToSiteVpnRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateNetworkApplianceVpnSiteToSiteVpnRequest(val *UpdateNetworkApplianceVpnSiteToSiteVpnRequest) *NullableUpdateNetworkApplianceVpnSiteToSiteVpnRequest {
	return &NullableUpdateNetworkApplianceVpnSiteToSiteVpnRequest{value: val, isSet: true}
}

func (v NullableUpdateNetworkApplianceVpnSiteToSiteVpnRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateNetworkApplianceVpnSiteToSiteVpnRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


