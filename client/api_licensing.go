/*
Meraki Dashboard API

A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 03 July, 2024 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.48.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// LicensingAPIService LicensingAPI service
type LicensingAPIService service

type LicensingAPIBindAdministeredLicensingSubscriptionSubscriptionRequest struct {
	ctx context.Context
	ApiService *LicensingAPIService
	subscriptionId string
	bindAdministeredLicensingSubscriptionSubscriptionRequest *BindAdministeredLicensingSubscriptionSubscriptionRequest
	validate *bool
}

func (r LicensingAPIBindAdministeredLicensingSubscriptionSubscriptionRequest) BindAdministeredLicensingSubscriptionSubscriptionRequest(bindAdministeredLicensingSubscriptionSubscriptionRequest BindAdministeredLicensingSubscriptionSubscriptionRequest) LicensingAPIBindAdministeredLicensingSubscriptionSubscriptionRequest {
	r.bindAdministeredLicensingSubscriptionSubscriptionRequest = &bindAdministeredLicensingSubscriptionSubscriptionRequest
	return r
}

// Check if the provided networks can be bound to the subscription. Returns any licensing problems and does not commit the results.
func (r LicensingAPIBindAdministeredLicensingSubscriptionSubscriptionRequest) Validate(validate bool) LicensingAPIBindAdministeredLicensingSubscriptionSubscriptionRequest {
	r.validate = &validate
	return r
}

func (r LicensingAPIBindAdministeredLicensingSubscriptionSubscriptionRequest) Execute() (*BindAdministeredLicensingSubscriptionSubscription200Response, *http.Response, error) {
	return r.ApiService.BindAdministeredLicensingSubscriptionSubscriptionExecute(r)
}

/*
BindAdministeredLicensingSubscriptionSubscription Bind networks to a subscription

Bind networks to a subscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param subscriptionId Subscription ID
 @return LicensingAPIBindAdministeredLicensingSubscriptionSubscriptionRequest
*/
func (a *LicensingAPIService) BindAdministeredLicensingSubscriptionSubscription(ctx context.Context, subscriptionId string) LicensingAPIBindAdministeredLicensingSubscriptionSubscriptionRequest {
	return LicensingAPIBindAdministeredLicensingSubscriptionSubscriptionRequest{
		ApiService: a,
		ctx: ctx,
		subscriptionId: subscriptionId,
	}
}

// Execute executes the request
//  @return BindAdministeredLicensingSubscriptionSubscription200Response
func (a *LicensingAPIService) BindAdministeredLicensingSubscriptionSubscriptionExecute(r LicensingAPIBindAdministeredLicensingSubscriptionSubscriptionRequest) (*BindAdministeredLicensingSubscriptionSubscription200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BindAdministeredLicensingSubscriptionSubscription200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LicensingAPIService.BindAdministeredLicensingSubscriptionSubscription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/administered/licensing/subscription/subscriptions/{subscriptionId}/bind"
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionId"+"}", url.PathEscape(parameterValueToString(r.subscriptionId, "subscriptionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bindAdministeredLicensingSubscriptionSubscriptionRequest == nil {
		return localVarReturnValue, nil, reportError("bindAdministeredLicensingSubscriptionSubscriptionRequest is required and must be specified")
	}

	if r.validate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validate", r.validate, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bindAdministeredLicensingSubscriptionSubscriptionRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LicensingAPIClaimAdministeredLicensingSubscriptionSubscriptionsRequest struct {
	ctx context.Context
	ApiService *LicensingAPIService
	claimAdministeredLicensingSubscriptionSubscriptionsRequest *ClaimAdministeredLicensingSubscriptionSubscriptionsRequest
	validate *bool
}

func (r LicensingAPIClaimAdministeredLicensingSubscriptionSubscriptionsRequest) ClaimAdministeredLicensingSubscriptionSubscriptionsRequest(claimAdministeredLicensingSubscriptionSubscriptionsRequest ClaimAdministeredLicensingSubscriptionSubscriptionsRequest) LicensingAPIClaimAdministeredLicensingSubscriptionSubscriptionsRequest {
	r.claimAdministeredLicensingSubscriptionSubscriptionsRequest = &claimAdministeredLicensingSubscriptionSubscriptionsRequest
	return r
}

// Check if the provided claim key is valid and can be claimed into the organization.
func (r LicensingAPIClaimAdministeredLicensingSubscriptionSubscriptionsRequest) Validate(validate bool) LicensingAPIClaimAdministeredLicensingSubscriptionSubscriptionsRequest {
	r.validate = &validate
	return r
}

func (r LicensingAPIClaimAdministeredLicensingSubscriptionSubscriptionsRequest) Execute() (*GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner, *http.Response, error) {
	return r.ApiService.ClaimAdministeredLicensingSubscriptionSubscriptionsExecute(r)
}

/*
ClaimAdministeredLicensingSubscriptionSubscriptions Claim a subscription into an organization.

Claim a subscription into an organization.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LicensingAPIClaimAdministeredLicensingSubscriptionSubscriptionsRequest
*/
func (a *LicensingAPIService) ClaimAdministeredLicensingSubscriptionSubscriptions(ctx context.Context) LicensingAPIClaimAdministeredLicensingSubscriptionSubscriptionsRequest {
	return LicensingAPIClaimAdministeredLicensingSubscriptionSubscriptionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner
func (a *LicensingAPIService) ClaimAdministeredLicensingSubscriptionSubscriptionsExecute(r LicensingAPIClaimAdministeredLicensingSubscriptionSubscriptionsRequest) (*GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LicensingAPIService.ClaimAdministeredLicensingSubscriptionSubscriptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/administered/licensing/subscription/subscriptions/claim"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.claimAdministeredLicensingSubscriptionSubscriptionsRequest == nil {
		return localVarReturnValue, nil, reportError("claimAdministeredLicensingSubscriptionSubscriptionsRequest is required and must be specified")
	}

	if r.validate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validate", r.validate, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.claimAdministeredLicensingSubscriptionSubscriptionsRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LicensingAPIGetAdministeredLicensingSubscriptionEntitlementsRequest struct {
	ctx context.Context
	ApiService *LicensingAPIService
	skus *[]string
}

// Filter to entitlements with the specified SKUs
func (r LicensingAPIGetAdministeredLicensingSubscriptionEntitlementsRequest) Skus(skus []string) LicensingAPIGetAdministeredLicensingSubscriptionEntitlementsRequest {
	r.skus = &skus
	return r
}

func (r LicensingAPIGetAdministeredLicensingSubscriptionEntitlementsRequest) Execute() (*GetAdministeredLicensingSubscriptionEntitlements200Response, *http.Response, error) {
	return r.ApiService.GetAdministeredLicensingSubscriptionEntitlementsExecute(r)
}

/*
GetAdministeredLicensingSubscriptionEntitlements Retrieve the list of purchasable entitlements

Retrieve the list of purchasable entitlements

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LicensingAPIGetAdministeredLicensingSubscriptionEntitlementsRequest
*/
func (a *LicensingAPIService) GetAdministeredLicensingSubscriptionEntitlements(ctx context.Context) LicensingAPIGetAdministeredLicensingSubscriptionEntitlementsRequest {
	return LicensingAPIGetAdministeredLicensingSubscriptionEntitlementsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetAdministeredLicensingSubscriptionEntitlements200Response
func (a *LicensingAPIService) GetAdministeredLicensingSubscriptionEntitlementsExecute(r LicensingAPIGetAdministeredLicensingSubscriptionEntitlementsRequest) (*GetAdministeredLicensingSubscriptionEntitlements200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetAdministeredLicensingSubscriptionEntitlements200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LicensingAPIService.GetAdministeredLicensingSubscriptionEntitlements")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/administered/licensing/subscription/entitlements"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.skus != nil {
		t := *r.skus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "skus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "skus", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LicensingAPIGetAdministeredLicensingSubscriptionSubscriptionsRequest struct {
	ctx context.Context
	ApiService *LicensingAPIService
	perPage *int32
	startingAfter *string
	endingBefore *string
	subscriptionIds *[]string
	organizationIds *[]string
	statuses *[]string
	productTypes *[]string
	startDate *GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter
	endDate *GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter
}

// The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
func (r LicensingAPIGetAdministeredLicensingSubscriptionSubscriptionsRequest) PerPage(perPage int32) LicensingAPIGetAdministeredLicensingSubscriptionSubscriptionsRequest {
	r.perPage = &perPage
	return r
}

// A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
func (r LicensingAPIGetAdministeredLicensingSubscriptionSubscriptionsRequest) StartingAfter(startingAfter string) LicensingAPIGetAdministeredLicensingSubscriptionSubscriptionsRequest {
	r.startingAfter = &startingAfter
	return r
}

// A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
func (r LicensingAPIGetAdministeredLicensingSubscriptionSubscriptionsRequest) EndingBefore(endingBefore string) LicensingAPIGetAdministeredLicensingSubscriptionSubscriptionsRequest {
	r.endingBefore = &endingBefore
	return r
}

// List of subscription ids to fetch
func (r LicensingAPIGetAdministeredLicensingSubscriptionSubscriptionsRequest) SubscriptionIds(subscriptionIds []string) LicensingAPIGetAdministeredLicensingSubscriptionSubscriptionsRequest {
	r.subscriptionIds = &subscriptionIds
	return r
}

// Organizations to get associated subscriptions for
func (r LicensingAPIGetAdministeredLicensingSubscriptionSubscriptionsRequest) OrganizationIds(organizationIds []string) LicensingAPIGetAdministeredLicensingSubscriptionSubscriptionsRequest {
	r.organizationIds = &organizationIds
	return r
}

// List of statuses that returned subscriptions can have
func (r LicensingAPIGetAdministeredLicensingSubscriptionSubscriptionsRequest) Statuses(statuses []string) LicensingAPIGetAdministeredLicensingSubscriptionSubscriptionsRequest {
	r.statuses = &statuses
	return r
}

// List of product types that returned subscriptions need to have entitlements for.
func (r LicensingAPIGetAdministeredLicensingSubscriptionSubscriptionsRequest) ProductTypes(productTypes []string) LicensingAPIGetAdministeredLicensingSubscriptionSubscriptionsRequest {
	r.productTypes = &productTypes
	return r
}

// Filter subscriptions by start date, ISO 8601 format. To filter with a range of dates, use &#39;startDate[&lt;option&gt;]&#x3D;?&#39; in the request. Accepted options include lt, gt, lte, gte.
func (r LicensingAPIGetAdministeredLicensingSubscriptionSubscriptionsRequest) StartDate(startDate GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter) LicensingAPIGetAdministeredLicensingSubscriptionSubscriptionsRequest {
	r.startDate = &startDate
	return r
}

// Filter subscriptions by end date, ISO 8601 format. To filter with a range of dates, use &#39;endDate[&lt;option&gt;]&#x3D;?&#39; in the request. Accepted options include lt, gt, lte, gte.
func (r LicensingAPIGetAdministeredLicensingSubscriptionSubscriptionsRequest) EndDate(endDate GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter) LicensingAPIGetAdministeredLicensingSubscriptionSubscriptionsRequest {
	r.endDate = &endDate
	return r
}

func (r LicensingAPIGetAdministeredLicensingSubscriptionSubscriptionsRequest) Execute() ([]GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner, *http.Response, error) {
	return r.ApiService.GetAdministeredLicensingSubscriptionSubscriptionsExecute(r)
}

/*
GetAdministeredLicensingSubscriptionSubscriptions List available subscriptions

List available subscriptions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LicensingAPIGetAdministeredLicensingSubscriptionSubscriptionsRequest
*/
func (a *LicensingAPIService) GetAdministeredLicensingSubscriptionSubscriptions(ctx context.Context) LicensingAPIGetAdministeredLicensingSubscriptionSubscriptionsRequest {
	return LicensingAPIGetAdministeredLicensingSubscriptionSubscriptionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner
func (a *LicensingAPIService) GetAdministeredLicensingSubscriptionSubscriptionsExecute(r LicensingAPIGetAdministeredLicensingSubscriptionSubscriptionsRequest) ([]GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LicensingAPIService.GetAdministeredLicensingSubscriptionSubscriptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/administered/licensing/subscription/subscriptions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "perPage", r.perPage, "")
	}
	if r.startingAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startingAfter", r.startingAfter, "")
	}
	if r.endingBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endingBefore", r.endingBefore, "")
	}
	if r.subscriptionIds != nil {
		t := *r.subscriptionIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "subscriptionIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "subscriptionIds", t, "multi")
		}
	}
	if r.organizationIds != nil {
		t := *r.organizationIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "organizationIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "organizationIds", t, "multi")
		}
	}
	if r.statuses != nil {
		t := *r.statuses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "statuses", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "statuses", t, "multi")
		}
	}
	if r.productTypes != nil {
		t := *r.productTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "productTypes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "productTypes", t, "multi")
		}
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LicensingAPIGetAdministeredLicensingSubscriptionSubscriptionsComplianceStatusesRequest struct {
	ctx context.Context
	ApiService *LicensingAPIService
	organizationIds *[]string
	subscriptionIds *[]string
}

// Organizations to get subscription compliance information for
func (r LicensingAPIGetAdministeredLicensingSubscriptionSubscriptionsComplianceStatusesRequest) OrganizationIds(organizationIds []string) LicensingAPIGetAdministeredLicensingSubscriptionSubscriptionsComplianceStatusesRequest {
	r.organizationIds = &organizationIds
	return r
}

// Subscription ids
func (r LicensingAPIGetAdministeredLicensingSubscriptionSubscriptionsComplianceStatusesRequest) SubscriptionIds(subscriptionIds []string) LicensingAPIGetAdministeredLicensingSubscriptionSubscriptionsComplianceStatusesRequest {
	r.subscriptionIds = &subscriptionIds
	return r
}

func (r LicensingAPIGetAdministeredLicensingSubscriptionSubscriptionsComplianceStatusesRequest) Execute() ([]GetAdministeredLicensingSubscriptionSubscriptionsComplianceStatuses200ResponseInner, *http.Response, error) {
	return r.ApiService.GetAdministeredLicensingSubscriptionSubscriptionsComplianceStatusesExecute(r)
}

/*
GetAdministeredLicensingSubscriptionSubscriptionsComplianceStatuses Get compliance status for requested subscriptions

Get compliance status for requested subscriptions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LicensingAPIGetAdministeredLicensingSubscriptionSubscriptionsComplianceStatusesRequest
*/
func (a *LicensingAPIService) GetAdministeredLicensingSubscriptionSubscriptionsComplianceStatuses(ctx context.Context) LicensingAPIGetAdministeredLicensingSubscriptionSubscriptionsComplianceStatusesRequest {
	return LicensingAPIGetAdministeredLicensingSubscriptionSubscriptionsComplianceStatusesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []GetAdministeredLicensingSubscriptionSubscriptionsComplianceStatuses200ResponseInner
func (a *LicensingAPIService) GetAdministeredLicensingSubscriptionSubscriptionsComplianceStatusesExecute(r LicensingAPIGetAdministeredLicensingSubscriptionSubscriptionsComplianceStatusesRequest) ([]GetAdministeredLicensingSubscriptionSubscriptionsComplianceStatuses200ResponseInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []GetAdministeredLicensingSubscriptionSubscriptionsComplianceStatuses200ResponseInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LicensingAPIService.GetAdministeredLicensingSubscriptionSubscriptionsComplianceStatuses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/administered/licensing/subscription/subscriptions/compliance/statuses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.organizationIds == nil {
		return localVarReturnValue, nil, reportError("organizationIds is required and must be specified")
	}

	{
		t := *r.organizationIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "organizationIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "organizationIds", t, "multi")
		}
	}
	if r.subscriptionIds != nil {
		t := *r.subscriptionIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "subscriptionIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "subscriptionIds", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LicensingAPIGetOrganizationLicensingCotermLicensesRequest struct {
	ctx context.Context
	ApiService *LicensingAPIService
	organizationId string
	perPage *int32
	startingAfter *string
	endingBefore *string
	invalidated *bool
	expired *bool
}

// The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
func (r LicensingAPIGetOrganizationLicensingCotermLicensesRequest) PerPage(perPage int32) LicensingAPIGetOrganizationLicensingCotermLicensesRequest {
	r.perPage = &perPage
	return r
}

// A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
func (r LicensingAPIGetOrganizationLicensingCotermLicensesRequest) StartingAfter(startingAfter string) LicensingAPIGetOrganizationLicensingCotermLicensesRequest {
	r.startingAfter = &startingAfter
	return r
}

// A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
func (r LicensingAPIGetOrganizationLicensingCotermLicensesRequest) EndingBefore(endingBefore string) LicensingAPIGetOrganizationLicensingCotermLicensesRequest {
	r.endingBefore = &endingBefore
	return r
}

// Filter for licenses that are invalidated
func (r LicensingAPIGetOrganizationLicensingCotermLicensesRequest) Invalidated(invalidated bool) LicensingAPIGetOrganizationLicensingCotermLicensesRequest {
	r.invalidated = &invalidated
	return r
}

// Filter for licenses that are expired
func (r LicensingAPIGetOrganizationLicensingCotermLicensesRequest) Expired(expired bool) LicensingAPIGetOrganizationLicensingCotermLicensesRequest {
	r.expired = &expired
	return r
}

func (r LicensingAPIGetOrganizationLicensingCotermLicensesRequest) Execute() ([]GetOrganizationLicensingCotermLicenses200ResponseInner, *http.Response, error) {
	return r.ApiService.GetOrganizationLicensingCotermLicensesExecute(r)
}

/*
GetOrganizationLicensingCotermLicenses List the licenses in a coterm organization

List the licenses in a coterm organization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return LicensingAPIGetOrganizationLicensingCotermLicensesRequest
*/
func (a *LicensingAPIService) GetOrganizationLicensingCotermLicenses(ctx context.Context, organizationId string) LicensingAPIGetOrganizationLicensingCotermLicensesRequest {
	return LicensingAPIGetOrganizationLicensingCotermLicensesRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return []GetOrganizationLicensingCotermLicenses200ResponseInner
func (a *LicensingAPIService) GetOrganizationLicensingCotermLicensesExecute(r LicensingAPIGetOrganizationLicensingCotermLicensesRequest) ([]GetOrganizationLicensingCotermLicenses200ResponseInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []GetOrganizationLicensingCotermLicenses200ResponseInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LicensingAPIService.GetOrganizationLicensingCotermLicenses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/licensing/coterm/licenses"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "perPage", r.perPage, "")
	}
	if r.startingAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startingAfter", r.startingAfter, "")
	}
	if r.endingBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endingBefore", r.endingBefore, "")
	}
	if r.invalidated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "invalidated", r.invalidated, "")
	}
	if r.expired != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expired", r.expired, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LicensingAPIMoveOrganizationLicensingCotermLicensesRequest struct {
	ctx context.Context
	ApiService *LicensingAPIService
	organizationId string
	moveOrganizationLicensingCotermLicensesRequest *MoveOrganizationLicensingCotermLicensesRequest
}

func (r LicensingAPIMoveOrganizationLicensingCotermLicensesRequest) MoveOrganizationLicensingCotermLicensesRequest(moveOrganizationLicensingCotermLicensesRequest MoveOrganizationLicensingCotermLicensesRequest) LicensingAPIMoveOrganizationLicensingCotermLicensesRequest {
	r.moveOrganizationLicensingCotermLicensesRequest = &moveOrganizationLicensingCotermLicensesRequest
	return r
}

func (r LicensingAPIMoveOrganizationLicensingCotermLicensesRequest) Execute() (*MoveOrganizationLicensingCotermLicenses200Response, *http.Response, error) {
	return r.ApiService.MoveOrganizationLicensingCotermLicensesExecute(r)
}

/*
MoveOrganizationLicensingCotermLicenses Moves a license to a different organization (coterm only)

Moves a license to a different organization (coterm only)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return LicensingAPIMoveOrganizationLicensingCotermLicensesRequest
*/
func (a *LicensingAPIService) MoveOrganizationLicensingCotermLicenses(ctx context.Context, organizationId string) LicensingAPIMoveOrganizationLicensingCotermLicensesRequest {
	return LicensingAPIMoveOrganizationLicensingCotermLicensesRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return MoveOrganizationLicensingCotermLicenses200Response
func (a *LicensingAPIService) MoveOrganizationLicensingCotermLicensesExecute(r LicensingAPIMoveOrganizationLicensingCotermLicensesRequest) (*MoveOrganizationLicensingCotermLicenses200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MoveOrganizationLicensingCotermLicenses200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LicensingAPIService.MoveOrganizationLicensingCotermLicenses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/licensing/coterm/licenses/move"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.moveOrganizationLicensingCotermLicensesRequest == nil {
		return localVarReturnValue, nil, reportError("moveOrganizationLicensingCotermLicensesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.moveOrganizationLicensingCotermLicensesRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LicensingAPIValidateAdministeredLicensingSubscriptionSubscriptionsClaimKeyRequest struct {
	ctx context.Context
	ApiService *LicensingAPIService
	validateAdministeredLicensingSubscriptionSubscriptionsClaimKeyRequest *ValidateAdministeredLicensingSubscriptionSubscriptionsClaimKeyRequest
}

func (r LicensingAPIValidateAdministeredLicensingSubscriptionSubscriptionsClaimKeyRequest) ValidateAdministeredLicensingSubscriptionSubscriptionsClaimKeyRequest(validateAdministeredLicensingSubscriptionSubscriptionsClaimKeyRequest ValidateAdministeredLicensingSubscriptionSubscriptionsClaimKeyRequest) LicensingAPIValidateAdministeredLicensingSubscriptionSubscriptionsClaimKeyRequest {
	r.validateAdministeredLicensingSubscriptionSubscriptionsClaimKeyRequest = &validateAdministeredLicensingSubscriptionSubscriptionsClaimKeyRequest
	return r
}

func (r LicensingAPIValidateAdministeredLicensingSubscriptionSubscriptionsClaimKeyRequest) Execute() (*GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner, *http.Response, error) {
	return r.ApiService.ValidateAdministeredLicensingSubscriptionSubscriptionsClaimKeyExecute(r)
}

/*
ValidateAdministeredLicensingSubscriptionSubscriptionsClaimKey Find a subscription by claim key

Find a subscription by claim key. Returns 400 if the key has already been claimed.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LicensingAPIValidateAdministeredLicensingSubscriptionSubscriptionsClaimKeyRequest
*/
func (a *LicensingAPIService) ValidateAdministeredLicensingSubscriptionSubscriptionsClaimKey(ctx context.Context) LicensingAPIValidateAdministeredLicensingSubscriptionSubscriptionsClaimKeyRequest {
	return LicensingAPIValidateAdministeredLicensingSubscriptionSubscriptionsClaimKeyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner
func (a *LicensingAPIService) ValidateAdministeredLicensingSubscriptionSubscriptionsClaimKeyExecute(r LicensingAPIValidateAdministeredLicensingSubscriptionSubscriptionsClaimKeyRequest) (*GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LicensingAPIService.ValidateAdministeredLicensingSubscriptionSubscriptionsClaimKey")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/administered/licensing/subscription/subscriptions/claimKey/validate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.validateAdministeredLicensingSubscriptionSubscriptionsClaimKeyRequest == nil {
		return localVarReturnValue, nil, reportError("validateAdministeredLicensingSubscriptionSubscriptionsClaimKeyRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.validateAdministeredLicensingSubscriptionSubscriptionsClaimKeyRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
