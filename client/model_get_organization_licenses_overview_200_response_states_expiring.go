/*
Meraki Dashboard API

A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 03 July, 2024 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.48.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the GetOrganizationLicensesOverview200ResponseStatesExpiring type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetOrganizationLicensesOverview200ResponseStatesExpiring{}

// GetOrganizationLicensesOverview200ResponseStatesExpiring Data for expiring licenses
type GetOrganizationLicensesOverview200ResponseStatesExpiring struct {
	// The number of expiring licenses
	Count *int32 `json:"count,omitempty"`
	Critical *GetOrganizationLicensesOverview200ResponseStatesExpiringCritical `json:"critical,omitempty"`
	Warning *GetOrganizationLicensesOverview200ResponseStatesExpiringWarning `json:"warning,omitempty"`
}

// NewGetOrganizationLicensesOverview200ResponseStatesExpiring instantiates a new GetOrganizationLicensesOverview200ResponseStatesExpiring object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetOrganizationLicensesOverview200ResponseStatesExpiring() *GetOrganizationLicensesOverview200ResponseStatesExpiring {
	this := GetOrganizationLicensesOverview200ResponseStatesExpiring{}
	return &this
}

// NewGetOrganizationLicensesOverview200ResponseStatesExpiringWithDefaults instantiates a new GetOrganizationLicensesOverview200ResponseStatesExpiring object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetOrganizationLicensesOverview200ResponseStatesExpiringWithDefaults() *GetOrganizationLicensesOverview200ResponseStatesExpiring {
	this := GetOrganizationLicensesOverview200ResponseStatesExpiring{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *GetOrganizationLicensesOverview200ResponseStatesExpiring) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetOrganizationLicensesOverview200ResponseStatesExpiring) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *GetOrganizationLicensesOverview200ResponseStatesExpiring) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *GetOrganizationLicensesOverview200ResponseStatesExpiring) SetCount(v int32) {
	o.Count = &v
}

// GetCritical returns the Critical field value if set, zero value otherwise.
func (o *GetOrganizationLicensesOverview200ResponseStatesExpiring) GetCritical() GetOrganizationLicensesOverview200ResponseStatesExpiringCritical {
	if o == nil || IsNil(o.Critical) {
		var ret GetOrganizationLicensesOverview200ResponseStatesExpiringCritical
		return ret
	}
	return *o.Critical
}

// GetCriticalOk returns a tuple with the Critical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetOrganizationLicensesOverview200ResponseStatesExpiring) GetCriticalOk() (*GetOrganizationLicensesOverview200ResponseStatesExpiringCritical, bool) {
	if o == nil || IsNil(o.Critical) {
		return nil, false
	}
	return o.Critical, true
}

// HasCritical returns a boolean if a field has been set.
func (o *GetOrganizationLicensesOverview200ResponseStatesExpiring) HasCritical() bool {
	if o != nil && !IsNil(o.Critical) {
		return true
	}

	return false
}

// SetCritical gets a reference to the given GetOrganizationLicensesOverview200ResponseStatesExpiringCritical and assigns it to the Critical field.
func (o *GetOrganizationLicensesOverview200ResponseStatesExpiring) SetCritical(v GetOrganizationLicensesOverview200ResponseStatesExpiringCritical) {
	o.Critical = &v
}

// GetWarning returns the Warning field value if set, zero value otherwise.
func (o *GetOrganizationLicensesOverview200ResponseStatesExpiring) GetWarning() GetOrganizationLicensesOverview200ResponseStatesExpiringWarning {
	if o == nil || IsNil(o.Warning) {
		var ret GetOrganizationLicensesOverview200ResponseStatesExpiringWarning
		return ret
	}
	return *o.Warning
}

// GetWarningOk returns a tuple with the Warning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetOrganizationLicensesOverview200ResponseStatesExpiring) GetWarningOk() (*GetOrganizationLicensesOverview200ResponseStatesExpiringWarning, bool) {
	if o == nil || IsNil(o.Warning) {
		return nil, false
	}
	return o.Warning, true
}

// HasWarning returns a boolean if a field has been set.
func (o *GetOrganizationLicensesOverview200ResponseStatesExpiring) HasWarning() bool {
	if o != nil && !IsNil(o.Warning) {
		return true
	}

	return false
}

// SetWarning gets a reference to the given GetOrganizationLicensesOverview200ResponseStatesExpiringWarning and assigns it to the Warning field.
func (o *GetOrganizationLicensesOverview200ResponseStatesExpiring) SetWarning(v GetOrganizationLicensesOverview200ResponseStatesExpiringWarning) {
	o.Warning = &v
}

func (o GetOrganizationLicensesOverview200ResponseStatesExpiring) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetOrganizationLicensesOverview200ResponseStatesExpiring) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Critical) {
		toSerialize["critical"] = o.Critical
	}
	if !IsNil(o.Warning) {
		toSerialize["warning"] = o.Warning
	}
	return toSerialize, nil
}

type NullableGetOrganizationLicensesOverview200ResponseStatesExpiring struct {
	value *GetOrganizationLicensesOverview200ResponseStatesExpiring
	isSet bool
}

func (v NullableGetOrganizationLicensesOverview200ResponseStatesExpiring) Get() *GetOrganizationLicensesOverview200ResponseStatesExpiring {
	return v.value
}

func (v *NullableGetOrganizationLicensesOverview200ResponseStatesExpiring) Set(val *GetOrganizationLicensesOverview200ResponseStatesExpiring) {
	v.value = val
	v.isSet = true
}

func (v NullableGetOrganizationLicensesOverview200ResponseStatesExpiring) IsSet() bool {
	return v.isSet
}

func (v *NullableGetOrganizationLicensesOverview200ResponseStatesExpiring) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetOrganizationLicensesOverview200ResponseStatesExpiring(val *GetOrganizationLicensesOverview200ResponseStatesExpiring) *NullableGetOrganizationLicensesOverview200ResponseStatesExpiring {
	return &NullableGetOrganizationLicensesOverview200ResponseStatesExpiring{value: val, isSet: true}
}

func (v NullableGetOrganizationLicensesOverview200ResponseStatesExpiring) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetOrganizationLicensesOverview200ResponseStatesExpiring) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


