/*
Meraki Dashboard API

A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 03 July, 2024 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.48.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"encoding/json"
	"encoding/xml"
	"errors"
	"fmt"
	"io"
	"log"
	"mime/multipart"
	"net/http"
	"net/http/httputil"
	"net/url"
	"os"
	"path/filepath"
	"reflect"
	"regexp"
	"strconv"
	"strings"
	"time"
	"unicode/utf8"

)

var (
	JsonCheck       = regexp.MustCompile(`(?i:(?:application|text)/(?:[^;]+\+)?json)`)
	XmlCheck        = regexp.MustCompile(`(?i:(?:application|text)/(?:[^;]+\+)?xml)`)
	queryParamSplit = regexp.MustCompile(`(^|&)([^&]+)`)
	queryDescape    = strings.NewReplacer( "%5B", "[", "%5D", "]" )
)

// APIClient manages communication with the Meraki Dashboard API API v1.48.0
// In most cases there should be only one, shared, APIClient.
type APIClient struct {
	cfg    *Configuration
	common service // Reuse a single struct instead of allocating one for each service on the heap.

	// API Services

	AccessControlListsAPI *AccessControlListsAPIService

	AccessPoliciesAPI *AccessPoliciesAPIService

	AclsAPI *AclsAPIService

	ActionBatchesAPI *ActionBatchesAPIService

	AdaptivePolicyAPI *AdaptivePolicyAPIService

	AddressesAPI *AddressesAPIService

	AdministeredAPI *AdministeredAPIService

	AdminsAPI *AdminsAPIService

	AirMarshalAPI *AirMarshalAPIService

	AlertTypesAPI *AlertTypesAPIService

	AlertsAPI *AlertsAPIService

	AlternateManagementInterfaceAPI *AlternateManagementInterfaceAPIService

	AnalyticsAPI *AnalyticsAPIService

	ApiRequestsAPI *ApiRequestsAPIService

	ApnsCertAPI *ApnsCertAPIService

	ApplianceAPI *ApplianceAPIService

	AppliancesAPI *AppliancesAPIService

	ApplicationCategoriesAPI *ApplicationCategoriesAPIService

	ApplicationUsageAPI *ApplicationUsageAPIService

	ApplicationsAPI *ApplicationsAPIService

	AreasAPI *AreasAPIService

	ArpInspectionAPI *ArpInspectionAPIService

	ArpTableAPI *ArpTableAPIService

	ArtifactsAPI *ArtifactsAPIService

	AssetsAPI *AssetsAPIService

	AssignmentsAPI *AssignmentsAPIService

	AuthenticationTokenAPI *AuthenticationTokenAPIService

	AvailabilitiesAPI *AvailabilitiesAPIService

	BandwidthUsageHistoryAPI *BandwidthUsageHistoryAPIService

	BgpAPI *BgpAPIService

	BillingAPI *BillingAPIService

	BluetoothAPI *BluetoothAPIService

	BluetoothClientsAPI *BluetoothClientsAPIService

	BonjourForwardingAPI *BonjourForwardingAPIService

	BoundariesAPI *BoundariesAPIService

	BrandingPoliciesAPI *BrandingPoliciesAPIService

	BulkAPI *BulkAPIService

	BulkUpdateAPI *BulkUpdateAPIService

	ByBoundaryAPI *ByBoundaryAPIService

	ByClientAPI *ByClientAPIService

	ByDeviceAPI *ByDeviceAPIService

	ByEnergyUsageAPI *ByEnergyUsageAPIService

	ByIntervalAPI *ByIntervalAPIService

	ByMetricAPI *ByMetricAPIService

	ByModelAPI *ByModelAPIService

	ByNetworkAPI *ByNetworkAPIService

	ByStatusAPI *ByStatusAPIService

	BySwitchAPI *BySwitchAPIService

	ByTypeAPI *ByTypeAPIService

	ByUsageAPI *ByUsageAPIService

	ByUtilizationAPI *ByUtilizationAPIService

	BypassActivationLockAttemptsAPI *BypassActivationLockAttemptsAPIService

	CableTestAPI *CableTestAPIService

	CallbacksAPI *CallbacksAPIService

	CameraAPI *CameraAPIService

	CategoriesAPI *CategoriesAPIService

	CellularAPI *CellularAPIService

	CellularFirewallRulesAPI *CellularFirewallRulesAPIService

	CellularGatewayAPI *CellularGatewayAPIService

	CellularUsageHistoryAPI *CellularUsageHistoryAPIService

	CertsAPI *CertsAPIService

	ChangeHistoryAPI *ChangeHistoryAPIService

	ChannelUtilizationAPI *ChannelUtilizationAPIService

	ChannelUtilizationHistoryAPI *ChannelUtilizationHistoryAPIService

	ClaimAPI *ClaimAPIService

	ClaimKeyAPI *ClaimKeyAPIService

	ClientCountHistoryAPI *ClientCountHistoryAPIService

	ClientsAPI *ClientsAPIService

	CloudMonitoringAPI *CloudMonitoringAPIService

	CommandsAPI *CommandsAPIService

	ComplianceAPI *ComplianceAPIService

	ConfigTemplatesAPI *ConfigTemplatesAPIService

	ConfigurationChangesAPI *ConfigurationChangesAPIService

	ConfigureAPI *ConfigureAPIService

	ConfiguredDevicesAPI *ConfiguredDevicesAPIService

	ConnectionStatsAPI *ConnectionStatsAPIService

	ConnectivityAPI *ConnectivityAPIService

	ConnectivityEventsAPI *ConnectivityEventsAPIService

	ConnectivityMonitoringDestinationsAPI *ConnectivityMonitoringDestinationsAPIService

	ContentFilteringAPI *ContentFilteringAPIService

	CotermAPI *CotermAPIService

	CurrentAPI *CurrentAPIService

	CustomAnalyticsAPI *CustomAnalyticsAPIService

	CustomPerformanceClassesAPI *CustomPerformanceClassesAPIService

	DataRateHistoryAPI *DataRateHistoryAPIService

	DelegatedAPI *DelegatedAPIService

	DesktopLogsAPI *DesktopLogsAPIService

	DetailsAPI *DetailsAPIService

	DetectionsAPI *DetectionsAPIService

	DeviceCommandLogsAPI *DeviceCommandLogsAPIService

	DeviceProfilesAPI *DeviceProfilesAPIService

	DeviceTypeGroupPoliciesAPI *DeviceTypeGroupPoliciesAPIService

	DevicesAPI *DevicesAPIService

	DhcpAPI *DhcpAPIService

	DhcpServerPolicyAPI *DhcpServerPolicyAPIService

	DscpTaggingOptionsAPI *DscpTaggingOptionsAPIService

	DscpToCosMappingsAPI *DscpToCosMappingsAPIService

	EapOverrideAPI *EapOverrideAPIService

	EarlyAccessAPI *EarlyAccessAPIService

	ElectronicShelfLabelAPI *ElectronicShelfLabelAPIService

	EntitlementsAPI *EntitlementsAPIService

	EthernetAPI *EthernetAPIService

	EventTypesAPI *EventTypesAPIService

	EventsAPI *EventsAPIService

	ExportEventsAPI *ExportEventsAPIService

	FailedConnectionsAPI *FailedConnectionsAPIService

	FeaturesAPI *FeaturesAPIService

	FieldsAPI *FieldsAPIService

	FirewallAPI *FirewallAPIService

	FirewalledServicesAPI *FirewalledServicesAPIService

	FirmwareAPI *FirmwareAPIService

	FirmwareUpgradesAPI *FirmwareUpgradesAPIService

	FloorPlansAPI *FloorPlansAPIService

	GroupPoliciesAPI *GroupPoliciesAPIService

	GroupsAPI *GroupsAPIService

	HealthAPI *HealthAPIService

	HealthByTimeAPI *HealthByTimeAPIService

	HistoricalAPI *HistoricalAPIService

	HistoryAPI *HistoryAPIService

	Hotspot20API *Hotspot20APIService

	HttpServersAPI *HttpServersAPIService

	IdentitiesAPI *IdentitiesAPIService

	IdentityPsksAPI *IdentityPsksAPIService

	IdpsAPI *IdpsAPIService

	ImportsAPI *ImportsAPIService

	InboundCellularFirewallRulesAPI *InboundCellularFirewallRulesAPIService

	InboundFirewallRulesAPI *InboundFirewallRulesAPIService

	InsightAPI *InsightAPIService

	InterfacesAPI *InterfacesAPIService

	InternetPoliciesAPI *InternetPoliciesAPIService

	IntrusionAPI *IntrusionAPIService

	InventoryAPI *InventoryAPIService

	Ipv6API *Ipv6APIService

	L3FirewallRulesAPI *L3FirewallRulesAPIService

	L7FirewallRulesAPI *L7FirewallRulesAPIService

	LanAPI *LanAPIService

	LatencyHistoryAPI *LatencyHistoryAPIService

	LatencyStatsAPI *LatencyStatsAPIService

	LatestAPI *LatestAPIService

	LicensesAPI *LicensesAPIService

	LicensingAPI *LicensingAPIService

	LinesAPI *LinesAPIService

	LinkAggregationsAPI *LinkAggregationsAPIService

	LinkLayerAPI *LinkLayerAPIService

	LiveAPI *LiveAPIService

	LiveToolsAPI *LiveToolsAPIService

	LldpCdpAPI *LldpCdpAPIService

	LoginSecurityAPI *LoginSecurityAPIService

	LogsAPI *LogsAPIService

	LossAndLatencyHistoryAPI *LossAndLatencyHistoryAPIService

	MalwareAPI *MalwareAPIService

	ManagementInterfaceAPI *ManagementInterfaceAPIService

	ManufacturersAPI *ManufacturersAPIService

	MeAPI *MeAPIService

	MerakiAuthUsersAPI *MerakiAuthUsersAPIService

	MeshStatusesAPI *MeshStatusesAPIService

	ModelsAPI *ModelsAPIService

	MonitorAPI *MonitorAPIService

	MonitoredMediaServersAPI *MonitoredMediaServersAPIService

	MqttBrokersAPI *MqttBrokersAPIService

	MtuAPI *MtuAPIService

	MulticastAPI *MulticastAPIService

	NetflowAPI *NetflowAPIService

	NetworkAdaptersAPI *NetworkAdaptersAPIService

	NetworkHealthAPI *NetworkHealthAPIService

	NetworksAPI *NetworksAPIService

	ObjectDetectionModelsAPI *ObjectDetectionModelsAPIService

	OnboardingAPI *OnboardingAPIService

	OneToManyNatRulesAPI *OneToManyNatRulesAPIService

	OneToOneNatRulesAPI *OneToOneNatRulesAPIService

	OpenapiSpecAPI *OpenapiSpecAPIService

	OptInsAPI *OptInsAPIService

	OrderAPI *OrderAPIService

	OrganizationsAPI *OrganizationsAPIService

	OspfAPI *OspfAPIService

	OverviewAPI *OverviewAPIService

	PacketLossAPI *PacketLossAPIService

	PacketsAPI *PacketsAPIService

	PayloadTemplatesAPI *PayloadTemplatesAPIService

	PerformanceAPI *PerformanceAPIService

	PerformanceHistoryAPI *PerformanceHistoryAPIService

	PermissionsAPI *PermissionsAPIService

	PiiAPI *PiiAPIService

	PiiKeysAPI *PiiKeysAPIService

	PingAPI *PingAPIService

	PingDeviceAPI *PingDeviceAPIService

	PoliciesAPI *PoliciesAPIService

	PolicyAPI *PolicyAPIService

	PolicyObjectsAPI *PolicyObjectsAPIService

	PortForwardingRulesAPI *PortForwardingRulesAPIService

	PortSchedulesAPI *PortSchedulesAPIService

	PortsAPI *PortsAPIService

	PowerAPI *PowerAPIService

	PowerModulesAPI *PowerModulesAPIService

	PrefixesAPI *PrefixesAPIService

	PrepareAPI *PrepareAPIService

	PrioritiesAPI *PrioritiesAPIService

	ProfilesAPI *ProfilesAPIService

	ProvisioningAPI *ProvisioningAPIService

	QosRulesAPI *QosRulesAPIService

	QualityAndRetentionAPI *QualityAndRetentionAPIService

	QualityRetentionProfilesAPI *QualityRetentionProfilesAPIService

	RadioAPI *RadioAPIService

	ReadingsAPI *ReadingsAPIService

	RecentAPI *RecentAPIService

	RelationshipsAPI *RelationshipsAPIService

	RendezvousPointsAPI *RendezvousPointsAPIService

	RequestsAPI *RequestsAPIService

	ResponseCodesAPI *ResponseCodesAPIService

	RestrictionsAPI *RestrictionsAPIService

	RfProfilesAPI *RfProfilesAPIService

	RolesAPI *RolesAPIService

	RollbacksAPI *RollbacksAPIService

	RoutingAPI *RoutingAPIService

	RulesAPI *RulesAPIService

	SamlAPI *SamlAPIService

	SamlRolesAPI *SamlRolesAPIService

	SchedulesAPI *SchedulesAPIService

	SdwanAPI *SdwanAPIService

	SearchAPI *SearchAPIService

	SecurityAPI *SecurityAPIService

	SecurityCentersAPI *SecurityCentersAPIService

	SeenAPI *SeenAPIService

	SenseAPI *SenseAPIService

	SensorAPI *SensorAPIService

	SentryAPI *SentryAPIService

	ServersAPI *ServersAPIService

	SettingsAPI *SettingsAPIService

	SignalQualityHistoryAPI *SignalQualityHistoryAPIService

	SimsAPI *SimsAPIService

	SingleLanAPI *SingleLanAPIService

	SiteToSiteVpnAPI *SiteToSiteVpnAPIService

	SmAPI *SmAPIService

	SmDevicesForKeyAPI *SmDevicesForKeyAPIService

	SmOwnersForKeyAPI *SmOwnersForKeyAPIService

	SnmpAPI *SnmpAPIService

	SoftwaresAPI *SoftwaresAPIService

	SplashAPI *SplashAPIService

	SplashAuthorizationStatusAPI *SplashAuthorizationStatusAPIService

	SplashLoginAttemptsAPI *SplashLoginAttemptsAPIService

	SsidsAPI *SsidsAPIService

	StacksAPI *StacksAPIService

	StagedAPI *StagedAPIService

	StagesAPI *StagesAPIService

	StaticRoutesAPI *StaticRoutesAPIService

	StaticsAPI *StaticsAPIService

	StatsAPI *StatsAPIService

	StatusAPI *StatusAPIService

	StatusesAPI *StatusesAPIService

	StormControlAPI *StormControlAPIService

	StpAPI *StpAPIService

	SubnetPoolAPI *SubnetPoolAPIService

	SubnetsAPI *SubnetsAPIService

	SubscriptionAPI *SubscriptionAPIService

	SubscriptionsAPI *SubscriptionsAPIService

	SummaryAPI *SummaryAPIService

	SwapsAPI *SwapsAPIService

	SwitchAPI *SwitchAPIService

	SwitchesAPI *SwitchesAPIService

	SyslogServersAPI *SyslogServersAPIService

	TargetGroupsAPI *TargetGroupsAPIService

	ThemesAPI *ThemesAPIService

	ThirdPartyVPNPeersAPI *ThirdPartyVPNPeersAPIService

	ThroughputTestAPI *ThroughputTestAPIService

	TopAPI *TopAPIService

	TopologyAPI *TopologyAPIService

	TrafficAPI *TrafficAPIService

	TrafficAnalysisAPI *TrafficAnalysisAPIService

	TrafficHistoryAPI *TrafficHistoryAPIService

	TrafficShapingAPI *TrafficShapingAPIService

	TrustedAccessConfigsAPI *TrustedAccessConfigsAPIService

	TrustedServersAPI *TrustedServersAPIService

	UpgradesAPI *UpgradesAPIService

	UplinkAPI *UplinkAPIService

	UplinkBandwidthAPI *UplinkBandwidthAPIService

	UplinkSelectionAPI *UplinkSelectionAPIService

	UplinksAPI *UplinksAPIService

	UplinksLossAndLatencyAPI *UplinksLossAndLatencyAPIService

	UsageAPI *UsageAPIService

	UsageHistoriesAPI *UsageHistoriesAPIService

	UsageHistoryAPI *UsageHistoryAPIService

	UserAccessDevicesAPI *UserAccessDevicesAPIService

	UsersAPI *UsersAPIService

	V4API *V4APIService

	VideoAPI *VideoAPIService

	VideoLinkAPI *VideoLinkAPIService

	VlanAssignmentsAPI *VlanAssignmentsAPIService

	VlanProfilesAPI *VlanProfilesAPIService

	VlansAPI *VlansAPIService

	VmxAPI *VmxAPIService

	VpnAPI *VpnAPIService

	VpnExclusionsAPI *VpnExclusionsAPIService

	VpnFirewallRulesAPI *VpnFirewallRulesAPIService

	VppAccountsAPI *VppAccountsAPIService

	WakeOnLanAPI *WakeOnLanAPIService

	WarmSpareAPI *WarmSpareAPIService

	WarningsAPI *WarningsAPIService

	WebhookTestsAPI *WebhookTestsAPIService

	WebhooksAPI *WebhooksAPIService

	WirelessAPI *WirelessAPIService

	WirelessProfilesAPI *WirelessProfilesAPIService

	WlanListsAPI *WlanListsAPIService

	ZonesAPI *ZonesAPIService
}

type service struct {
	client *APIClient
}

// NewAPIClient creates a new API client. Requires a userAgent string describing your application.
// optionally a custom http.Client to allow for advanced features such as caching.
func NewAPIClient(cfg *Configuration) *APIClient {
	if cfg.HTTPClient == nil {
		cfg.HTTPClient = http.DefaultClient
	}

	c := &APIClient{}
	c.cfg = cfg
	c.common.client = c

	// API Services
	c.AccessControlListsAPI = (*AccessControlListsAPIService)(&c.common)
	c.AccessPoliciesAPI = (*AccessPoliciesAPIService)(&c.common)
	c.AclsAPI = (*AclsAPIService)(&c.common)
	c.ActionBatchesAPI = (*ActionBatchesAPIService)(&c.common)
	c.AdaptivePolicyAPI = (*AdaptivePolicyAPIService)(&c.common)
	c.AddressesAPI = (*AddressesAPIService)(&c.common)
	c.AdministeredAPI = (*AdministeredAPIService)(&c.common)
	c.AdminsAPI = (*AdminsAPIService)(&c.common)
	c.AirMarshalAPI = (*AirMarshalAPIService)(&c.common)
	c.AlertTypesAPI = (*AlertTypesAPIService)(&c.common)
	c.AlertsAPI = (*AlertsAPIService)(&c.common)
	c.AlternateManagementInterfaceAPI = (*AlternateManagementInterfaceAPIService)(&c.common)
	c.AnalyticsAPI = (*AnalyticsAPIService)(&c.common)
	c.ApiRequestsAPI = (*ApiRequestsAPIService)(&c.common)
	c.ApnsCertAPI = (*ApnsCertAPIService)(&c.common)
	c.ApplianceAPI = (*ApplianceAPIService)(&c.common)
	c.AppliancesAPI = (*AppliancesAPIService)(&c.common)
	c.ApplicationCategoriesAPI = (*ApplicationCategoriesAPIService)(&c.common)
	c.ApplicationUsageAPI = (*ApplicationUsageAPIService)(&c.common)
	c.ApplicationsAPI = (*ApplicationsAPIService)(&c.common)
	c.AreasAPI = (*AreasAPIService)(&c.common)
	c.ArpInspectionAPI = (*ArpInspectionAPIService)(&c.common)
	c.ArpTableAPI = (*ArpTableAPIService)(&c.common)
	c.ArtifactsAPI = (*ArtifactsAPIService)(&c.common)
	c.AssetsAPI = (*AssetsAPIService)(&c.common)
	c.AssignmentsAPI = (*AssignmentsAPIService)(&c.common)
	c.AuthenticationTokenAPI = (*AuthenticationTokenAPIService)(&c.common)
	c.AvailabilitiesAPI = (*AvailabilitiesAPIService)(&c.common)
	c.BandwidthUsageHistoryAPI = (*BandwidthUsageHistoryAPIService)(&c.common)
	c.BgpAPI = (*BgpAPIService)(&c.common)
	c.BillingAPI = (*BillingAPIService)(&c.common)
	c.BluetoothAPI = (*BluetoothAPIService)(&c.common)
	c.BluetoothClientsAPI = (*BluetoothClientsAPIService)(&c.common)
	c.BonjourForwardingAPI = (*BonjourForwardingAPIService)(&c.common)
	c.BoundariesAPI = (*BoundariesAPIService)(&c.common)
	c.BrandingPoliciesAPI = (*BrandingPoliciesAPIService)(&c.common)
	c.BulkAPI = (*BulkAPIService)(&c.common)
	c.BulkUpdateAPI = (*BulkUpdateAPIService)(&c.common)
	c.ByBoundaryAPI = (*ByBoundaryAPIService)(&c.common)
	c.ByClientAPI = (*ByClientAPIService)(&c.common)
	c.ByDeviceAPI = (*ByDeviceAPIService)(&c.common)
	c.ByEnergyUsageAPI = (*ByEnergyUsageAPIService)(&c.common)
	c.ByIntervalAPI = (*ByIntervalAPIService)(&c.common)
	c.ByMetricAPI = (*ByMetricAPIService)(&c.common)
	c.ByModelAPI = (*ByModelAPIService)(&c.common)
	c.ByNetworkAPI = (*ByNetworkAPIService)(&c.common)
	c.ByStatusAPI = (*ByStatusAPIService)(&c.common)
	c.BySwitchAPI = (*BySwitchAPIService)(&c.common)
	c.ByTypeAPI = (*ByTypeAPIService)(&c.common)
	c.ByUsageAPI = (*ByUsageAPIService)(&c.common)
	c.ByUtilizationAPI = (*ByUtilizationAPIService)(&c.common)
	c.BypassActivationLockAttemptsAPI = (*BypassActivationLockAttemptsAPIService)(&c.common)
	c.CableTestAPI = (*CableTestAPIService)(&c.common)
	c.CallbacksAPI = (*CallbacksAPIService)(&c.common)
	c.CameraAPI = (*CameraAPIService)(&c.common)
	c.CategoriesAPI = (*CategoriesAPIService)(&c.common)
	c.CellularAPI = (*CellularAPIService)(&c.common)
	c.CellularFirewallRulesAPI = (*CellularFirewallRulesAPIService)(&c.common)
	c.CellularGatewayAPI = (*CellularGatewayAPIService)(&c.common)
	c.CellularUsageHistoryAPI = (*CellularUsageHistoryAPIService)(&c.common)
	c.CertsAPI = (*CertsAPIService)(&c.common)
	c.ChangeHistoryAPI = (*ChangeHistoryAPIService)(&c.common)
	c.ChannelUtilizationAPI = (*ChannelUtilizationAPIService)(&c.common)
	c.ChannelUtilizationHistoryAPI = (*ChannelUtilizationHistoryAPIService)(&c.common)
	c.ClaimAPI = (*ClaimAPIService)(&c.common)
	c.ClaimKeyAPI = (*ClaimKeyAPIService)(&c.common)
	c.ClientCountHistoryAPI = (*ClientCountHistoryAPIService)(&c.common)
	c.ClientsAPI = (*ClientsAPIService)(&c.common)
	c.CloudMonitoringAPI = (*CloudMonitoringAPIService)(&c.common)
	c.CommandsAPI = (*CommandsAPIService)(&c.common)
	c.ComplianceAPI = (*ComplianceAPIService)(&c.common)
	c.ConfigTemplatesAPI = (*ConfigTemplatesAPIService)(&c.common)
	c.ConfigurationChangesAPI = (*ConfigurationChangesAPIService)(&c.common)
	c.ConfigureAPI = (*ConfigureAPIService)(&c.common)
	c.ConfiguredDevicesAPI = (*ConfiguredDevicesAPIService)(&c.common)
	c.ConnectionStatsAPI = (*ConnectionStatsAPIService)(&c.common)
	c.ConnectivityAPI = (*ConnectivityAPIService)(&c.common)
	c.ConnectivityEventsAPI = (*ConnectivityEventsAPIService)(&c.common)
	c.ConnectivityMonitoringDestinationsAPI = (*ConnectivityMonitoringDestinationsAPIService)(&c.common)
	c.ContentFilteringAPI = (*ContentFilteringAPIService)(&c.common)
	c.CotermAPI = (*CotermAPIService)(&c.common)
	c.CurrentAPI = (*CurrentAPIService)(&c.common)
	c.CustomAnalyticsAPI = (*CustomAnalyticsAPIService)(&c.common)
	c.CustomPerformanceClassesAPI = (*CustomPerformanceClassesAPIService)(&c.common)
	c.DataRateHistoryAPI = (*DataRateHistoryAPIService)(&c.common)
	c.DelegatedAPI = (*DelegatedAPIService)(&c.common)
	c.DesktopLogsAPI = (*DesktopLogsAPIService)(&c.common)
	c.DetailsAPI = (*DetailsAPIService)(&c.common)
	c.DetectionsAPI = (*DetectionsAPIService)(&c.common)
	c.DeviceCommandLogsAPI = (*DeviceCommandLogsAPIService)(&c.common)
	c.DeviceProfilesAPI = (*DeviceProfilesAPIService)(&c.common)
	c.DeviceTypeGroupPoliciesAPI = (*DeviceTypeGroupPoliciesAPIService)(&c.common)
	c.DevicesAPI = (*DevicesAPIService)(&c.common)
	c.DhcpAPI = (*DhcpAPIService)(&c.common)
	c.DhcpServerPolicyAPI = (*DhcpServerPolicyAPIService)(&c.common)
	c.DscpTaggingOptionsAPI = (*DscpTaggingOptionsAPIService)(&c.common)
	c.DscpToCosMappingsAPI = (*DscpToCosMappingsAPIService)(&c.common)
	c.EapOverrideAPI = (*EapOverrideAPIService)(&c.common)
	c.EarlyAccessAPI = (*EarlyAccessAPIService)(&c.common)
	c.ElectronicShelfLabelAPI = (*ElectronicShelfLabelAPIService)(&c.common)
	c.EntitlementsAPI = (*EntitlementsAPIService)(&c.common)
	c.EthernetAPI = (*EthernetAPIService)(&c.common)
	c.EventTypesAPI = (*EventTypesAPIService)(&c.common)
	c.EventsAPI = (*EventsAPIService)(&c.common)
	c.ExportEventsAPI = (*ExportEventsAPIService)(&c.common)
	c.FailedConnectionsAPI = (*FailedConnectionsAPIService)(&c.common)
	c.FeaturesAPI = (*FeaturesAPIService)(&c.common)
	c.FieldsAPI = (*FieldsAPIService)(&c.common)
	c.FirewallAPI = (*FirewallAPIService)(&c.common)
	c.FirewalledServicesAPI = (*FirewalledServicesAPIService)(&c.common)
	c.FirmwareAPI = (*FirmwareAPIService)(&c.common)
	c.FirmwareUpgradesAPI = (*FirmwareUpgradesAPIService)(&c.common)
	c.FloorPlansAPI = (*FloorPlansAPIService)(&c.common)
	c.GroupPoliciesAPI = (*GroupPoliciesAPIService)(&c.common)
	c.GroupsAPI = (*GroupsAPIService)(&c.common)
	c.HealthAPI = (*HealthAPIService)(&c.common)
	c.HealthByTimeAPI = (*HealthByTimeAPIService)(&c.common)
	c.HistoricalAPI = (*HistoricalAPIService)(&c.common)
	c.HistoryAPI = (*HistoryAPIService)(&c.common)
	c.Hotspot20API = (*Hotspot20APIService)(&c.common)
	c.HttpServersAPI = (*HttpServersAPIService)(&c.common)
	c.IdentitiesAPI = (*IdentitiesAPIService)(&c.common)
	c.IdentityPsksAPI = (*IdentityPsksAPIService)(&c.common)
	c.IdpsAPI = (*IdpsAPIService)(&c.common)
	c.ImportsAPI = (*ImportsAPIService)(&c.common)
	c.InboundCellularFirewallRulesAPI = (*InboundCellularFirewallRulesAPIService)(&c.common)
	c.InboundFirewallRulesAPI = (*InboundFirewallRulesAPIService)(&c.common)
	c.InsightAPI = (*InsightAPIService)(&c.common)
	c.InterfacesAPI = (*InterfacesAPIService)(&c.common)
	c.InternetPoliciesAPI = (*InternetPoliciesAPIService)(&c.common)
	c.IntrusionAPI = (*IntrusionAPIService)(&c.common)
	c.InventoryAPI = (*InventoryAPIService)(&c.common)
	c.Ipv6API = (*Ipv6APIService)(&c.common)
	c.L3FirewallRulesAPI = (*L3FirewallRulesAPIService)(&c.common)
	c.L7FirewallRulesAPI = (*L7FirewallRulesAPIService)(&c.common)
	c.LanAPI = (*LanAPIService)(&c.common)
	c.LatencyHistoryAPI = (*LatencyHistoryAPIService)(&c.common)
	c.LatencyStatsAPI = (*LatencyStatsAPIService)(&c.common)
	c.LatestAPI = (*LatestAPIService)(&c.common)
	c.LicensesAPI = (*LicensesAPIService)(&c.common)
	c.LicensingAPI = (*LicensingAPIService)(&c.common)
	c.LinesAPI = (*LinesAPIService)(&c.common)
	c.LinkAggregationsAPI = (*LinkAggregationsAPIService)(&c.common)
	c.LinkLayerAPI = (*LinkLayerAPIService)(&c.common)
	c.LiveAPI = (*LiveAPIService)(&c.common)
	c.LiveToolsAPI = (*LiveToolsAPIService)(&c.common)
	c.LldpCdpAPI = (*LldpCdpAPIService)(&c.common)
	c.LoginSecurityAPI = (*LoginSecurityAPIService)(&c.common)
	c.LogsAPI = (*LogsAPIService)(&c.common)
	c.LossAndLatencyHistoryAPI = (*LossAndLatencyHistoryAPIService)(&c.common)
	c.MalwareAPI = (*MalwareAPIService)(&c.common)
	c.ManagementInterfaceAPI = (*ManagementInterfaceAPIService)(&c.common)
	c.ManufacturersAPI = (*ManufacturersAPIService)(&c.common)
	c.MeAPI = (*MeAPIService)(&c.common)
	c.MerakiAuthUsersAPI = (*MerakiAuthUsersAPIService)(&c.common)
	c.MeshStatusesAPI = (*MeshStatusesAPIService)(&c.common)
	c.ModelsAPI = (*ModelsAPIService)(&c.common)
	c.MonitorAPI = (*MonitorAPIService)(&c.common)
	c.MonitoredMediaServersAPI = (*MonitoredMediaServersAPIService)(&c.common)
	c.MqttBrokersAPI = (*MqttBrokersAPIService)(&c.common)
	c.MtuAPI = (*MtuAPIService)(&c.common)
	c.MulticastAPI = (*MulticastAPIService)(&c.common)
	c.NetflowAPI = (*NetflowAPIService)(&c.common)
	c.NetworkAdaptersAPI = (*NetworkAdaptersAPIService)(&c.common)
	c.NetworkHealthAPI = (*NetworkHealthAPIService)(&c.common)
	c.NetworksAPI = (*NetworksAPIService)(&c.common)
	c.ObjectDetectionModelsAPI = (*ObjectDetectionModelsAPIService)(&c.common)
	c.OnboardingAPI = (*OnboardingAPIService)(&c.common)
	c.OneToManyNatRulesAPI = (*OneToManyNatRulesAPIService)(&c.common)
	c.OneToOneNatRulesAPI = (*OneToOneNatRulesAPIService)(&c.common)
	c.OpenapiSpecAPI = (*OpenapiSpecAPIService)(&c.common)
	c.OptInsAPI = (*OptInsAPIService)(&c.common)
	c.OrderAPI = (*OrderAPIService)(&c.common)
	c.OrganizationsAPI = (*OrganizationsAPIService)(&c.common)
	c.OspfAPI = (*OspfAPIService)(&c.common)
	c.OverviewAPI = (*OverviewAPIService)(&c.common)
	c.PacketLossAPI = (*PacketLossAPIService)(&c.common)
	c.PacketsAPI = (*PacketsAPIService)(&c.common)
	c.PayloadTemplatesAPI = (*PayloadTemplatesAPIService)(&c.common)
	c.PerformanceAPI = (*PerformanceAPIService)(&c.common)
	c.PerformanceHistoryAPI = (*PerformanceHistoryAPIService)(&c.common)
	c.PermissionsAPI = (*PermissionsAPIService)(&c.common)
	c.PiiAPI = (*PiiAPIService)(&c.common)
	c.PiiKeysAPI = (*PiiKeysAPIService)(&c.common)
	c.PingAPI = (*PingAPIService)(&c.common)
	c.PingDeviceAPI = (*PingDeviceAPIService)(&c.common)
	c.PoliciesAPI = (*PoliciesAPIService)(&c.common)
	c.PolicyAPI = (*PolicyAPIService)(&c.common)
	c.PolicyObjectsAPI = (*PolicyObjectsAPIService)(&c.common)
	c.PortForwardingRulesAPI = (*PortForwardingRulesAPIService)(&c.common)
	c.PortSchedulesAPI = (*PortSchedulesAPIService)(&c.common)
	c.PortsAPI = (*PortsAPIService)(&c.common)
	c.PowerAPI = (*PowerAPIService)(&c.common)
	c.PowerModulesAPI = (*PowerModulesAPIService)(&c.common)
	c.PrefixesAPI = (*PrefixesAPIService)(&c.common)
	c.PrepareAPI = (*PrepareAPIService)(&c.common)
	c.PrioritiesAPI = (*PrioritiesAPIService)(&c.common)
	c.ProfilesAPI = (*ProfilesAPIService)(&c.common)
	c.ProvisioningAPI = (*ProvisioningAPIService)(&c.common)
	c.QosRulesAPI = (*QosRulesAPIService)(&c.common)
	c.QualityAndRetentionAPI = (*QualityAndRetentionAPIService)(&c.common)
	c.QualityRetentionProfilesAPI = (*QualityRetentionProfilesAPIService)(&c.common)
	c.RadioAPI = (*RadioAPIService)(&c.common)
	c.ReadingsAPI = (*ReadingsAPIService)(&c.common)
	c.RecentAPI = (*RecentAPIService)(&c.common)
	c.RelationshipsAPI = (*RelationshipsAPIService)(&c.common)
	c.RendezvousPointsAPI = (*RendezvousPointsAPIService)(&c.common)
	c.RequestsAPI = (*RequestsAPIService)(&c.common)
	c.ResponseCodesAPI = (*ResponseCodesAPIService)(&c.common)
	c.RestrictionsAPI = (*RestrictionsAPIService)(&c.common)
	c.RfProfilesAPI = (*RfProfilesAPIService)(&c.common)
	c.RolesAPI = (*RolesAPIService)(&c.common)
	c.RollbacksAPI = (*RollbacksAPIService)(&c.common)
	c.RoutingAPI = (*RoutingAPIService)(&c.common)
	c.RulesAPI = (*RulesAPIService)(&c.common)
	c.SamlAPI = (*SamlAPIService)(&c.common)
	c.SamlRolesAPI = (*SamlRolesAPIService)(&c.common)
	c.SchedulesAPI = (*SchedulesAPIService)(&c.common)
	c.SdwanAPI = (*SdwanAPIService)(&c.common)
	c.SearchAPI = (*SearchAPIService)(&c.common)
	c.SecurityAPI = (*SecurityAPIService)(&c.common)
	c.SecurityCentersAPI = (*SecurityCentersAPIService)(&c.common)
	c.SeenAPI = (*SeenAPIService)(&c.common)
	c.SenseAPI = (*SenseAPIService)(&c.common)
	c.SensorAPI = (*SensorAPIService)(&c.common)
	c.SentryAPI = (*SentryAPIService)(&c.common)
	c.ServersAPI = (*ServersAPIService)(&c.common)
	c.SettingsAPI = (*SettingsAPIService)(&c.common)
	c.SignalQualityHistoryAPI = (*SignalQualityHistoryAPIService)(&c.common)
	c.SimsAPI = (*SimsAPIService)(&c.common)
	c.SingleLanAPI = (*SingleLanAPIService)(&c.common)
	c.SiteToSiteVpnAPI = (*SiteToSiteVpnAPIService)(&c.common)
	c.SmAPI = (*SmAPIService)(&c.common)
	c.SmDevicesForKeyAPI = (*SmDevicesForKeyAPIService)(&c.common)
	c.SmOwnersForKeyAPI = (*SmOwnersForKeyAPIService)(&c.common)
	c.SnmpAPI = (*SnmpAPIService)(&c.common)
	c.SoftwaresAPI = (*SoftwaresAPIService)(&c.common)
	c.SplashAPI = (*SplashAPIService)(&c.common)
	c.SplashAuthorizationStatusAPI = (*SplashAuthorizationStatusAPIService)(&c.common)
	c.SplashLoginAttemptsAPI = (*SplashLoginAttemptsAPIService)(&c.common)
	c.SsidsAPI = (*SsidsAPIService)(&c.common)
	c.StacksAPI = (*StacksAPIService)(&c.common)
	c.StagedAPI = (*StagedAPIService)(&c.common)
	c.StagesAPI = (*StagesAPIService)(&c.common)
	c.StaticRoutesAPI = (*StaticRoutesAPIService)(&c.common)
	c.StaticsAPI = (*StaticsAPIService)(&c.common)
	c.StatsAPI = (*StatsAPIService)(&c.common)
	c.StatusAPI = (*StatusAPIService)(&c.common)
	c.StatusesAPI = (*StatusesAPIService)(&c.common)
	c.StormControlAPI = (*StormControlAPIService)(&c.common)
	c.StpAPI = (*StpAPIService)(&c.common)
	c.SubnetPoolAPI = (*SubnetPoolAPIService)(&c.common)
	c.SubnetsAPI = (*SubnetsAPIService)(&c.common)
	c.SubscriptionAPI = (*SubscriptionAPIService)(&c.common)
	c.SubscriptionsAPI = (*SubscriptionsAPIService)(&c.common)
	c.SummaryAPI = (*SummaryAPIService)(&c.common)
	c.SwapsAPI = (*SwapsAPIService)(&c.common)
	c.SwitchAPI = (*SwitchAPIService)(&c.common)
	c.SwitchesAPI = (*SwitchesAPIService)(&c.common)
	c.SyslogServersAPI = (*SyslogServersAPIService)(&c.common)
	c.TargetGroupsAPI = (*TargetGroupsAPIService)(&c.common)
	c.ThemesAPI = (*ThemesAPIService)(&c.common)
	c.ThirdPartyVPNPeersAPI = (*ThirdPartyVPNPeersAPIService)(&c.common)
	c.ThroughputTestAPI = (*ThroughputTestAPIService)(&c.common)
	c.TopAPI = (*TopAPIService)(&c.common)
	c.TopologyAPI = (*TopologyAPIService)(&c.common)
	c.TrafficAPI = (*TrafficAPIService)(&c.common)
	c.TrafficAnalysisAPI = (*TrafficAnalysisAPIService)(&c.common)
	c.TrafficHistoryAPI = (*TrafficHistoryAPIService)(&c.common)
	c.TrafficShapingAPI = (*TrafficShapingAPIService)(&c.common)
	c.TrustedAccessConfigsAPI = (*TrustedAccessConfigsAPIService)(&c.common)
	c.TrustedServersAPI = (*TrustedServersAPIService)(&c.common)
	c.UpgradesAPI = (*UpgradesAPIService)(&c.common)
	c.UplinkAPI = (*UplinkAPIService)(&c.common)
	c.UplinkBandwidthAPI = (*UplinkBandwidthAPIService)(&c.common)
	c.UplinkSelectionAPI = (*UplinkSelectionAPIService)(&c.common)
	c.UplinksAPI = (*UplinksAPIService)(&c.common)
	c.UplinksLossAndLatencyAPI = (*UplinksLossAndLatencyAPIService)(&c.common)
	c.UsageAPI = (*UsageAPIService)(&c.common)
	c.UsageHistoriesAPI = (*UsageHistoriesAPIService)(&c.common)
	c.UsageHistoryAPI = (*UsageHistoryAPIService)(&c.common)
	c.UserAccessDevicesAPI = (*UserAccessDevicesAPIService)(&c.common)
	c.UsersAPI = (*UsersAPIService)(&c.common)
	c.V4API = (*V4APIService)(&c.common)
	c.VideoAPI = (*VideoAPIService)(&c.common)
	c.VideoLinkAPI = (*VideoLinkAPIService)(&c.common)
	c.VlanAssignmentsAPI = (*VlanAssignmentsAPIService)(&c.common)
	c.VlanProfilesAPI = (*VlanProfilesAPIService)(&c.common)
	c.VlansAPI = (*VlansAPIService)(&c.common)
	c.VmxAPI = (*VmxAPIService)(&c.common)
	c.VpnAPI = (*VpnAPIService)(&c.common)
	c.VpnExclusionsAPI = (*VpnExclusionsAPIService)(&c.common)
	c.VpnFirewallRulesAPI = (*VpnFirewallRulesAPIService)(&c.common)
	c.VppAccountsAPI = (*VppAccountsAPIService)(&c.common)
	c.WakeOnLanAPI = (*WakeOnLanAPIService)(&c.common)
	c.WarmSpareAPI = (*WarmSpareAPIService)(&c.common)
	c.WarningsAPI = (*WarningsAPIService)(&c.common)
	c.WebhookTestsAPI = (*WebhookTestsAPIService)(&c.common)
	c.WebhooksAPI = (*WebhooksAPIService)(&c.common)
	c.WirelessAPI = (*WirelessAPIService)(&c.common)
	c.WirelessProfilesAPI = (*WirelessProfilesAPIService)(&c.common)
	c.WlanListsAPI = (*WlanListsAPIService)(&c.common)
	c.ZonesAPI = (*ZonesAPIService)(&c.common)

	return c
}

func atoi(in string) (int, error) {
	return strconv.Atoi(in)
}

// selectHeaderContentType select a content type from the available list.
func selectHeaderContentType(contentTypes []string) string {
	if len(contentTypes) == 0 {
		return ""
	}
	if contains(contentTypes, "application/json") {
		return "application/json"
	}
	return contentTypes[0] // use the first content type specified in 'consumes'
}

// selectHeaderAccept join all accept types and return
func selectHeaderAccept(accepts []string) string {
	if len(accepts) == 0 {
		return ""
	}

	if contains(accepts, "application/json") {
		return "application/json"
	}

	return strings.Join(accepts, ",")
}

// contains is a case insensitive match, finding needle in a haystack
func contains(haystack []string, needle string) bool {
	for _, a := range haystack {
		if strings.EqualFold(a, needle) {
			return true
		}
	}
	return false
}

// Verify optional parameters are of the correct type.
func typeCheckParameter(obj interface{}, expected string, name string) error {
	// Make sure there is an object.
	if obj == nil {
		return nil
	}

	// Check the type is as expected.
	if reflect.TypeOf(obj).String() != expected {
		return fmt.Errorf("expected %s to be of type %s but received %s", name, expected, reflect.TypeOf(obj).String())
	}
	return nil
}

func parameterValueToString( obj interface{}, key string ) string {
	if reflect.TypeOf(obj).Kind() != reflect.Ptr {
		return fmt.Sprintf("%v", obj)
	}
	var param,ok = obj.(MappedNullable)
	if !ok {
		return ""
	}
	dataMap,err := param.ToMap()
	if err != nil {
		return ""
	}
	return fmt.Sprintf("%v", dataMap[key])
}

// parameterAddToHeaderOrQuery adds the provided object to the request header or url query
// supporting deep object syntax
func parameterAddToHeaderOrQuery(headerOrQueryParams interface{}, keyPrefix string, obj interface{}, collectionType string) {
	var v = reflect.ValueOf(obj)
	var value = ""
	if v == reflect.ValueOf(nil) {
		value = "null"
	} else {
		switch v.Kind() {
			case reflect.Invalid:
				value = "invalid"

			case reflect.Struct:
				if t,ok := obj.(MappedNullable); ok {
					dataMap,err := t.ToMap()
					if err != nil {
						return
					}
					parameterAddToHeaderOrQuery(headerOrQueryParams, keyPrefix, dataMap, collectionType)
					return
				}
				if t, ok := obj.(time.Time); ok {
					parameterAddToHeaderOrQuery(headerOrQueryParams, keyPrefix, t.Format(time.RFC3339Nano), collectionType)
					return
				}
				value = v.Type().String() + " value"
			case reflect.Slice:
				var indValue = reflect.ValueOf(obj)
				if indValue == reflect.ValueOf(nil) {
					return
				}
				var lenIndValue = indValue.Len()
				for i:=0;i<lenIndValue;i++ {
					var arrayValue = indValue.Index(i)
					parameterAddToHeaderOrQuery(headerOrQueryParams, keyPrefix, arrayValue.Interface(), collectionType)
				}
				return

			case reflect.Map:
				var indValue = reflect.ValueOf(obj)
				if indValue == reflect.ValueOf(nil) {
					return
				}
				iter := indValue.MapRange()
				for iter.Next() {
					k,v := iter.Key(), iter.Value()
					parameterAddToHeaderOrQuery(headerOrQueryParams, fmt.Sprintf("%s[%s]", keyPrefix, k.String()), v.Interface(), collectionType)
				}
				return

			case reflect.Interface:
				fallthrough
			case reflect.Ptr:
				parameterAddToHeaderOrQuery(headerOrQueryParams, keyPrefix, v.Elem().Interface(), collectionType)
				return

			case reflect.Int, reflect.Int8, reflect.Int16,
				reflect.Int32, reflect.Int64:
				value = strconv.FormatInt(v.Int(), 10)
			case reflect.Uint, reflect.Uint8, reflect.Uint16,
				reflect.Uint32, reflect.Uint64, reflect.Uintptr:
				value = strconv.FormatUint(v.Uint(), 10)
			case reflect.Float32, reflect.Float64:
				value = strconv.FormatFloat(v.Float(), 'g', -1, 32)
			case reflect.Bool:
				value = strconv.FormatBool(v.Bool())
			case reflect.String:
				value = v.String()
			default:
				value = v.Type().String() + " value"
		}
	}

	switch valuesMap := headerOrQueryParams.(type) {
		case url.Values:
			if collectionType == "csv" && valuesMap.Get(keyPrefix) != "" {
				valuesMap.Set(keyPrefix, valuesMap.Get(keyPrefix) + "," + value)
			} else {
				valuesMap.Add(keyPrefix, value)
			}
			break
		case map[string]string:
			valuesMap[keyPrefix] = value
			break
	}
}

// helper for converting interface{} parameters to json strings
func parameterToJson(obj interface{}) (string, error) {
	jsonBuf, err := json.Marshal(obj)
	if err != nil {
		return "", err
	}
	return string(jsonBuf), err
}

// callAPI do the request.
func (c *APIClient) callAPI(request *http.Request) (*http.Response, error) {
	if c.cfg.Debug {
		dump, err := httputil.DumpRequestOut(request, true)
		if err != nil {
			return nil, err
		}
		log.Printf("\n%s\n", string(dump))
	}

	resp, err := c.cfg.HTTPClient.Do(request)
	if err != nil {
		return resp, err
	}

	if c.cfg.Debug {
		dump, err := httputil.DumpResponse(resp, true)
		if err != nil {
			return resp, err
		}
		log.Printf("\n%s\n", string(dump))
	}
	return resp, err
}

// Allow modification of underlying config for alternate implementations and testing
// Caution: modifying the configuration while live can cause data races and potentially unwanted behavior
func (c *APIClient) GetConfig() *Configuration {
	return c.cfg
}

type formFile struct {
		fileBytes []byte
		fileName string
		formFileName string
}

// prepareRequest build the request
func (c *APIClient) prepareRequest(
	ctx context.Context,
	path string, method string,
	postBody interface{},
	headerParams map[string]string,
	queryParams url.Values,
	formParams url.Values,
	formFiles []formFile) (localVarRequest *http.Request, err error) {

	var body *bytes.Buffer

	// Detect postBody type and post.
	if postBody != nil {
		contentType := headerParams["Content-Type"]
		if contentType == "" {
			contentType = detectContentType(postBody)
			headerParams["Content-Type"] = contentType
		}

		body, err = setBody(postBody, contentType)
		if err != nil {
			return nil, err
		}
	}

	// add form parameters and file if available.
	if strings.HasPrefix(headerParams["Content-Type"], "multipart/form-data") && len(formParams) > 0 || (len(formFiles) > 0) {
		if body != nil {
			return nil, errors.New("Cannot specify postBody and multipart form at the same time.")
		}
		body = &bytes.Buffer{}
		w := multipart.NewWriter(body)

		for k, v := range formParams {
			for _, iv := range v {
				if strings.HasPrefix(k, "@") { // file
					err = addFile(w, k[1:], iv)
					if err != nil {
						return nil, err
					}
				} else { // form value
					w.WriteField(k, iv)
				}
			}
		}
		for _, formFile := range formFiles {
			if len(formFile.fileBytes) > 0 && formFile.fileName != "" {
				w.Boundary()
				part, err := w.CreateFormFile(formFile.formFileName, filepath.Base(formFile.fileName))
				if err != nil {
						return nil, err
				}
				_, err = part.Write(formFile.fileBytes)
				if err != nil {
						return nil, err
				}
			}
		}

		// Set the Boundary in the Content-Type
		headerParams["Content-Type"] = w.FormDataContentType()

		// Set Content-Length
		headerParams["Content-Length"] = fmt.Sprintf("%d", body.Len())
		w.Close()
	}

	if strings.HasPrefix(headerParams["Content-Type"], "application/x-www-form-urlencoded") && len(formParams) > 0 {
		if body != nil {
			return nil, errors.New("Cannot specify postBody and x-www-form-urlencoded form at the same time.")
		}
		body = &bytes.Buffer{}
		body.WriteString(formParams.Encode())
		// Set Content-Length
		headerParams["Content-Length"] = fmt.Sprintf("%d", body.Len())
	}

	// Setup path and query parameters
	url, err := url.Parse(path)
	if err != nil {
		return nil, err
	}

	// Override request host, if applicable
	if c.cfg.Host != "" {
		url.Host = c.cfg.Host
	}

	// Override request scheme, if applicable
	if c.cfg.Scheme != "" {
		url.Scheme = c.cfg.Scheme
	}

	// Adding Query Param
	query := url.Query()
	for k, v := range queryParams {
		for _, iv := range v {
			query.Add(k, iv)
		}
	}

	// Encode the parameters.
	url.RawQuery = queryParamSplit.ReplaceAllStringFunc(query.Encode(), func(s string) string {
		pieces := strings.Split(s, "=")
		pieces[0] = queryDescape.Replace(pieces[0])
		return strings.Join(pieces, "=")
	})

	// Generate a new request
	if body != nil {
		localVarRequest, err = http.NewRequest(method, url.String(), body)
	} else {
		localVarRequest, err = http.NewRequest(method, url.String(), nil)
	}
	if err != nil {
		return nil, err
	}

	// add header parameters, if any
	if len(headerParams) > 0 {
		headers := http.Header{}
		for h, v := range headerParams {
			headers[h] = []string{v}
		}
		localVarRequest.Header = headers
	}

	// Add the user agent to the request.
	localVarRequest.Header.Add("User-Agent", c.cfg.UserAgent)

	if ctx != nil {
		// add context to the request
		localVarRequest = localVarRequest.WithContext(ctx)

		// Walk through any authentication.

		// AccessToken Authentication
		if auth, ok := ctx.Value(ContextAccessToken).(string); ok {
			localVarRequest.Header.Add("Authorization", "Bearer "+auth)
		}

	}

	for header, value := range c.cfg.DefaultHeader {
		localVarRequest.Header.Add(header, value)
	}
	return localVarRequest, nil
}

func (c *APIClient) decode(v interface{}, b []byte, contentType string) (err error) {
	if len(b) == 0 {
		return nil
	}
	if s, ok := v.(*string); ok {
		*s = string(b)
		return nil
	}
	if f, ok := v.(*os.File); ok {
		f, err = os.CreateTemp("", "HttpClientFile")
		if err != nil {
			return
		}
		_, err = f.Write(b)
		if err != nil {
			return
		}
		_, err = f.Seek(0, io.SeekStart)
		return
	}
	if f, ok := v.(**os.File); ok {
		*f, err = os.CreateTemp("", "HttpClientFile")
		if err != nil {
			return
		}
		_, err = (*f).Write(b)
		if err != nil {
			return
		}
		_, err = (*f).Seek(0, io.SeekStart)
		return
	}
	if XmlCheck.MatchString(contentType) {
		if err = xml.Unmarshal(b, v); err != nil {
			return err
		}
		return nil
	}
	if JsonCheck.MatchString(contentType) {
		if actualObj, ok := v.(interface{ GetActualInstance() interface{} }); ok { // oneOf, anyOf schemas
			if unmarshalObj, ok := actualObj.(interface{ UnmarshalJSON([]byte) error }); ok { // make sure it has UnmarshalJSON defined
				if err = unmarshalObj.UnmarshalJSON(b); err != nil {
					return err
				}
			} else {
				return errors.New("Unknown type with GetActualInstance but no unmarshalObj.UnmarshalJSON defined")
			}
		} else if err = json.Unmarshal(b, v); err != nil { // simple model
			return err
		}
		return nil
	}
	return errors.New("undefined response type")
}

// Add a file to the multipart request
func addFile(w *multipart.Writer, fieldName, path string) error {
	file, err := os.Open(filepath.Clean(path))
	if err != nil {
		return err
	}
	err = file.Close()
	if err != nil {
		return err
	}

	part, err := w.CreateFormFile(fieldName, filepath.Base(path))
	if err != nil {
		return err
	}
	_, err = io.Copy(part, file)

	return err
}

// Set request body from an interface{}
func setBody(body interface{}, contentType string) (bodyBuf *bytes.Buffer, err error) {
	if bodyBuf == nil {
		bodyBuf = &bytes.Buffer{}
	}

	if reader, ok := body.(io.Reader); ok {
		_, err = bodyBuf.ReadFrom(reader)
	} else if fp, ok := body.(*os.File); ok {
		_, err = bodyBuf.ReadFrom(fp)
	} else if b, ok := body.([]byte); ok {
		_, err = bodyBuf.Write(b)
	} else if s, ok := body.(string); ok {
		_, err = bodyBuf.WriteString(s)
	} else if s, ok := body.(*string); ok {
		_, err = bodyBuf.WriteString(*s)
	} else if JsonCheck.MatchString(contentType) {
		err = json.NewEncoder(bodyBuf).Encode(body)
	} else if XmlCheck.MatchString(contentType) {
		var bs []byte
		bs, err = xml.Marshal(body)
		if err == nil {
			bodyBuf.Write(bs)
		}
	}

	if err != nil {
		return nil, err
	}

	if bodyBuf.Len() == 0 {
		err = fmt.Errorf("invalid body type %s\n", contentType)
		return nil, err
	}
	return bodyBuf, nil
}

// detectContentType method is used to figure out `Request.Body` content type for request header
func detectContentType(body interface{}) string {
	contentType := "text/plain; charset=utf-8"
	kind := reflect.TypeOf(body).Kind()

	switch kind {
	case reflect.Struct, reflect.Map, reflect.Ptr:
		contentType = "application/json; charset=utf-8"
	case reflect.String:
		contentType = "text/plain; charset=utf-8"
	default:
		if b, ok := body.([]byte); ok {
			contentType = http.DetectContentType(b)
		} else if kind == reflect.Slice {
			contentType = "application/json; charset=utf-8"
		}
	}

	return contentType
}

// Ripped from https://github.com/gregjones/httpcache/blob/master/httpcache.go
type cacheControl map[string]string

func parseCacheControl(headers http.Header) cacheControl {
	cc := cacheControl{}
	ccHeader := headers.Get("Cache-Control")
	for _, part := range strings.Split(ccHeader, ",") {
		part = strings.Trim(part, " ")
		if part == "" {
			continue
		}
		if strings.ContainsRune(part, '=') {
			keyval := strings.Split(part, "=")
			cc[strings.Trim(keyval[0], " ")] = strings.Trim(keyval[1], ",")
		} else {
			cc[part] = ""
		}
	}
	return cc
}

// CacheExpires helper function to determine remaining time before repeating a request.
func CacheExpires(r *http.Response) time.Time {
	// Figure out when the cache expires.
	var expires time.Time
	now, err := time.Parse(time.RFC1123, r.Header.Get("date"))
	if err != nil {
		return time.Now()
	}
	respCacheControl := parseCacheControl(r.Header)

	if maxAge, ok := respCacheControl["max-age"]; ok {
		lifetime, err := time.ParseDuration(maxAge + "s")
		if err != nil {
			expires = now
		} else {
			expires = now.Add(lifetime)
		}
	} else {
		expiresHeader := r.Header.Get("Expires")
		if expiresHeader != "" {
			expires, err = time.Parse(time.RFC1123, expiresHeader)
			if err != nil {
				expires = now
			}
		}
	}
	return expires
}

func strlen(s string) int {
	return utf8.RuneCountInString(s)
}

// GenericOpenAPIError Provides access to the body, error and model on returned errors.
type GenericOpenAPIError struct {
	body  []byte
	error string
	model interface{}
}

// Error returns non-empty string if there was an error.
func (e GenericOpenAPIError) Error() string {
	return e.error
}

// Body returns the raw bytes of the response
func (e GenericOpenAPIError) Body() []byte {
	return e.body
}

// Model returns the unpacked model of the error
func (e GenericOpenAPIError) Model() interface{} {
	return e.model
}

// format error message using title and detail when model implements rfc7807
func formatErrorMessage(status string, v interface{}) string {
	str := ""
	metaValue := reflect.ValueOf(v).Elem()

	if metaValue.Kind() == reflect.Struct {
		field := metaValue.FieldByName("Title")
		if field != (reflect.Value{}) {
			str = fmt.Sprintf("%s", field.Interface())
		}

		field = metaValue.FieldByName("Detail")
		if field != (reflect.Value{}) {
			str = fmt.Sprintf("%s (%s)", str, field.Interface())
		}
	}

	return strings.TrimSpace(fmt.Sprintf("%s %s", status, str))
}
