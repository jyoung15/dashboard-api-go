/*
Meraki Dashboard API

A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 03 July, 2024 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.48.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DetailsAPIService DetailsAPI service
type DetailsAPIService service

type DetailsAPIBulkUpdateOrganizationDevicesDetailsRequest struct {
	ctx context.Context
	ApiService *DetailsAPIService
	organizationId string
	bulkUpdateOrganizationDevicesDetailsRequest *BulkUpdateOrganizationDevicesDetailsRequest
}

func (r DetailsAPIBulkUpdateOrganizationDevicesDetailsRequest) BulkUpdateOrganizationDevicesDetailsRequest(bulkUpdateOrganizationDevicesDetailsRequest BulkUpdateOrganizationDevicesDetailsRequest) DetailsAPIBulkUpdateOrganizationDevicesDetailsRequest {
	r.bulkUpdateOrganizationDevicesDetailsRequest = &bulkUpdateOrganizationDevicesDetailsRequest
	return r
}

func (r DetailsAPIBulkUpdateOrganizationDevicesDetailsRequest) Execute() (*BulkUpdateOrganizationDevicesDetails200Response, *http.Response, error) {
	return r.ApiService.BulkUpdateOrganizationDevicesDetailsExecute(r)
}

/*
BulkUpdateOrganizationDevicesDetails Updating device details (currently only used for Catalyst devices)

Updating device details (currently only used for Catalyst devices)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return DetailsAPIBulkUpdateOrganizationDevicesDetailsRequest
*/
func (a *DetailsAPIService) BulkUpdateOrganizationDevicesDetails(ctx context.Context, organizationId string) DetailsAPIBulkUpdateOrganizationDevicesDetailsRequest {
	return DetailsAPIBulkUpdateOrganizationDevicesDetailsRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return BulkUpdateOrganizationDevicesDetails200Response
func (a *DetailsAPIService) BulkUpdateOrganizationDevicesDetailsExecute(r DetailsAPIBulkUpdateOrganizationDevicesDetailsRequest) (*BulkUpdateOrganizationDevicesDetails200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BulkUpdateOrganizationDevicesDetails200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DetailsAPIService.BulkUpdateOrganizationDevicesDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/devices/details/bulkUpdate"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkUpdateOrganizationDevicesDetailsRequest == nil {
		return localVarReturnValue, nil, reportError("bulkUpdateOrganizationDevicesDetailsRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkUpdateOrganizationDevicesDetailsRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
