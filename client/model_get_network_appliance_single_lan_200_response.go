/*
Meraki Dashboard API

A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 03 July, 2024 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.48.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the GetNetworkApplianceSingleLan200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetNetworkApplianceSingleLan200Response{}

// GetNetworkApplianceSingleLan200Response struct for GetNetworkApplianceSingleLan200Response
type GetNetworkApplianceSingleLan200Response struct {
	// The subnet of the single LAN
	Subnet *string `json:"subnet,omitempty"`
	// The local IP of the appliance on the single LAN
	ApplianceIp *string `json:"applianceIp,omitempty"`
	MandatoryDhcp *GetNetworkApplianceSingleLan200ResponseMandatoryDhcp `json:"mandatoryDhcp,omitempty"`
	Ipv6 *GetNetworkApplianceSingleLan200ResponseIpv6 `json:"ipv6,omitempty"`
}

// NewGetNetworkApplianceSingleLan200Response instantiates a new GetNetworkApplianceSingleLan200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetNetworkApplianceSingleLan200Response() *GetNetworkApplianceSingleLan200Response {
	this := GetNetworkApplianceSingleLan200Response{}
	return &this
}

// NewGetNetworkApplianceSingleLan200ResponseWithDefaults instantiates a new GetNetworkApplianceSingleLan200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetNetworkApplianceSingleLan200ResponseWithDefaults() *GetNetworkApplianceSingleLan200Response {
	this := GetNetworkApplianceSingleLan200Response{}
	return &this
}

// GetSubnet returns the Subnet field value if set, zero value otherwise.
func (o *GetNetworkApplianceSingleLan200Response) GetSubnet() string {
	if o == nil || IsNil(o.Subnet) {
		var ret string
		return ret
	}
	return *o.Subnet
}

// GetSubnetOk returns a tuple with the Subnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetNetworkApplianceSingleLan200Response) GetSubnetOk() (*string, bool) {
	if o == nil || IsNil(o.Subnet) {
		return nil, false
	}
	return o.Subnet, true
}

// HasSubnet returns a boolean if a field has been set.
func (o *GetNetworkApplianceSingleLan200Response) HasSubnet() bool {
	if o != nil && !IsNil(o.Subnet) {
		return true
	}

	return false
}

// SetSubnet gets a reference to the given string and assigns it to the Subnet field.
func (o *GetNetworkApplianceSingleLan200Response) SetSubnet(v string) {
	o.Subnet = &v
}

// GetApplianceIp returns the ApplianceIp field value if set, zero value otherwise.
func (o *GetNetworkApplianceSingleLan200Response) GetApplianceIp() string {
	if o == nil || IsNil(o.ApplianceIp) {
		var ret string
		return ret
	}
	return *o.ApplianceIp
}

// GetApplianceIpOk returns a tuple with the ApplianceIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetNetworkApplianceSingleLan200Response) GetApplianceIpOk() (*string, bool) {
	if o == nil || IsNil(o.ApplianceIp) {
		return nil, false
	}
	return o.ApplianceIp, true
}

// HasApplianceIp returns a boolean if a field has been set.
func (o *GetNetworkApplianceSingleLan200Response) HasApplianceIp() bool {
	if o != nil && !IsNil(o.ApplianceIp) {
		return true
	}

	return false
}

// SetApplianceIp gets a reference to the given string and assigns it to the ApplianceIp field.
func (o *GetNetworkApplianceSingleLan200Response) SetApplianceIp(v string) {
	o.ApplianceIp = &v
}

// GetMandatoryDhcp returns the MandatoryDhcp field value if set, zero value otherwise.
func (o *GetNetworkApplianceSingleLan200Response) GetMandatoryDhcp() GetNetworkApplianceSingleLan200ResponseMandatoryDhcp {
	if o == nil || IsNil(o.MandatoryDhcp) {
		var ret GetNetworkApplianceSingleLan200ResponseMandatoryDhcp
		return ret
	}
	return *o.MandatoryDhcp
}

// GetMandatoryDhcpOk returns a tuple with the MandatoryDhcp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetNetworkApplianceSingleLan200Response) GetMandatoryDhcpOk() (*GetNetworkApplianceSingleLan200ResponseMandatoryDhcp, bool) {
	if o == nil || IsNil(o.MandatoryDhcp) {
		return nil, false
	}
	return o.MandatoryDhcp, true
}

// HasMandatoryDhcp returns a boolean if a field has been set.
func (o *GetNetworkApplianceSingleLan200Response) HasMandatoryDhcp() bool {
	if o != nil && !IsNil(o.MandatoryDhcp) {
		return true
	}

	return false
}

// SetMandatoryDhcp gets a reference to the given GetNetworkApplianceSingleLan200ResponseMandatoryDhcp and assigns it to the MandatoryDhcp field.
func (o *GetNetworkApplianceSingleLan200Response) SetMandatoryDhcp(v GetNetworkApplianceSingleLan200ResponseMandatoryDhcp) {
	o.MandatoryDhcp = &v
}

// GetIpv6 returns the Ipv6 field value if set, zero value otherwise.
func (o *GetNetworkApplianceSingleLan200Response) GetIpv6() GetNetworkApplianceSingleLan200ResponseIpv6 {
	if o == nil || IsNil(o.Ipv6) {
		var ret GetNetworkApplianceSingleLan200ResponseIpv6
		return ret
	}
	return *o.Ipv6
}

// GetIpv6Ok returns a tuple with the Ipv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetNetworkApplianceSingleLan200Response) GetIpv6Ok() (*GetNetworkApplianceSingleLan200ResponseIpv6, bool) {
	if o == nil || IsNil(o.Ipv6) {
		return nil, false
	}
	return o.Ipv6, true
}

// HasIpv6 returns a boolean if a field has been set.
func (o *GetNetworkApplianceSingleLan200Response) HasIpv6() bool {
	if o != nil && !IsNil(o.Ipv6) {
		return true
	}

	return false
}

// SetIpv6 gets a reference to the given GetNetworkApplianceSingleLan200ResponseIpv6 and assigns it to the Ipv6 field.
func (o *GetNetworkApplianceSingleLan200Response) SetIpv6(v GetNetworkApplianceSingleLan200ResponseIpv6) {
	o.Ipv6 = &v
}

func (o GetNetworkApplianceSingleLan200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetNetworkApplianceSingleLan200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Subnet) {
		toSerialize["subnet"] = o.Subnet
	}
	if !IsNil(o.ApplianceIp) {
		toSerialize["applianceIp"] = o.ApplianceIp
	}
	if !IsNil(o.MandatoryDhcp) {
		toSerialize["mandatoryDhcp"] = o.MandatoryDhcp
	}
	if !IsNil(o.Ipv6) {
		toSerialize["ipv6"] = o.Ipv6
	}
	return toSerialize, nil
}

type NullableGetNetworkApplianceSingleLan200Response struct {
	value *GetNetworkApplianceSingleLan200Response
	isSet bool
}

func (v NullableGetNetworkApplianceSingleLan200Response) Get() *GetNetworkApplianceSingleLan200Response {
	return v.value
}

func (v *NullableGetNetworkApplianceSingleLan200Response) Set(val *GetNetworkApplianceSingleLan200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetNetworkApplianceSingleLan200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetNetworkApplianceSingleLan200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetNetworkApplianceSingleLan200Response(val *GetNetworkApplianceSingleLan200Response) *NullableGetNetworkApplianceSingleLan200Response {
	return &NullableGetNetworkApplianceSingleLan200Response{value: val, isSet: true}
}

func (v NullableGetNetworkApplianceSingleLan200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetNetworkApplianceSingleLan200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


