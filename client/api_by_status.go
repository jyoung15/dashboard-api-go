/*
Meraki Dashboard API

A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 03 July, 2024 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.48.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ByStatusAPIService ByStatusAPI service
type ByStatusAPIService service

type ByStatusAPIGetOrganizationSummaryTopNetworksByStatusRequest struct {
	ctx context.Context
	ApiService *ByStatusAPIService
	organizationId string
	networkTag *string
	deviceTag *string
	networkId *string
	quantity *int32
	ssidName *string
	usageUplink *string
	perPage *int32
	startingAfter *string
	endingBefore *string
}

// Match result to an exact network tag
func (r ByStatusAPIGetOrganizationSummaryTopNetworksByStatusRequest) NetworkTag(networkTag string) ByStatusAPIGetOrganizationSummaryTopNetworksByStatusRequest {
	r.networkTag = &networkTag
	return r
}

// Match result to an exact device tag
func (r ByStatusAPIGetOrganizationSummaryTopNetworksByStatusRequest) DeviceTag(deviceTag string) ByStatusAPIGetOrganizationSummaryTopNetworksByStatusRequest {
	r.deviceTag = &deviceTag
	return r
}

// Match result to an exact network id
func (r ByStatusAPIGetOrganizationSummaryTopNetworksByStatusRequest) NetworkId(networkId string) ByStatusAPIGetOrganizationSummaryTopNetworksByStatusRequest {
	r.networkId = &networkId
	return r
}

// Set number of desired results to return. Default is 10.
func (r ByStatusAPIGetOrganizationSummaryTopNetworksByStatusRequest) Quantity(quantity int32) ByStatusAPIGetOrganizationSummaryTopNetworksByStatusRequest {
	r.quantity = &quantity
	return r
}

// Filter results by ssid name
func (r ByStatusAPIGetOrganizationSummaryTopNetworksByStatusRequest) SsidName(ssidName string) ByStatusAPIGetOrganizationSummaryTopNetworksByStatusRequest {
	r.ssidName = &ssidName
	return r
}

// Filter results by usage uplink
func (r ByStatusAPIGetOrganizationSummaryTopNetworksByStatusRequest) UsageUplink(usageUplink string) ByStatusAPIGetOrganizationSummaryTopNetworksByStatusRequest {
	r.usageUplink = &usageUplink
	return r
}

// The number of entries per page returned. Acceptable range is 3 - 5000.
func (r ByStatusAPIGetOrganizationSummaryTopNetworksByStatusRequest) PerPage(perPage int32) ByStatusAPIGetOrganizationSummaryTopNetworksByStatusRequest {
	r.perPage = &perPage
	return r
}

// A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
func (r ByStatusAPIGetOrganizationSummaryTopNetworksByStatusRequest) StartingAfter(startingAfter string) ByStatusAPIGetOrganizationSummaryTopNetworksByStatusRequest {
	r.startingAfter = &startingAfter
	return r
}

// A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
func (r ByStatusAPIGetOrganizationSummaryTopNetworksByStatusRequest) EndingBefore(endingBefore string) ByStatusAPIGetOrganizationSummaryTopNetworksByStatusRequest {
	r.endingBefore = &endingBefore
	return r
}

func (r ByStatusAPIGetOrganizationSummaryTopNetworksByStatusRequest) Execute() ([]GetOrganizationSummaryTopNetworksByStatus200ResponseInner, *http.Response, error) {
	return r.ApiService.GetOrganizationSummaryTopNetworksByStatusExecute(r)
}

/*
GetOrganizationSummaryTopNetworksByStatus List the client and status overview information for the networks in an organization

List the client and status overview information for the networks in an organization. Usage is measured in kilobytes and from the last seven days.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return ByStatusAPIGetOrganizationSummaryTopNetworksByStatusRequest
*/
func (a *ByStatusAPIService) GetOrganizationSummaryTopNetworksByStatus(ctx context.Context, organizationId string) ByStatusAPIGetOrganizationSummaryTopNetworksByStatusRequest {
	return ByStatusAPIGetOrganizationSummaryTopNetworksByStatusRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return []GetOrganizationSummaryTopNetworksByStatus200ResponseInner
func (a *ByStatusAPIService) GetOrganizationSummaryTopNetworksByStatusExecute(r ByStatusAPIGetOrganizationSummaryTopNetworksByStatusRequest) ([]GetOrganizationSummaryTopNetworksByStatus200ResponseInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []GetOrganizationSummaryTopNetworksByStatus200ResponseInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ByStatusAPIService.GetOrganizationSummaryTopNetworksByStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/summary/top/networks/byStatus"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.networkTag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "networkTag", r.networkTag, "")
	}
	if r.deviceTag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceTag", r.deviceTag, "")
	}
	if r.networkId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "networkId", r.networkId, "")
	}
	if r.quantity != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "quantity", r.quantity, "")
	}
	if r.ssidName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssidName", r.ssidName, "")
	}
	if r.usageUplink != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "usageUplink", r.usageUplink, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "perPage", r.perPage, "")
	}
	if r.startingAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startingAfter", r.startingAfter, "")
	}
	if r.endingBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endingBefore", r.endingBefore, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
