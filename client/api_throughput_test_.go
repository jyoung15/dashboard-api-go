/*
Meraki Dashboard API

A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 03 July, 2024 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.48.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ThroughputTestAPIService ThroughputTestAPI service
type ThroughputTestAPIService service

type ThroughputTestAPICreateDeviceLiveToolsThroughputTestRequest struct {
	ctx context.Context
	ApiService *ThroughputTestAPIService
	serial string
	createDeviceLiveToolsArpTableRequest *CreateDeviceLiveToolsArpTableRequest
}

func (r ThroughputTestAPICreateDeviceLiveToolsThroughputTestRequest) CreateDeviceLiveToolsArpTableRequest(createDeviceLiveToolsArpTableRequest CreateDeviceLiveToolsArpTableRequest) ThroughputTestAPICreateDeviceLiveToolsThroughputTestRequest {
	r.createDeviceLiveToolsArpTableRequest = &createDeviceLiveToolsArpTableRequest
	return r
}

func (r ThroughputTestAPICreateDeviceLiveToolsThroughputTestRequest) Execute() (*CreateDeviceLiveToolsThroughputTest201Response, *http.Response, error) {
	return r.ApiService.CreateDeviceLiveToolsThroughputTestExecute(r)
}

/*
CreateDeviceLiveToolsThroughputTest Enqueue a job to test a device throughput, the test will run for 10 secs to test throughput

Enqueue a job to test a device throughput, the test will run for 10 secs to test throughput. This endpoint has a rate limit of one request every five seconds per device.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serial Serial
 @return ThroughputTestAPICreateDeviceLiveToolsThroughputTestRequest
*/
func (a *ThroughputTestAPIService) CreateDeviceLiveToolsThroughputTest(ctx context.Context, serial string) ThroughputTestAPICreateDeviceLiveToolsThroughputTestRequest {
	return ThroughputTestAPICreateDeviceLiveToolsThroughputTestRequest{
		ApiService: a,
		ctx: ctx,
		serial: serial,
	}
}

// Execute executes the request
//  @return CreateDeviceLiveToolsThroughputTest201Response
func (a *ThroughputTestAPIService) CreateDeviceLiveToolsThroughputTestExecute(r ThroughputTestAPICreateDeviceLiveToolsThroughputTestRequest) (*CreateDeviceLiveToolsThroughputTest201Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateDeviceLiveToolsThroughputTest201Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThroughputTestAPIService.CreateDeviceLiveToolsThroughputTest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/devices/{serial}/liveTools/throughputTest"
	localVarPath = strings.Replace(localVarPath, "{"+"serial"+"}", url.PathEscape(parameterValueToString(r.serial, "serial")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createDeviceLiveToolsArpTableRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ThroughputTestAPIGetDeviceLiveToolsThroughputTestRequest struct {
	ctx context.Context
	ApiService *ThroughputTestAPIService
	serial string
	throughputTestId string
}

func (r ThroughputTestAPIGetDeviceLiveToolsThroughputTestRequest) Execute() (*DevicesSerialLiveToolsThroughputTestPostRequestMessage, *http.Response, error) {
	return r.ApiService.GetDeviceLiveToolsThroughputTestExecute(r)
}

/*
GetDeviceLiveToolsThroughputTest Return a throughput test job

Return a throughput test job

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serial Serial
 @param throughputTestId Throughput test ID
 @return ThroughputTestAPIGetDeviceLiveToolsThroughputTestRequest
*/
func (a *ThroughputTestAPIService) GetDeviceLiveToolsThroughputTest(ctx context.Context, serial string, throughputTestId string) ThroughputTestAPIGetDeviceLiveToolsThroughputTestRequest {
	return ThroughputTestAPIGetDeviceLiveToolsThroughputTestRequest{
		ApiService: a,
		ctx: ctx,
		serial: serial,
		throughputTestId: throughputTestId,
	}
}

// Execute executes the request
//  @return DevicesSerialLiveToolsThroughputTestPostRequestMessage
func (a *ThroughputTestAPIService) GetDeviceLiveToolsThroughputTestExecute(r ThroughputTestAPIGetDeviceLiveToolsThroughputTestRequest) (*DevicesSerialLiveToolsThroughputTestPostRequestMessage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DevicesSerialLiveToolsThroughputTestPostRequestMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThroughputTestAPIService.GetDeviceLiveToolsThroughputTest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/devices/{serial}/liveTools/throughputTest/{throughputTestId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serial"+"}", url.PathEscape(parameterValueToString(r.serial, "serial")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"throughputTestId"+"}", url.PathEscape(parameterValueToString(r.throughputTestId, "throughputTestId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
