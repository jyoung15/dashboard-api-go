/*
Meraki Dashboard API

A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 03 July, 2024 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.48.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the UpdateNetworkSwitchStackRoutingInterface200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateNetworkSwitchStackRoutingInterface200Response{}

// UpdateNetworkSwitchStackRoutingInterface200Response struct for UpdateNetworkSwitchStackRoutingInterface200Response
type UpdateNetworkSwitchStackRoutingInterface200Response struct {
	// The id
	InterfaceId *string `json:"interfaceId,omitempty"`
	// The name
	Name *string `json:"name,omitempty"`
	// IPv4 subnet
	Subnet *string `json:"subnet,omitempty"`
	// IPv4 address
	InterfaceIp *string `json:"interfaceIp,omitempty"`
	// Multicast routing status
	MulticastRouting *string `json:"multicastRouting,omitempty"`
	// VLAN id
	VlanId *int32 `json:"vlanId,omitempty"`
	OspfSettings *GetDeviceSwitchRoutingInterfaces200ResponseInnerOspfSettings `json:"ospfSettings,omitempty"`
	OspfV3 *GetDeviceSwitchRoutingInterfaces200ResponseInnerOspfV3 `json:"ospfV3,omitempty"`
	Ipv6 *GetDeviceSwitchRoutingInterfaces200ResponseInnerIpv6 `json:"ipv6,omitempty"`
	// Whether this is the switch's IPv4 uplink
	UplinkV4 *bool `json:"uplinkV4,omitempty"`
	// Whether this is the switch's IPv6 uplink
	UplinkV6 *bool `json:"uplinkV6,omitempty"`
}

// NewUpdateNetworkSwitchStackRoutingInterface200Response instantiates a new UpdateNetworkSwitchStackRoutingInterface200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateNetworkSwitchStackRoutingInterface200Response() *UpdateNetworkSwitchStackRoutingInterface200Response {
	this := UpdateNetworkSwitchStackRoutingInterface200Response{}
	return &this
}

// NewUpdateNetworkSwitchStackRoutingInterface200ResponseWithDefaults instantiates a new UpdateNetworkSwitchStackRoutingInterface200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateNetworkSwitchStackRoutingInterface200ResponseWithDefaults() *UpdateNetworkSwitchStackRoutingInterface200Response {
	this := UpdateNetworkSwitchStackRoutingInterface200Response{}
	return &this
}

// GetInterfaceId returns the InterfaceId field value if set, zero value otherwise.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) GetInterfaceId() string {
	if o == nil || IsNil(o.InterfaceId) {
		var ret string
		return ret
	}
	return *o.InterfaceId
}

// GetInterfaceIdOk returns a tuple with the InterfaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) GetInterfaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceId) {
		return nil, false
	}
	return o.InterfaceId, true
}

// HasInterfaceId returns a boolean if a field has been set.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) HasInterfaceId() bool {
	if o != nil && !IsNil(o.InterfaceId) {
		return true
	}

	return false
}

// SetInterfaceId gets a reference to the given string and assigns it to the InterfaceId field.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) SetInterfaceId(v string) {
	o.InterfaceId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) SetName(v string) {
	o.Name = &v
}

// GetSubnet returns the Subnet field value if set, zero value otherwise.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) GetSubnet() string {
	if o == nil || IsNil(o.Subnet) {
		var ret string
		return ret
	}
	return *o.Subnet
}

// GetSubnetOk returns a tuple with the Subnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) GetSubnetOk() (*string, bool) {
	if o == nil || IsNil(o.Subnet) {
		return nil, false
	}
	return o.Subnet, true
}

// HasSubnet returns a boolean if a field has been set.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) HasSubnet() bool {
	if o != nil && !IsNil(o.Subnet) {
		return true
	}

	return false
}

// SetSubnet gets a reference to the given string and assigns it to the Subnet field.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) SetSubnet(v string) {
	o.Subnet = &v
}

// GetInterfaceIp returns the InterfaceIp field value if set, zero value otherwise.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) GetInterfaceIp() string {
	if o == nil || IsNil(o.InterfaceIp) {
		var ret string
		return ret
	}
	return *o.InterfaceIp
}

// GetInterfaceIpOk returns a tuple with the InterfaceIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) GetInterfaceIpOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceIp) {
		return nil, false
	}
	return o.InterfaceIp, true
}

// HasInterfaceIp returns a boolean if a field has been set.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) HasInterfaceIp() bool {
	if o != nil && !IsNil(o.InterfaceIp) {
		return true
	}

	return false
}

// SetInterfaceIp gets a reference to the given string and assigns it to the InterfaceIp field.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) SetInterfaceIp(v string) {
	o.InterfaceIp = &v
}

// GetMulticastRouting returns the MulticastRouting field value if set, zero value otherwise.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) GetMulticastRouting() string {
	if o == nil || IsNil(o.MulticastRouting) {
		var ret string
		return ret
	}
	return *o.MulticastRouting
}

// GetMulticastRoutingOk returns a tuple with the MulticastRouting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) GetMulticastRoutingOk() (*string, bool) {
	if o == nil || IsNil(o.MulticastRouting) {
		return nil, false
	}
	return o.MulticastRouting, true
}

// HasMulticastRouting returns a boolean if a field has been set.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) HasMulticastRouting() bool {
	if o != nil && !IsNil(o.MulticastRouting) {
		return true
	}

	return false
}

// SetMulticastRouting gets a reference to the given string and assigns it to the MulticastRouting field.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) SetMulticastRouting(v string) {
	o.MulticastRouting = &v
}

// GetVlanId returns the VlanId field value if set, zero value otherwise.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) GetVlanId() int32 {
	if o == nil || IsNil(o.VlanId) {
		var ret int32
		return ret
	}
	return *o.VlanId
}

// GetVlanIdOk returns a tuple with the VlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) GetVlanIdOk() (*int32, bool) {
	if o == nil || IsNil(o.VlanId) {
		return nil, false
	}
	return o.VlanId, true
}

// HasVlanId returns a boolean if a field has been set.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) HasVlanId() bool {
	if o != nil && !IsNil(o.VlanId) {
		return true
	}

	return false
}

// SetVlanId gets a reference to the given int32 and assigns it to the VlanId field.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) SetVlanId(v int32) {
	o.VlanId = &v
}

// GetOspfSettings returns the OspfSettings field value if set, zero value otherwise.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) GetOspfSettings() GetDeviceSwitchRoutingInterfaces200ResponseInnerOspfSettings {
	if o == nil || IsNil(o.OspfSettings) {
		var ret GetDeviceSwitchRoutingInterfaces200ResponseInnerOspfSettings
		return ret
	}
	return *o.OspfSettings
}

// GetOspfSettingsOk returns a tuple with the OspfSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) GetOspfSettingsOk() (*GetDeviceSwitchRoutingInterfaces200ResponseInnerOspfSettings, bool) {
	if o == nil || IsNil(o.OspfSettings) {
		return nil, false
	}
	return o.OspfSettings, true
}

// HasOspfSettings returns a boolean if a field has been set.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) HasOspfSettings() bool {
	if o != nil && !IsNil(o.OspfSettings) {
		return true
	}

	return false
}

// SetOspfSettings gets a reference to the given GetDeviceSwitchRoutingInterfaces200ResponseInnerOspfSettings and assigns it to the OspfSettings field.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) SetOspfSettings(v GetDeviceSwitchRoutingInterfaces200ResponseInnerOspfSettings) {
	o.OspfSettings = &v
}

// GetOspfV3 returns the OspfV3 field value if set, zero value otherwise.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) GetOspfV3() GetDeviceSwitchRoutingInterfaces200ResponseInnerOspfV3 {
	if o == nil || IsNil(o.OspfV3) {
		var ret GetDeviceSwitchRoutingInterfaces200ResponseInnerOspfV3
		return ret
	}
	return *o.OspfV3
}

// GetOspfV3Ok returns a tuple with the OspfV3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) GetOspfV3Ok() (*GetDeviceSwitchRoutingInterfaces200ResponseInnerOspfV3, bool) {
	if o == nil || IsNil(o.OspfV3) {
		return nil, false
	}
	return o.OspfV3, true
}

// HasOspfV3 returns a boolean if a field has been set.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) HasOspfV3() bool {
	if o != nil && !IsNil(o.OspfV3) {
		return true
	}

	return false
}

// SetOspfV3 gets a reference to the given GetDeviceSwitchRoutingInterfaces200ResponseInnerOspfV3 and assigns it to the OspfV3 field.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) SetOspfV3(v GetDeviceSwitchRoutingInterfaces200ResponseInnerOspfV3) {
	o.OspfV3 = &v
}

// GetIpv6 returns the Ipv6 field value if set, zero value otherwise.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) GetIpv6() GetDeviceSwitchRoutingInterfaces200ResponseInnerIpv6 {
	if o == nil || IsNil(o.Ipv6) {
		var ret GetDeviceSwitchRoutingInterfaces200ResponseInnerIpv6
		return ret
	}
	return *o.Ipv6
}

// GetIpv6Ok returns a tuple with the Ipv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) GetIpv6Ok() (*GetDeviceSwitchRoutingInterfaces200ResponseInnerIpv6, bool) {
	if o == nil || IsNil(o.Ipv6) {
		return nil, false
	}
	return o.Ipv6, true
}

// HasIpv6 returns a boolean if a field has been set.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) HasIpv6() bool {
	if o != nil && !IsNil(o.Ipv6) {
		return true
	}

	return false
}

// SetIpv6 gets a reference to the given GetDeviceSwitchRoutingInterfaces200ResponseInnerIpv6 and assigns it to the Ipv6 field.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) SetIpv6(v GetDeviceSwitchRoutingInterfaces200ResponseInnerIpv6) {
	o.Ipv6 = &v
}

// GetUplinkV4 returns the UplinkV4 field value if set, zero value otherwise.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) GetUplinkV4() bool {
	if o == nil || IsNil(o.UplinkV4) {
		var ret bool
		return ret
	}
	return *o.UplinkV4
}

// GetUplinkV4Ok returns a tuple with the UplinkV4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) GetUplinkV4Ok() (*bool, bool) {
	if o == nil || IsNil(o.UplinkV4) {
		return nil, false
	}
	return o.UplinkV4, true
}

// HasUplinkV4 returns a boolean if a field has been set.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) HasUplinkV4() bool {
	if o != nil && !IsNil(o.UplinkV4) {
		return true
	}

	return false
}

// SetUplinkV4 gets a reference to the given bool and assigns it to the UplinkV4 field.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) SetUplinkV4(v bool) {
	o.UplinkV4 = &v
}

// GetUplinkV6 returns the UplinkV6 field value if set, zero value otherwise.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) GetUplinkV6() bool {
	if o == nil || IsNil(o.UplinkV6) {
		var ret bool
		return ret
	}
	return *o.UplinkV6
}

// GetUplinkV6Ok returns a tuple with the UplinkV6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) GetUplinkV6Ok() (*bool, bool) {
	if o == nil || IsNil(o.UplinkV6) {
		return nil, false
	}
	return o.UplinkV6, true
}

// HasUplinkV6 returns a boolean if a field has been set.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) HasUplinkV6() bool {
	if o != nil && !IsNil(o.UplinkV6) {
		return true
	}

	return false
}

// SetUplinkV6 gets a reference to the given bool and assigns it to the UplinkV6 field.
func (o *UpdateNetworkSwitchStackRoutingInterface200Response) SetUplinkV6(v bool) {
	o.UplinkV6 = &v
}

func (o UpdateNetworkSwitchStackRoutingInterface200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateNetworkSwitchStackRoutingInterface200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InterfaceId) {
		toSerialize["interfaceId"] = o.InterfaceId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Subnet) {
		toSerialize["subnet"] = o.Subnet
	}
	if !IsNil(o.InterfaceIp) {
		toSerialize["interfaceIp"] = o.InterfaceIp
	}
	if !IsNil(o.MulticastRouting) {
		toSerialize["multicastRouting"] = o.MulticastRouting
	}
	if !IsNil(o.VlanId) {
		toSerialize["vlanId"] = o.VlanId
	}
	if !IsNil(o.OspfSettings) {
		toSerialize["ospfSettings"] = o.OspfSettings
	}
	if !IsNil(o.OspfV3) {
		toSerialize["ospfV3"] = o.OspfV3
	}
	if !IsNil(o.Ipv6) {
		toSerialize["ipv6"] = o.Ipv6
	}
	if !IsNil(o.UplinkV4) {
		toSerialize["uplinkV4"] = o.UplinkV4
	}
	if !IsNil(o.UplinkV6) {
		toSerialize["uplinkV6"] = o.UplinkV6
	}
	return toSerialize, nil
}

type NullableUpdateNetworkSwitchStackRoutingInterface200Response struct {
	value *UpdateNetworkSwitchStackRoutingInterface200Response
	isSet bool
}

func (v NullableUpdateNetworkSwitchStackRoutingInterface200Response) Get() *UpdateNetworkSwitchStackRoutingInterface200Response {
	return v.value
}

func (v *NullableUpdateNetworkSwitchStackRoutingInterface200Response) Set(val *UpdateNetworkSwitchStackRoutingInterface200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateNetworkSwitchStackRoutingInterface200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateNetworkSwitchStackRoutingInterface200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateNetworkSwitchStackRoutingInterface200Response(val *UpdateNetworkSwitchStackRoutingInterface200Response) *NullableUpdateNetworkSwitchStackRoutingInterface200Response {
	return &NullableUpdateNetworkSwitchStackRoutingInterface200Response{value: val, isSet: true}
}

func (v NullableUpdateNetworkSwitchStackRoutingInterface200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateNetworkSwitchStackRoutingInterface200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


