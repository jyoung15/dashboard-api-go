/*
Meraki Dashboard API

A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 03 July, 2024 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.48.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateDeviceSensorCommandRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateDeviceSensorCommandRequest{}

// CreateDeviceSensorCommandRequest struct for CreateDeviceSensorCommandRequest
type CreateDeviceSensorCommandRequest struct {
	// Operation to run on the sensor. 'enableDownstreamPower', 'disableDownstreamPower', and 'cycleDownstreamPower' turn power on/off to the device that is connected downstream of an MT40 power monitor. 'refreshData' causes an MT15 or MT40 device to upload its latest readings so that they are immediately available in the Dashboard API.
	Operation string `json:"operation"`
}

type _CreateDeviceSensorCommandRequest CreateDeviceSensorCommandRequest

// NewCreateDeviceSensorCommandRequest instantiates a new CreateDeviceSensorCommandRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateDeviceSensorCommandRequest(operation string) *CreateDeviceSensorCommandRequest {
	this := CreateDeviceSensorCommandRequest{}
	this.Operation = operation
	return &this
}

// NewCreateDeviceSensorCommandRequestWithDefaults instantiates a new CreateDeviceSensorCommandRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateDeviceSensorCommandRequestWithDefaults() *CreateDeviceSensorCommandRequest {
	this := CreateDeviceSensorCommandRequest{}
	return &this
}

// GetOperation returns the Operation field value
func (o *CreateDeviceSensorCommandRequest) GetOperation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operation
}

// GetOperationOk returns a tuple with the Operation field value
// and a boolean to check if the value has been set.
func (o *CreateDeviceSensorCommandRequest) GetOperationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operation, true
}

// SetOperation sets field value
func (o *CreateDeviceSensorCommandRequest) SetOperation(v string) {
	o.Operation = v
}

func (o CreateDeviceSensorCommandRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateDeviceSensorCommandRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["operation"] = o.Operation
	return toSerialize, nil
}

func (o *CreateDeviceSensorCommandRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"operation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateDeviceSensorCommandRequest := _CreateDeviceSensorCommandRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateDeviceSensorCommandRequest)

	if err != nil {
		return err
	}

	*o = CreateDeviceSensorCommandRequest(varCreateDeviceSensorCommandRequest)

	return err
}

type NullableCreateDeviceSensorCommandRequest struct {
	value *CreateDeviceSensorCommandRequest
	isSet bool
}

func (v NullableCreateDeviceSensorCommandRequest) Get() *CreateDeviceSensorCommandRequest {
	return v.value
}

func (v *NullableCreateDeviceSensorCommandRequest) Set(val *CreateDeviceSensorCommandRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDeviceSensorCommandRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDeviceSensorCommandRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDeviceSensorCommandRequest(val *CreateDeviceSensorCommandRequest) *NullableCreateDeviceSensorCommandRequest {
	return &NullableCreateDeviceSensorCommandRequest{value: val, isSet: true}
}

func (v NullableCreateDeviceSensorCommandRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDeviceSensorCommandRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


